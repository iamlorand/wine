<?php
/**
 * DotBoost Technologies Inc.
 * DotKernel Application Framework
 *
 * @category   DotKernel
 * @copyright  Copyright (c) 2009-2015 DotBoost Technologies Inc. (http://www.dotboost.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 * @version    $Id: User.php 980 2015-06-11 13:38:03Z gabi $
 */

 /**
 * Validate User
 * @category   DotKernel
 * @package    DotLibrary
 * @subpackage DotValidate
 * @see		   Dot_Validate
 * @author     DotKernel Team <team@dotkernel.com>
 */

class Dot_Validate_Picture extends Dot_Validate
{
	/**
	 * Validate user options
	 * Is an array with the following keys
	 * 			- who: string - for which type of user the validation is made (user, admin, ...)
	 * 			- action: string - from which action is called the validation(login, add, update, activate, ...)
	 * 			- values: array - what should validate
	 * 			- userId: integer - used for checking the uniqueness of the user(by username or email)
	 * @var array
	 * @access private
	 */
	private $_options = array('who' => 'userData',
														'action' => '',
														'values' => array(),
														'userId' => 0);
	/**
	 * Valid data after validation
	 * @var array
	 * @access private
	 */
	private $_data = array();
	/**
	 * Errors found on validation
	 * @var array
	 * @access private
	 */
	private $_error = array();
	/**
	 * Constructor
	 * @access public
	 * @param array $options [optional]
	 * @return Dot_Validate
	 */
	public function __construct($options = array())
	{
		$this->option = Zend_Registry::get('option');
		foreach ($options as $key =>$value)
		{
			$this->_options[$key] = $value;
		}
	}
	/**
	 * Check if data is valid
	 * @access public
	 * @return bool
	 */
	public function isValid()
	{
		$this->_data = array();
		$this->_error = array();
		$values = $this->_options['values'];
		//validate the input data - username, password and email will be also filtered
		$validatorChain = new Zend_Validate();
		$dotFilter = new Dot_Filter();
		

		// @todo sa fac validate pt poza aici, sa caut ceva de la zend validate pentru poze

		if(array_key_exists('picture', $values))
		{
		    
		    $validatorChain->addValidator(new Zend_Validate(array('extension' => $this->option->validate->file->image->allowExtension->extension,
		                                                          'type' => $this->option->validate->file->image->allowType->type,
		                                                          'min_size' => $this->option->validate->file->image->size->min,
		                                                          'max_size' => $this->option->validate->file->image->size->max
		                                                          )
		                                                     )
		                                  );
			
			
			$this->_callFilter($validatorChain, $values['picture']);
		}



		if(empty($this->_error))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	/**
	 * Get valid data
	 * @access public
	 * @return array
	 */
	public function getData()
	{
		return $this->_data;
	}
	/**
	 * Get errors encounter on validation
	 * @access public
	 * @return array
	 */
	public function getError()
	{
		return $this->_error;
	}
	
	private function _callFilter($validator, $values)
	{
		$dotFilter = new Dot_Filter(array('validator' => $validator, 'values' => $values));
		$dotFilter->filter();
		$this->_data = array_merge($this->_data, $dotFilter->getData());
		$this->_error = array_merge($this->_error, $dotFilter->getError());
	}
}
