<?php

/**
 * 
 * @author Andrei
 *
 */
class Export extends Dot_Model
{
	private $_userAgent;
	private $_httpReferer;
	private $separator = 'xaxbxcxxxyxz';

	/**
	 * Constructor
	 * @access public
	 */
	public function __construct()
	{
		parent::__construct();
	}

	public function getAllCountryForexport()
	{
		$survery = array('3');
		$select = $this->db->select()->from('surveyField');
		$result = $this->db->fetchAll($select);
		foreach($result as $key => $data)
		{
			if($data['id'] == '128')
			{
				$result[$key]['id'] = '133';
			}
			if($data['id'] == '0')
			{
				unset($result[$key]);
				unset($result[$key]);
				unset($result[$key]);
				unset($result[$key]);
			}
			foreach($result as $key => $data)
			{
				if($data['id'] == '128')
				{
					$result[$key]['id'] = '133';
				}
				if($data['id'] == '0')
				{
					unset($result[$key]);
					unset($result[$key]);
					unset($result[$key]);
					unset($result[$key]);
				}
			}
		}
		return $result;
	}
	
	private function getAllQuestionsUnique()
	{
		$select = $this->db->select()
							->from(array('sf'=>'surveyField'), array('id', 'question', 'formId'))
// 							->where('sf.formId >= 100')
// 							->where('sf.formId <= 110')
							->order('id');
		
		$result = $this->db->fetchAll($select);
		
		$questions = array();
		foreach ($result as $question)
		{
			if (!array_key_exists($question['question'], $questions))
			{
				$questions[$question['question']] = array();
			}
			array_push($questions[$question['question']], $question['id']);
		}

		return $questions;
	}
	
	/**
	 * Get all data from googlePlus table for registered users
	 * @return array
	 */
	
	private function getAllUsersForGooglePlus()
	{
		//,'googlePlusFormattedName'=>'formattedName' -> NOT returned by Google+
		$select = $this->db->select()
		->from(array('us' => 'userSocialAccounts'), array('googlePlusId' => 'googlePlusId', 'userId' => 'userId'))
		->join(array('gp' => 'googlePlus'), 'us.googlePlusId = gp.googlePlusId', array('googlePlusId','googlePlusKind' => 'kind','googlePlusDisplayName'=>'displayName',
						'googlePlusFamilyName'=>'familyName','googlePlusGivenName'=>'givenName','googlePlusBirthday'=>'birthday','googlePlusAge' => 'age',
						'googlePlusGender' =>'gender','googlePlusUrl'=>'url','googlePlusImageUrl'=>'imageUrl','googlePlusRelationshipStatus'=>'relationshipStatus',
						'googlePlusTagline'=>'tagline','googlePlusObjectType'=>'objectType','googlePlusBraggingRights'=>'braggingRights','googlePlusPlusOneCount'=>'plusOneCount',
						'googlePlusCircleByCount'=>'circledByCount','googlePlusOccupation'=>'occupation','googlePlusSkills'=>'skills','googlePlusSignUpDate'=>'dateCreated'))
						->joinLeft(array('gpe' => 'googlePlusEmail'), 'gpe.googlePlusId = gp.googlePlusId', array('googlePlusEmail'=>'value','googlePlusEmailType'=>'type'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Get all Twitter users data
	 * @return array
	 */
	
	private function getAllUsersForTwitter()
	{
		$select = $this->db->select()
		->from(array('t' => 'twitter'), array('twitterName'=>'name','twitterScreenName'=>'screenName','twitterLocation'=>'location',
						'twitterDescription'=>'description','twitterFollowersCount'=>'followersCount','twitterFavouritesCount'=>'favouritesCount',
						'twitterAccountDateCreated'=>'accountDateCreated','twitterLanguage'=>'language','twitterUrl'=>'url',
						'twitterExpandedUrl'=>'expandedUrl','twitterSignUpDate'=>'dateCreated'))
						->join (array('us' => 'userSocialAccounts'), 'us.twitterId = t.twitterId', 'userId');
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Export all data (except googlePlusPlaces, googlePlusOrganizations, googlePlusUrls, linkedinCompanies)
	 */
	public function getAllUsersData($dates)
	{
		$ids = $this->getAllUsersIds($dates);
		$users = $this->returnUsersIdsAsKey($this->getAllRegisteredUsers($dates));
		$facebookData = $this->returnUsersIdsAsKey($this->getAllUsersForFacebook($ids));
		$googlePlusData = $this->returnUsersIdsAsKey($this->getAllUsersForGooglePlus());
		$linkedinData = $this->returnUsersIdsAsKey($this->getAllUsersForLinkedin($ids));
		$twitterData = $this->returnUsersIdsAsKey($this->getAllUsersForTwitter());
		$answers = $this->setSurveysData($this->returnUsersSurveyAnswers());

// 		$cityState = $this->returnUsersIdsAsKey($this->getCityAndState());
		$platform = $this->returnUsersIdsAsKey($this->getAllUsers());
		
		$args = array($facebookData, $linkedinData,$answers,$platform);
		$allData = $this->mergeKeysArray($args);
		$allData = $this->mergeUsersArrayWithAllData($users, $allData);
		$questions = $this->formatQuestions($this->getAllSurveysQuestions());
        	
		$data = $this->exportQuestions($questions);
		$allSurveyFields = $this->setAllSurveyFieldsInArray();
		
// 		echo '<pre>';
		
		$fileheader = explode($this->separator, $data);
		
		$filename = 'allUserData - ' . date("d-m-Y-h:i:sA");
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		foreach($allData as $userId => $userData)
		{
			if(! isset($userData['subId']))
			{
				$userData['subId'] = "No data";
			}
			if(! isset($userData['cityLink']))
			{
				$userData['cityLink'] = "No data";
			}
			if(! isset($userData['categoryName']))
			{
				$userData['categoryName'] = "No data";
			}
			if(! isset($userData['jobType']))
			{
				$userData['jobType'] = "No data";
			}
			if(! isset($userData['name']))
			{
			    $userData['name'] = "No data";
			}
			else
			{
			    $replace = array('_' , '-');
			    $cityState = str_replace($replace, " " , $userData['name']);
			    $userData['name'] = ucwords($cityState);
			}

			if(isset($userData['surveyAnswers']))
			{
				$surveyAnswers = $this->exportSurveyAnswers($userData['surveyAnswers'], $allSurveyFields);
			}
			
			unset($allData[$userId]['surveyAnswers']);
			unset($allData[$userId]['facebookId']);
			$socialNetworkData = $this->appendSocialNetworkExportData($userData);
			// 						$data .= '"' . $userId . '","' . $userData['email'] . '","' . $userData['dateCreated'] . '","' . $surveyAnswers . $socialNetworkData . '"' . "\n";
			$values = '' . $userId . $this->separator . $userData['email'] . $this->separator . $userData['dateCreated'] .
									 $this->separator . $userData['name'] .
									 $this->separator . $userData['subId'] . $this->separator . $userData['cityLink'] .
									 $this->separator . $userData['categoryName'] . $this->separator .
									 $userData['jobType'] .$this->separator . $surveyAnswers . $socialNetworkData ;
			$values = explode($this->separator, $values);
			fputcsv($fileOutput, $values);
		}
		fclose($fileOutput);
		
		// 		header("Content-Encoding: UTF-8");
		// 		header("Content-type: text/csv; charset=UTF-8");
		// 		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		// 		header("Content-Transfer-Encoding: binary");
		

		// 		echo "<pre/>";
		die();
	}

	/**
	 * Get all user IDs (only registered users -> only step 2)
	 * @return array:
	 */
	private function getAllUsersIds($dates)
	{
		$dates = $this->formatDate($dates);

		$select = $this->db->select()
						->from('userData', array('userId' => 'id'))
// 						->where('platform=?', $platformIdLookingFor)
						->where(new Zend_db_Expr('CAST(dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		
		$result = $this->db->fetchAll($select);
		
		$ids = $this->returnUsersIds($result);

		return $ids;


	}

	private function getAllUsers()
	{
		$select = $this->db->select()
			->from(array('u' => 'userData'), array('userId' => 'id'))
			->joinLeft(array('mrsits2' => 'microRecruitingSubIdTrackingStep2'), 'mrsits2.userId=u.id', 'subId')
			->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrsits2.subId', '')
			->joinLeft(array('mrjt' => 'microRecruitingJobType'), 'mrjt.id=mrj.jobTypeId', 'jobType');

		$result = $this->db->fetchAll($select);
		
		return $result;
	}

	/**
	 * Return an array with user ids per selected country
	 * @param array $usersArray
	 * @return array:
	 */
	private function returnUsersIds($usersArray)
	{
		$ids = array();
		foreach($usersArray as $user)
		{
			array_push($ids, $user['userId']);
		}
		
		return $ids;
	}

	/**
	 * Return users data with userId as key
	 * @param array $usersArray
	 * @return multitype:unknown
	 */
	private function returnUsersIdsAsKey($usersArray)
	{
		$newData = array();
		foreach($usersArray as $key => $user)
		{
			$newData[$user['userId']] = $user;
			unset($newData[$user['userId']]['userId']);
		}
		
		return $newData;
	}

	/**
	 * Get email and dateCreated for all registered users
	 * @return array
	 */
	private function getAllRegisteredUsers($dates)
	{
		$dates = $this->formatDate($dates);

		$select = $this->db->select()
			->from(array('u' => 'userData'), array('userId' => 'id', 'email', 'dateCreated'))
			->joinLeft(array('mra' => 'microRecruitingActionTracking') , 'u.id=mra.userId' , array('cityLink' => 'city', 'name' => 'city' , 'categoryName' => 'category'))
			->join(array('usa' => 'userSocialAccounts'), 'u.id=usa.userId')
// 			->where('u.platform=?', '2')
			->where(new Zend_db_Expr('CAST(dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	/**
	 * Get all data from facebook table for registered users
	 * @param array $ids
	 * @return array
	 */
	private function getAllUsersForFacebook($ids)
	{
		$select = $this->db->select()
			->from(array('us' => 'userSocialAccounts'), array('userId' => 'userId'))
			->join(array('f' => 'facebook'), 'us.facebookId = f.facebookId', 
								array('facebookEmail' => 'email', 'facebookFirstName' => 'firstName', 
												'facebookLastName' => 'lastName', 'facebookName' => 'name', 
												'facebookGender' => 'gender', 'facebookBirthday' => 'birthday', 
												'facebookAge' => 'age', 'facebookAgeRange' => 'ageRange', 
												'facebookRelationshipStatus' => 'relationshipStatus', 
												'facebookBio' => 'bio', 'facebookHometown' => 'hometown', 
												'facebookLocation' => 'location', 'facebookLocale' => 'locale', 
												'facebookWebsite' => 'website', 'facebookLink' => 'link', 
												'facebookPicture' => 'picture', 'facebookCover' => 'cover', 
												'facebookSignUpDate' => 'dateCreated'))
			->joinLeft(array('fld' => 'facebookLinkDevice'), 'us.facebookId = fld.facebookId', array())
			->joinLeft(array('fd' => 'facebookDevice'), 'fld.deviceId = fd.id', array('facebookDeviceOS' => 'os'))
			->where('us.userId IN (?)', $ids);
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	/**
	 * Get all data from googlePlus table for registered users
	 * @return array
	 */
	// private function getAllUsersForGooglePlus()
	// {
	// 	//,'googlePlusFormattedName'=>'formattedName' -> NOT returned by Google+
	// 	$select = $this->db->select()
	// 		->from(array('us' => 'userSocialAccounts'), array('googlePlusId' => 'googlePlusId', 'userId' => 'userId'))
	// 		->join(array('gp' => 'googlePlus'), 'us.googlePlusId = gp.googlePlusId', 
	// 							array('googlePlusId', 'googlePlusKind' => 'kind', 
	// 											'googlePlusDisplayName' => 'displayName', 
	// 											'googlePlusFamilyName' => 'familyName', 
	// 											'googlePlusGivenName' => 'givenName', 'googlePlusBirthday' => 'birthday', 
	// 											'googlePlusAge' => 'age', 'googlePlusGender' => 'gender', 
	// 											'googlePlusUrl' => 'url', 'googlePlusImageUrl' => 'imageUrl', 
	// 											'googlePlusRelationshipStatus' => 'relationshipStatus', 
	// 											'googlePlusTagline' => 'tagline', 'googlePlusObjectType' => 'objectType', 
	// 											'googlePlusBraggingRights' => 'braggingRights', 
	// 											'googlePlusPlusOneCount' => 'plusOneCount', 
	// 											'googlePlusCircleByCount' => 'circledByCount', 
	// 											'googlePlusOccupation' => 'occupation', 'googlePlusSkills' => 'skills', 
	// 											'googlePlusSignUpDate' => 'dateCreated'))
	// 		->joinLeft(array('gpe' => 'googlePlusEmail'), 'gpe.googlePlusId = gp.googlePlusId', 
	// 							array('googlePlusEmail' => 'value', 'googlePlusEmailType' => 'type'));
		
	// 	$result = $this->db->fetchAll($select);
	// 	return $result;
	// }

	/**
	 * Get all LinkedIn users data for registered users
	 * @param array $ids
	 * @return array
	 */
	private function getAllUsersForLinkedin($ids)
	{
		$select = $this->db->select()
			->from(array('l' => 'linkedin'), 
								array('linkedinFirstName' => 'firstName', 'linkedinLastName' => 'lastName', 
												'linkedinFormattedName' => 'formattedName', 'linkedinEmail' => 'email', 
												'linkedinHeadline' => 'headline', 'linkedinLocationName' => 'locationName', 
												'linkedinLocationCountryCode' => 'locationCountryCode', 
												'linkedinIndustry' => 'industry', 
												'linkedinNumberOfConnections' => 'numberOfConnections', 
												'linkedinNumberOfConnectionsCapped' => 'numberOfConnectionsCapped', 
												'linkedinSummary' => 'summary', 
												'linkedinPublicProfileUrl' => 'publicProfileUrl', 
												'linkedinPictureUrl' => 'pictureUrl', 
												'linkedinPictureUrlOriginal' => 'pictureUrlOriginal', 
												'linkedinProfileUrlRequest' => 'profileUrlRequest', 
												'linkedinApiUrlRequest' => 'apiUrlRequest', 
												'linkedinSignUpDate' => 'dateCreated'))
			->join(array('us' => 'userSocialAccounts'), 'us.linkedinId = l.email', 'userId')
			->where('us.userId IN (?)', $ids);
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	/**
	 * Get all Twitter users data
	 * @return array
	 */
	// private function getAllUsersForTwitter()
	// {
	// 	$select = $this->db->select()
	// 		->from(array('t' => 'twitter'), 
	// 							array('twitterName' => 'name', 'twitterScreenName' => 'screenName', 
	// 											'twitterLocation' => 'location', 'twitterDescription' => 'description', 
	// 											'twitterFollowersCount' => 'followersCount', 
	// 											'twitterFavouritesCount' => 'favouritesCount', 
	// 											'twitterAccountDateCreated' => 'accountDateCreated', 
	// 											'twitterLanguage' => 'language', 'twitterUrl' => 'url', 
	// 											'twitterExpandedUrl' => 'expandedUrl', 
	// 											'twitterSignUpDate' => 'dateCreated'))
	// 		->join(array('us' => 'userSocialAccounts'), 'us.twitterId = t.twitterId', 'userId');
		
	// 	$result = $this->db->fetchAll($select);
	// 	return $result;
	// }

	/**
	 * Set surveys answers data for each user this way:
	 * $newData['#userId']['surveyAnswers']['#surveyId']['#surveyFieldId']
	 * $newData = all data after formatting
	 * @param array $surveyData
	 */
	private function setSurveysData($surveyData)
	{
		$newData = array();
		foreach($surveyData as $userId => $surveyAnswers)
		{
			foreach($surveyAnswers['surveyAnswers'] as $key => $answer)
			{
				if(isset($newData[$userId]['surveyAnswers'][$answer['question']]))
				{
					$newData[$userId]['surveyAnswers'][$answer['question']] = $newData[$userId]['surveyAnswers'][$answer['question']] .
											 ' ' . $answer['answer'];
				}
				else
				{
					$newData[$userId]['surveyAnswers'][$answer['question']] = $answer['answer'];
				}
			}
		}

		return $newData;
	}

	/**
	 * Calls two functions to get and process survey answers for all users
	 * @return array
	 */
	private function returnUsersSurveyAnswers()
	{
		$surveyAnswers = $this->addDataAsArrayPerUserId($this->getAllUsersSurveyAnswers(), 'surveyAnswers');
		return $surveyAnswers;
	}

	/**
	 * Process survey answers taken from database into an array with userKey as key, and survey answers as value ("user ID" => "surveyAnswers")
	 * @param array $data
	 * @param array $arrayKey
	 * @return array:
	 */
	private function addDataAsArrayPerUserId($data, $arrayKey)
	{
		$userArray = array();
		foreach($data as $key => $user)
		{
			if(! isset($userArray[$user['userId']][$arrayKey]))
			{
				$userArray[$user['userId']][$arrayKey] = array();
			}
			$newData = $user;
			// 			unset($newData['userId']);
			array_push($userArray[$user['userId']][$arrayKey], $newData);
		}
		
		return $userArray;
	}

	/**
	 * Get all survey Answers for users
	 * @return array
	 */
	private function getAllUsersSurveyAnswers()
	{
		$select = $this->db->select()
			->from(array('sa' => 'surveyAnswers'), array('surveyId', 'surveyFieldId', 'answer', 'userId'))
			->join(array('sf' => 'surveyField'), 'sa.surveyFieldId=sf.id', array('question'))
			
		// 						->join(array('u' => 'userData'), 'sa.userId = u.id', array('userId' => 'id'))
		// 						->join (array('sf' => 'surveyField'), 'sa.surveyFieldId = sf.id', 'question')
		    ->where('surveyId != 0')
		->where('sa.surveyFieldId != 0');
			
		
		$result = $this->db->fetchAll($select);
		
		//surveyFieldId -- had to set questions for fields deleted -- (those questions still exist but on another surveyFieldId) -- exception surveyFieldId 35 (Doesn't exist)
		$keysArray = array('127' => '132', '128' => '133', '129' => '134', '130' => '135', '131' => '136', 
						// 						'35' => '',
						'36' => '150', '38' => '151');
		
		foreach($result as $key => $value)
		{
			if(array_key_exists($result[$key]['surveyFieldId'], $keysArray))
			{
				$result[$key]['surveyFieldId'] = $keysArray[$result[$key]['surveyFieldId']];
			}
		}

		return $result;
	}

	private function getCityAndState()
	{
		$zipcodeArray = array('129', '134');
		$select = $this->db->select()
		    ->from(array('u' => 'userData') , array('id'))
			->joinLeft(array('sa' => 'surveyAnswers'), 'sa.userId=u.id' ,array('userId'))
			->joinLeft(array('z' => 'zipcode'), 'sa.answer=z.ZipCode', 
								array('city' => new Zend_Db_Expr("if(City IS NOT NULL, City, 'No data')"), 
												'state' => new Zend_Db_Expr("if(State IS NOT NULL, State, 'No data')")))
			->where('sa.surveyFieldId IN (?)', $zipcodeArray);
		
		$result = $this->db->fetchAll($select);
// 		echo '<pre>';
		return $result;
	}

	/**
	 * Merge arrays with users data from Facebook, Google+, LinkedIn and Twitter into one array, with user ID as key
	 * @param array $argsArray
	 * @return multitype:array unknown
	 */
	private function mergeKeysArray($argsArray)
	{
		$dataArray = array();
		foreach($argsArray as $arg)
		{
			foreach($arg as $userId => $value)
			{
				if(! array_key_exists($userId, $dataArray))
				{
					$dataArray[$userId] = $value;
				}
				else
				{
					@$dataArray[$userId] = array_merge($dataArray[$userId], $arg[$userId]);
				}
			}
		}
		
		return $dataArray;
	}

	/**
	 * Merge the arrays with users (email and dateCreated) with the array with user data
	 * @param array $users
	 * @param array $allData
	 * @return array
	 */
	private function mergeUsersArrayWithAllData($users, $allData)
	{
		foreach($allData as $userId => $value)
		{
			if(array_key_exists($userId, $users))
			{
				@$users[$userId] = array_merge($allData[$userId], $users[$userId]);
			}
			else
			{
				unset($users[$userId]);
			}
		}
		return $users;
	}

	/**
	 * Return questions in array (as "surveyNumber" => "array with questions from that survey")
	 * @param array with questions from database (as "key" => "questionDetails")
	 * @return array with questions
	 */
	private function formatQuestions($questions)
	{
		$newData = array();
		
		// good one
		foreach($questions as $question)
		{
			if(! empty($question['surveyFieldQuestion']))
			{
				$newData[$question['surveyId']][$question['surveyFieldId']] = $question['surveyFieldQuestion'];
			}
		}
		return $newData;
	}

	/**
	 * Get all survey questions
	 * @return array
	 */
	private function getAllSurveysQuestions()
	{
		$select = $this->db->select()->from(array('sf' => 'surveyField'), 
								array('surveyFieldId' => 'id', 'surveyFieldQuestion' => 'question', 
												'surveyId' => 'formId'));
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	private function headerData2($allData)
	{
		$data = 'subId' . $this->separator;
	}

	/**
	 * Set the table header
	 * Write all questions in a string (this will be the table header from the export file)
	 * return $data (string with the table header)
	 **/
	private function exportQuestions($questions)
	{
		$data = 'userId' . $this->separator . 'email' . $this->separator . 'dateCreated' . $this->separator . 'city/state' .
								 /* $this->separator . 'state' . */ $this->separator . 'subId' . $this->separator . 'cityLink' .
								 $this->separator . 'categoryName' . $this->separator  . 'jobType' . $this->separator ;
		$getAllQuestions = $this->getAllQuestionsUnique();
		
// 		$questionsOrder = $this->returnAnswersAndQuestionsOrder();
		
		/* $questionsOrder is an array with an array inside it
		 * use a double foreach to parse it
		 */
		
		foreach ($getAllQuestions as $question => $surveyFields)
		{
			$data .= '' . $question . $this->separator;
		}
		
// 		foreach($questionsOrder as $surveyKey => $surveyFieldKeys)
// 		{	
// 			foreach($surveyFieldKeys as $surveyFieldKey)
// 			{
// 				if($surveyKey == 101)
// 				{
// 					$data .= '' . $questions['101'][$surveyFieldKey] . $this->separator;
// 				}
// 				elseif($surveyKey == 103)
// 				{
// 				    $data .= '' . $questions['103'][$surveyFieldKey] . $this->separator;
// 				}
// 				elseif($surveyKey == 102)
// 				{
// 				    $data .= '' . $questions['102'][$surveyFieldKey] . $this->separator;
// 				}
// 				elseif($surveyKey == 100)
// 				{
// 					$data .= '' . $questions['100'][$surveyFieldKey] . $this->separator;
// 				}
// 				elseif($surveyKey == 999)
// 				{
// 					$data .= '' . $questions['999'][$surveyFieldKey] . $this->separator;
// 				}
// 				else
// 				{
// 					$data .= '' . $questions[$surveyKey][$surveyFieldKeys] . $this->separator;
// 				}

// 			}
// 	   }

        
		$socialNetworkFields = $this->returnSocialNetworkFields();
		foreach($socialNetworkFields as $field)
		{
			$data .= $field . $this->separator;
		}
		
		$data .= '"' . "\n";
		
		return $data;
	}

	/**
	 * Set Answers and questions order in the file export (also set which questions / answers to export)
	 * If we want to change the order of questions / answers, we only have to change the order of keys from array
	 * @return multitype:string
	 */
	private function returnAnswersAndQuestionsOrder()
	{
// 	   return array('157' => array('160' , '645'),
// 	                           '159' => array('165' , '168' , '636'),
// 	                           '158' => array('634'),
// 	                           '155' => array('652'),
// 	                           '156' => array('650'),
// 	                           '161' ,'163' ,'164' ,'166' , '167' , '169' ,'171' ,'646' ,'647' ,
// 	                           '153' => array('648'),
// 	                           '154' => array('649'),
// 	                           '651' ,'635' ,'637' , '638' , '639' , '640' , '641', '642', '643', '644');
	    
		//keys 27 and 37 are for users that registered before we've changed the questions
		return array('100' => array('153', '154' ,'155','156', '157'=>'160', '158', '159'=>'165','161','163','164','166','167','168'),
// 						'999'=>array('154','171'), 
						'101' => array('169', '170') ,
		                  '103' => array('645','646','647','648','649','650','651','652'),
		                 '102' =>array('634','635','636','637','638','639','640','641','642','643','644'));
	}

	/**
	 * Set which fields (and the order) from social networks should be exported
	 * @return multitype:string
	 */
	private function returnSocialNetworkFields()
	{
		return array("facebookEmail", "facebookFirstName", "facebookLastName", "facebookName", "facebookGender", 
						"facebookBirthday", "facebookAge", "facebookAgeRange", "facebookRelationshipStatus", 
						"facebookBio", "facebookHometown", "facebookLocation", "facebookLocale", "facebookWebsite", 
						"facebookLink", "facebookPicture", "facebookCover", "facebookSignUpDate", "facebookDeviceOS", 
						"googlePlusKind", "googlePlusDisplayName", "googlePlusFamilyName", "googlePlusGivenName", 
						"googlePlusBirthday", "googlePlusAge", "googlePlusGender", "googlePlusUrl", "googlePlusImageUrl", 
						"googlePlusRelationshipStatus", "googlePlusTagline", "googlePlusObjectType", 
						"googlePlusBraggingRights", "googlePlusPlusOneCount", "googlePlusCircleByCount", 
						"googlePlusOccupation", "googlePlusSkills", "googlePlusSignUpDate", "googlePlusEmail", 
						"googlePlusEmailType", "linkedinFirstName", "linkedinLastName", "linkedinFormattedName", 
						"linkedinEmail", "linkedinLocationName", "linkedinLocationCountryCode", "linkedinIndustry", 
						"linkedinNumberOfConnections", "linkedinNumberOfConnectionsCapped", "linkedinSummary", 
						"linkedinPublicProfileUrl", "linkedinPictureUrl", "linkedinPictureUrlOriginal", 
						"linkedinProfileUrlRequest", "linkedinApiUrlRequest", "linkedinSignUpDate", "twitterName", 
						"twitterScreenName", "twitterLocation", "twitterDescription", "twitterFollowersCount", 
						"twitterFavouritesCount", "twitterAccountDateCreated", "twitterLanguage", "twitterUrl", 
						"twitterExpandedUrl");
		/*
		 * ---- Google+ places lived, organizations etc... MORE than one ----
		 * "googlePlusLived","googlePlusPrimaryPlace","googlePlusOranizationTitle","googlePlusTitle",
		 * "googlePlusOranizationType","startDate","endDate","primary","googlePlusUrlLink","googlePlusLabel","googlePlusUrlType",
		 */
	}

	/**
	 * Get all surveys fields IDs per survey
	 * @return array which contain all surveys, with data as: "survey ID" => "survey fields IDs"
	 */
	private function setAllSurveyFieldsInArray()
	{
		
		$questions = $this->getAllQuestionsUnique();
		
		$allSurveyQuestions = array_keys($questions);
// 		$surveyIds = array('100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110');
		
// 		$getAllQuestions = $this->getAllQuestionsUnique();
		
// 		foreach ($getAllQuestions as $question => $surveyFieldsIds)
// 		{
// 			foreach ($surveyFieldsIds as $surveyFieldId)
// 			{
// 				array_push($allSurveyIds, $surveyFieldId);
// 			}
// 		}
		
// 		foreach($surveyIds as $id)
// 		{
// 			$surveyIdsFromDB = $this->returnAllSurveyFields($id);
// 			$ids = array();
			
// 			foreach($surveyIdsFromDB as $key => $value)
// 			{
// 				array_push($ids, $value['id']);
// 			}
// 			$allSurveyIds[$id] = $ids;
           
// 		}
		
// 		asort($allSurveyIds);
		return $allSurveyQuestions;
	}

	/**
	 * Get all survey fields for the selected survey($id = survey ID)
	 * @param $id => survey ID
	 * @return array
	 */
	private function returnAllSurveyFields($id)
	{
		$select = $this->db->select()
			->from('surveyField', array('id'))
			->where('formId = ?', $id)
			->where('question IS NOT NULL');
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	/**
	 * Write all survey answers for ONE user in a string (this will represent data for one row (for one user) from the export file)
	 * return $data (string with all)
	 **/
	private function exportSurveyAnswers($surveyAnswers, $allSurveyFields)
	{
// 		if(isset($surveyAnswers['3']['160']))
// 		{
// 			$allSurveyFields['3']['0'] = '160';
// 		}

		// 		array_push($allSurveyFields['3'], '160');
		// 		array_push($allSurveyFields['120'], '152');
		
		$data = '';
		foreach($allSurveyFields as $surveyKey => $surveyFieldQuestion)
		{
// 			foreach($surveyFieldsArray as $surveyFieldKey)
// 			{
				if(isset($surveyAnswers[$surveyKey]))
				{
					if(! array_key_exists($surveyFieldQuestion, $surveyAnswers[$surveyKey]))
					{
						$surveyAnswers[$surveyFieldQuestion] = 'No Answer';
					}
					else
					{
						$surveyAnswers[$surveyFieldQuestion] = str_replace('"', " ", 
												$surveyAnswers[$surveyKey][$surveyFieldQuestion]);
						$surveyAnswers[$surveyFieldQuestion] = trim(
												preg_replace('/\s+/', ' ', $surveyAnswers[$surveyFieldQuestion]));
					}
				}
				else
				{
					$surveyAnswers[$surveyKey][$surveyFieldQuestion] = 'No Answer';
				}
// 			}
		}
		
		$answersOrder = $this->setAllSurveyFieldsInArray();
		
// 		if(isset($surveyAnswers['3']['160']))
// 		{
// 			$answersOrder['3']['0'] = '160';
// 		}

		foreach($answersOrder as $surveyFieldQuestion)
		{
// 			foreach($surveyFieldKeys as $surveyFieldKey)
// 			{
				// 					$data .= '' . $surveyAnswers[$surveyKey][$surveyFieldKey] . '","';
				$answer = (isset($surveyAnswers[$surveyFieldQuestion])) ? $surveyAnswers[$surveyFieldQuestion] : 'No Answer';
				$data .= '' . $answer . $this->separator;
// 			}
		}

		return $data;
	}

	/**
	 * Write all social network data for ONE user in a string (this will represent data for one row (for one user) from the export file)
	 * return $data (string with all)
	 **/
	private function appendSocialNetworkExportData($socialNetworkData)
	{
		$socialNetworkFields = $this->returnSocialNetworkFields();
		$data = '';
		foreach($socialNetworkFields as $field)
		{
			if(! isset($socialNetworkData[$field]) || $socialNetworkData[$field] == '')
			{
				// 				$data .= '' . 'No Data' . '","';
				$data .= 'No Data' . $this->separator;
			}
			else
			{
				$value = trim(preg_replace('/\s+/', ' ', $socialNetworkData[$field]));
				
				if($field == 'linkedinSummary')
				{
					$value = str_replace(",", "", $value);
				}
				$value = preg_replace('/[^(\x20-\x7F)]*/', '', $value);
				// 				$data .= '' . "$value" . '","';
				$data .= "$value" . $this->separator;
			}
		}
		
		return $data;
	}

	/**
	 * Get all categories answers (all jobs)
	 * @return array
	 */
	public function getJobRecords()
	{
		$select = $this->db->select()
			->from(array('mrca' => 'microRecruitingCategoryAnswered'), array('id', 'category'))
			->join(array('sa' => 'surveyAnswers'), 'mrca.userId=sa.userId', array('zipcode' => 'answer'))
			->join(array('z' => 'zipCodeList'), 'z.zipCode=sa.answer', array('state', 'city'))
			->where('surveyFieldId =?', '136');
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	public function getPlatformId($platform)
	{
		$select = $this->db->select()
			->from('microRecruitingJobPlatform', array('id'))
			->where('name =?', $platform);
		
		$result = $this->db->fetchOne($select);
		return $result;
	}

	/**
	 * Get jobs for categories (where there is no keyWord -> keyWord = NULL)
	 * @param string $platformId
	 * @return array
	 */
	
	public function getJobsForCategories($platformId)
	{
		$select = $this->db->select()
			->from(array('mj' => 'microRecruitingJob'), array('id'))
			->joinLeft(array('mc' => 'microRecruitingCities'), 'mc.id=mj.cityId', array('city' => 'cityLink', 'cityState' => 'name'))
			->joinLeft(array('mca' => 'microRecruitingCategory'), 'mca.id=mj.categoryId', array('category' => 'categoryName'))
			->joinLeft(array('mjt' => 'microRecruitingJobType'), 'mjt.id=mj.jobTypeId', array('jobTypeId' => 'id', 'jobType'))
			->joinLeft(array('mjti' => 'microRecruitingJobTitle'), 'mjti.id=mj.titleId', array('title'))
			->joinLeft(array('mjd' => 'microRecruitingJobDescription'), 'mjd.categoryId=mj.descriptionId', array('description'))
			->joinLeft(array('mkw' => 'microRecruitingJobKeyWord'), 'mkw.id=mj.keyWordId', array('keyWord'))
			->where('mj.platformId =?', $platformId)
			->where('mj.status=?', '1')
			->where('mj.keyWordId IS NULL')
			//UNTIL THEY GIVE US CATEGORY FOR ORPHAN PAGES
// 			->where('mj.categoryId <= ?', '4')
			->order('mj.id');
		
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Get jobs for keyWords
	 * @param string $platformId
	 * @return array
	 */
	
	public function getJobsForKeyWords($platformId)
	{
		$select = $this->db->select()
			->from(array('mj' => 'microRecruitingJob'), array('id'))
			->joinLeft(array('mc' => 'microRecruitingCities'), 'mc.id=mj.cityId', array('city' => 'cityLink', 'cityState' => 'name'))
			->joinLeft(array('mca' => 'microRecruitingCategory'), 'mca.id=mj.categoryId', array('category' => 'categoryName'))
			->joinLeft(array('mjt' => 'microRecruitingJobType'), 'mjt.id=mj.jobTypeId', array('jobTypeId' => 'id', 'jobType'))
			->joinLeft(array('mjti' => 'microRecruitingJobTitle'), 'mjti.id=mj.titleId', array('title'))
			->joinLeft(array('mjd' => 'microRecruitingJobDescription'), 'mjd.categoryId=mj.descriptionId', array('description'))
			->joinLeft(array('mkw' => 'microRecruitingJobKeyWord'), 'mkw.id=mj.keyWordId', array('keyWord'))
			->where('mj.platformId =?', $platformId)
			->where('mj.status=?', '1')
			->where('mj.keyWordId IS NOT NULL')
			//UNTIL THEY GIVE US CATEGORY FOR ORPHAN PAGES
// 			->where('mj.categoryId <= ?', '4')
			->order('mj.id');
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Append data that is common for all categories answers (for all jobs)
	 * @param array $jobs
	 * @return array
	 */
	public function appendDataToJobRecords($jobs, $platform)
	{
	    //ticket 1024 titles array
	    $titlesArray1024 = array(
	        'Open Housekeeper Position competitive pay and great benefits',
	        'Office Cleaning Jobs At Night- Great Pay',
	        'Office Cleaning Job- Great Pay',
	        'Office Cleaner- Great Pay',
	        'Office Building Cleaning Jobs- Great Pay',
	        'Night Office Cleaning Jobs- Great Pay',
	        'Night Cleaner Jobs- Great Pay',
	        'Maintenance Janitorial Jobs- Great Pay',
	        'Local Housekeeping Jobs- Great Pay',
	        'Jobs Hotel Housekeeping- Great Pay',
	        'Jobs Cleaning Offices At Night- Great Pay',
	        'Job Search House Cleaning- Great Pay',
	        'Job Search Cleaning- Great Pay',
	        'Job Cleaning Houses- Great Pay',
	        'Job Cleaner- Great Pay',
	        'Janitorial Jobs- Great Pay',
	        'Iss Cleaning Jobs- Great Pay',
	        'Housekeeping- Great Pay',
	        'Housekeeping Duties- Great Pay',
	        'Housekeeping Cleaning- Great Pay',
	        'Housekeeping Careers- Great Pay',
	        'Hotel Cleaning Jobs- Great Pay',
	        'Hospitality Housekeeping Jobs- Great Pay',
	        'Hospital Cleaning Jobs- Great Pay',
	        'General Cleaner Wanted Start Today',
	        'Cleaning Service Jobs- Great Pay',
	        'Cleaning Position- Great Pay',
	        'Cleaning Offices At Night Jobs- Great Pay',
	        'Cleaning Jobs Near Me- Great Pay',
	        'Cleaning Job / Housekeeper- Great Pay',
	        'Cleaning Companies Jobs- Great Pay',
	        'Carpet Cleaning Jobs- Great Pay',
	        'Building and Grounds Cleaning Position Available Apply Today',
	        'Aircraft Cleaners No Experience Necessary - Will Train'
	    );
	    
	    $juniorDevTitle = array(
	        'We Are Looking ForJr Developer',
            'We Are Looking ForJunior developer',
            'We Are Looking Forentry level developer',
            'We Are Looking ForJr Programmer',
            'We Are Looking ForJunior Programmer',
            'We Are Looking ForEntry Level Programmer',
            'Hiring NowJr Developer',
            'Hiring NowJunior developer',
            'Hiring Nowentry level developer',
            'Hiring NowJr Programmer',
            'Hiring NowJunior Programmer',
            'Hiring NowEntry Level Programmer',
            'Job Opportunity Available ForJr Developer',
            'Job Opportunity Available ForJunior developer',
            'Job Opportunity Available Forentry level developer',
            'Job Opportunity Available ForJr Programmer',
            'Job Opportunity Available ForJunior Programmer',
            'Job Opportunity Available ForEntry Level Programmer'
	    );
	    
	    $juniorWebDeveloperTitle = array(
	        'We Are Looking ForJr web Developer',
	        'We Are Looking ForJunior web developer',
	        'We Are Looking Forentry level web developer',
	        'We Are Looking ForJr web programmer',
	        'We Are Looking ForJunior web programmer',
	        'We Are Looking Forentry level web programmer',
	        'Hiring NowJr web Developer',
	        'Hiring NowJunior web developer',
	        'Hiring Nowentry level web developer',
	        'Hiring NowJr web programmer',
	        'Hiring NowJunior web programmer',
	        'Hiring Nowentry level web programmer',
	        'Job Opportunity Available For Jr web Developer',
	        'Job Opportunity Available For Junior web developer',
	        'Job Opportunity Available For entry level web developer',
	        'Job Opportunity Available For Jr web programmer',
	        'Job Opportunity Available For Junior web programmer',
	        'Job Opportunity Available For entry level web programmer'
	    );
	    
	    $juniorFrontendTitle = array(
	        'We Are Looking ForJr Front End Developer',
	        'We Are Looking ForJunior front end developer',
	        'We Are Looking Forentry level front end developer',
	        'We Are Looking ForJr Front End programmer',
	        'We Are Looking ForJunior front end programmer',
	        'We Are Looking Forentry level front end programmer',
	        'Hiring NowJr Front End Developer',
	        'Hiring NowJunior front end developer',
	        'Hiring Nowentry level front end developer',
	        'Hiring NowJr Front End programmer',
	        'Hiring NowJunior front end programmer',
	        'Hiring Nowentry level front end programmer',
	        'Job Opportunity Available For Jr Front End Developer',
	        'Job Opportunity Available For Junior front end developer',
	        'Job Opportunity Available For entry level front end developer',
	        'Job Opportunity Available For Jr Front End programmer',
	        'Job Opportunity Available For Junior front end programmer',
	        'Job Opportunity Available For entry level front end programmer'
	         
	    );
		$price = $this->returnPrice();
		$commonFields = array('company' => 'Crowded', 'url' => 'http://profile.crowded.com/', 
						'date' => date('Y-m-d h:i:sa', time()), 'country' => 'United States');
		
		if($platform == "VHM" || $platform == "Jobs2Career")
		{
			$commonFields['price'] = $price[$platform];
		}
		
		$description = $this->returnDescription();
		$title = $this->returnTitle();
		
		if($platform == "VHM" || $platform == "Jobs2Career" || $platform == 'Job.com')
		{
			$categoriesMapper = $this->returnCategories($platform);
		}
		
		$xmlArray = array();
		
		if($platform == 'Juju')
		{
			$jobTypes = $this->returnJujuJobType();
		}
		
		if($platform == 'Job.com')
		{
		    $jobTypes = $this->returnJobcomJobType();
		}
		
		$orphanJobsCategories = $this->getOrphanCategories();
		
		$subIds = array();
		
		foreach ($jobs as $job)
		{
			array_push($subIds, $job['id']);
		}
		
		$costs = $this->returnLastCostPerSubId($subIds);
		
		foreach ($costs as $subId => $cpc)
		{
			$costs[$subId]['cpc'] = $cpc['cpc'];
		}
		foreach($jobs as $key => $job)
		{
			$cityState = explode('-', $job['cityState']);
			$city = $cityState[0];
			if(count($cityState) > 1)
			{
				$state = $cityState[1];
			}
			
			if($job['cityState'] == 'Connecticut')
			{
				$city = 'Stamford';
				$state = 'CT';
			}
			elseif($job['cityState'] == 'New Jersey')
			{
				$city = 'Newark';
				$state = 'NJ';
			}
			
			if($job['cityState'] == "New York City-NY")
			{
				$city = 'New York';
			}
			if($job['cityState'] == "Washington-DC")
			{
				$city = 'Washington';
			}
			
			if($platform == "VHM")
			{
				$xmlArray[$key]['id'] = $job['id'];
				if($job['category'] == 'cleaning_authority_or1')
				{
				    $xmlArray[$key]['sponsor'] = 'Cleaning Authority';
				}
				else
				{
				    $xmlArray[$key]['sponsor'] = $commonFields['company'];
				}
			    $titleForCompany = explode('-', $job['title']);
			    $finalTitleForCompany = '';
			    foreach ($titleForCompany as $title)
			    {
			        if(strstr($title,'Up to') == false)
			        {
			            if($finalTitleForCompany == '')
			            {
			                 $finalTitleForCompany = $finalTitleForCompany . $title;
			            }
			            else 
			            {
			                $finalTitleForCompany = $finalTitleForCompany . "-" . $title;
			            }
			        }
			    }
			    
				$xmlArray[$key]['title'] = $job['title'];
				
				//creating "clones" sets
				//we assign another category to these job ids
				if ($job['id'] >= 27534 and $job['id'] <= 27872)
				{
					$xmlArray[$key]['categoryid'] = '21';
				}
				elseif ($job['id'] >= 27873 and $job['id'] <= 28211)
				{
					$xmlArray[$key]['categoryid'] = '23';
				}
				elseif ($job['id'] >= 28212 and $job['id'] <= 28550)
				{
					$xmlArray[$key]['categoryid'] = '29';
				}
			    elseif ($job['id'] >= 73957 and $job['id'] <= 74076 || $job['id'] >= 75317 and $job['id'] <= 75356)
				{
					$xmlArray[$key]['categoryid'] = '31';
				}
				else
				{
					$xmlArray[$key]['categoryid'] = $categoriesMapper[$job['category']];
				}
				
				//setting job title
				if ($job['id'] >= 73837 and $job['id'] <= 73856 || $job['id'] >= 73957 and $job['id'] <= 73976)
				{
				    $xmlArray[$key]['title'] = 'General Cleaner Wanted Start Today';
				}
				elseif ($job['id'] >= 73857 and $job['id'] <= 73876 || $job['id'] >= 73977 and $job['id'] <= 73996)
				{
				    $xmlArray[$key]['title'] = 'Building and Grounds Cleaning Position Available Apply Today';
				}
				elseif ($job['id'] >= 73877 and $job['id'] <= 73896 || $job['id'] >= 73997 and $job['id'] <= 74016)
				{
				    $xmlArray[$key]['title'] = 'Aircraft Cleaners No Experience Necessary - Will Train';
				}
				elseif ($job['id'] >= 73897 and $job['id'] <= 73916 || $job['id'] >= 74017 and $job['id'] <= 74036)
				{
				    $xmlArray[$key]['title'] = 'Open Housekeeper Position competitive pay and great benefits';
				}
				elseif ($job['id'] >= 73917 and $job['id'] <= 73936 || $job['id'] >= 74037 and $job['id'] <= 74056)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Up to $13/HR';
				}
				elseif ($job['id'] >= 73937 and $job['id'] <= 73956 || $job['id'] >= 74057 and $job['id'] <= 74076)
				{
				    $xmlArray[$key]['title'] = 'Housekeeping Positions - Up to $13/HR';
				}
				elseif ($job['id'] >= 75277 and $job['id'] <= 75296 || $job['id'] >= 75317 and $job['id'] <= 75336)
				{
				    $xmlArray[$key]['title'] = 'Looking For A Housekeeper - Up to $13/HR';
				}
				elseif ($job['id'] >= 75297 and $job['id'] <= 75317 || $job['id'] >= 75337 and $job['id'] <= 75356)
				{
				    $xmlArray[$key]['title'] = 'Hotel Housekeeper Jobs - Up to $13/HR';
				}
				//ticket 935
				elseif ($job['id'] == 75918)
				{
				    $xmlArray[$key]['title'] = 'Call Center Representative Multiple Shifts Available';
				}
				elseif ($job['id'] == 75919)
				{
				    $xmlArray[$key]['title'] = 'Apply Now For Cashier Position';
				}
				elseif ($job['id'] == 75920)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Get Paid Weekly';
				}
				elseif ($job['id'] == 75921)
				{
				    $xmlArray[$key]['title'] = 'Package Delivery Drivers - Get Paid Weekly';
				}
				elseif ($job['id'] == 75922)
				{
				    $xmlArray[$key]['title'] = 'Get a Warehouse Job - Get Paid Weekly';
				}
				elseif ($job['id'] == 75923)
				{
				    $xmlArray[$key]['title'] = 'Hiring Package Handlers and Helpers';
				}
				elseif ($job['id'] == 75924)
				{
				    $xmlArray[$key]['title'] = 'Store Managers - No Experience Necessary - Will Train';
				}
				elseif ($job['id'] == 75925)
				{
				    $xmlArray[$key]['title'] = 'Food Service Workers Position Available';
				}
				elseif ($job['id'] == 75926)
				{
				    $xmlArray[$key]['title'] = 'Nanny Jobs in Your Local Area';
				}
				elseif ($job['id'] == 75927)
				{
				    $xmlArray[$key]['title'] = 'Dock Workers Immediate Openings';
				}
				elseif ($job['id'] == 75928)
				{
				    $xmlArray[$key]['title'] = 'Become a Dog Walker / Pet Sitter';
				}
				elseif ($job['id'] == 75929)
				{
				    $xmlArray[$key]['title'] = 'Immediate Need For Forklift Operators Will Train';
				}
				elseif ($job['id'] == 75930)
				{
				    $xmlArray[$key]['title'] = 'Immediate Position Available For Security Guard';
				}
				elseif ($job['id'] == 75931)
				{
				    $xmlArray[$key]['title'] = 'Become a Customer Service Representative and Make A Difference';
				}
				elseif ($job['id'] == 75932)
				{
				    $xmlArray[$key]['title'] = 'Cashiers - Get Paid Weekly';
				}
				elseif ($job['id'] == 75933)
				{
				    $xmlArray[$key]['title'] = 'Warehouse Workers - Earn Up to $13/Hour';
				}
				elseif ($job['id'] == 75934)
				{
				    $xmlArray[$key]['title'] = 'Clerk - Hiring Clerk positions - Start Immediately';
				}
				elseif ($job['id'] == 75935)
				{
				    $xmlArray[$key]['title'] = 'Administrative Assistants - Great Pay';
				}
				//ticket 1024
			    elseif($job['id'] >= 76116 && $job['id'] <= 76149)
				{
			        $titleId = 76149 - $job['id'];
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				elseif($job['id'] >= 76150 && $job['id'] <= 76183)
				{
				    $titleId = 76183 - $job['id'];
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 76864 && $job['id'] <= 76897)
				{
				    $titleId = 76897 - $job['id'];
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				elseif($job['id'] >= 76898 && $job['id'] <= 76931)
				{
				    $titleId = 76931 - $job['id'];
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				elseif($job['id'] >= 76932 && $job['id'] <= 76965)
				{
				    $titleId = 76965 - $job['id'];
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				
				//ticket 1098 new flow 11 added
				elseif($job['id'] >= 77986 && $job['id'] <= 78750)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $titleId = 78750 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorDevTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $titleId = 78750 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorWebDeveloperTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $titleId = 78750 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorFrontendTitle[$titleId];
				    }
				}

				//setting job description
				if($job['id'] >= 75902 && $job['id'] <= 75917 || $job['id'] >= 75918 && $job['id'] <= 75935)
				{
				    $xmlArray[$key]['description'] = 'Hiring Immediately. Start Today For Great Pay.';
				}
				//ticket 1024
				elseif($job['id'] >= 76116 && $job['id'] <= 76183)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 76864 && $job['id'] <= 76965)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
			    elseif($job['id'] >= 77986 && $job['id'] <= 78750)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Entry Level Developer';
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Web Developer';
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Frontend Developer';
				    }
				}
				else
				{
				    $xmlArray[$key]['description'] = $job['description'];
				}
				$xmlArray[$key]['city'] = $city;
				$xmlArray[$key]['state'] = $state;
				// 				$xmlArray[$key]['zip'] = $job['zipcode'];
				$xmlArray[$key]['cpc'] = $commonFields['price'];
				$xmlArray[$key]['cpc'] = $costs[$job['id']]['cpc'];
				
				if($job['id'] >= 75902 && $job['id'] <= 75917)//ticket 935
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/general_cleaner_co1_1c?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['category'] == 'cleaning_authority_or1')
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1e?id=' . $job['id'];
				    $xmlArray[$key]['company'] = 'Cleaning Authority' . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['id'] >= 77986 && $job['id'] <= 78750)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['id'] >= 87934 && $job['id'] <= 87969)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['id'] >= 88366 && $job['id'] <= 88401)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				else
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1c?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
// 				if ($xmlArray[$key]['city'] == "San Francisco")
// 				{
// 					$xmlArray[$key]['cpc'] = "$2.10";
// 				}
				
// 				if (in_array($job['category'], $orphanJobsCategories))
// 				{
// 					$xmlArray[$key]['cpc'] = "$0.26";
						
// 					if ($xmlArray[$key]['city'] == "San Francisco")
// 					{
// 						$xmlArray[$key]['cpc'] = "$1.26";
// 					}
// 				}
                $xmlArray[$key]['company'] = 'Crowded';
               // $xmlArray[$key]['url'] = 'http://devprofile.crowded.com/registration?subid=' . $job['id'];
               $xmlArray[$key]['url'] = 'http://profile.crowded.com/registration?subid=' . $job['id'] . '&amp;cat=developers&amp;platform=VH_Em';
			}
			
			elseif($platform == "Jobs2Career")
			{
				$xmlArray[$key]['referencenumber'] = $job['id'];
				$titleForCompany = explode('-', $job['title']);
				$finalTitleForCompany = '';
				foreach ($titleForCompany as $title)
				{
				    if(strstr($title,'Up to') == false)
				    {
				        if($finalTitleForCompany == '')
				        {
				            $finalTitleForCompany = $finalTitleForCompany . $title;
				        }
				        else
				        {
				            $finalTitleForCompany = $finalTitleForCompany . "-" . $title;
				        }
				    }
				}
				
				$xmlArray[$key]['title'] = $job['title'];
				
				//creating "clones" sets
				//we assign another category to these job ids
				if ($job['id'] >= 28551 and $job['id'] <= 30245)
				{
					$xmlArray[$key]['categoryid'] = 'Hospitality / Hotel';
				}
				elseif ($job['id'] >= 30246 and $job['id'] <= 31940)
				{
					$xmlArray[$key]['categoryid'] = 'Restaurant / Food Service';
				}
				elseif ($job['id'] >= 31941 and $job['id'] <= 33635)
				{
					$xmlArray[$key]['categoryid'] = 'Retail';
				}
				elseif ($job['id'] >= 33636 and $job['id'] <= 35330)
				{
					$xmlArray[$key]['categoryid'] = 'Warehouse / Logistics / Distribution';
				}
				elseif ($job['id'] >= 35331 and $job['id'] <= 37025)
				{
					$xmlArray[$key]['categoryid'] = 'Other / Miscellaneous';
				}
				else 
				{
					$xmlArray[$key]['category'] = $categoriesMapper[$job['category']];
				}
				
				//setting title
				if ($job['id'] >= 74077 and $job['id'] <= 74176)
				{
				    $xmlArray[$key]['title'] = 'General Cleaner Wanted Start Today';
				}
				elseif ($job['id'] >= 74177 and $job['id'] <= 74276)
				{
				    $xmlArray[$key]['title'] = 'Building and Grounds Cleaning Position Available Apply Today';
				}
				elseif ($job['id'] >= 74277 and $job['id'] <= 74376)
				{
				    $xmlArray[$key]['title'] = 'Aircraft Cleaners No Experience Necessary - Will Train';
				}
				elseif ($job['id'] >= 74377 and $job['id'] <= 74476)
				{
				    $xmlArray[$key]['title'] = 'Open Housekeeper Position competitive pay and great benefits';
				}
				elseif ($job['id'] >= 74477 and $job['id'] <= 74576)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Up to $13/HR';
				}
				elseif ($job['id'] >= 74577 and $job['id'] <= 74676)
				{
				    $xmlArray[$key]['title'] = 'Housekeeping Positions - Up to $13/HR';
				}
				elseif ($job['id'] >= 75357 and $job['id'] <= 75456)
				{
				    $xmlArray[$key]['title'] = 'Looking For A Housekeeper - Up to $13/HR';
				}
				elseif ($job['id'] >= 75457 and $job['id'] <= 75556)
				{
				    $xmlArray[$key]['title'] = 'Hotel Housekeeper Jobs - Up to $13/HR';
				}
				//ticket 935
				elseif ($job['id'] >= 75936 and $job['id'] <= 75940)
				{
				    $xmlArray[$key]['title'] = 'Call Center Representative Multiple Shifts Available';
				}
				elseif ($job['id'] >= 75941 and $job['id'] <= 75945)
				{
				    $xmlArray[$key]['title'] = 'Apply Now For Cashier Position';
				}
				elseif ($job['id'] >= 75946 and $job['id'] <= 75950)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Get Paid Weekly';
				}
				elseif ($job['id'] >= 75951 and $job['id'] <= 75955)
				{
				    $xmlArray[$key]['title'] = 'Package Delivery Drivers - Get Paid Weekly';
				}
				elseif ($job['id'] >= 75956 and $job['id'] <= 75960)
				{
				    $xmlArray[$key]['title'] = 'Get a Warehouse Job - Get Paid Weekly';
				}
				elseif ($job['id'] >= 75961 and $job['id'] <= 75965)
				{
				    $xmlArray[$key]['title'] = 'Hiring Package Handlers and Helpers';
				}
				elseif ($job['id'] >= 75966 and $job['id'] <= 75970)
				{
				    $xmlArray[$key]['title'] = 'Store Managers - No Experience Necessary - Will Train';
				}
				elseif ($job['id'] >= 75971 and $job['id'] <= 75975)
				{
				    $xmlArray[$key]['title'] = 'Food Service Workers Position Available';
				}
				elseif ($job['id'] >= 75976 and $job['id'] <= 75980)
				{
				    $xmlArray[$key]['title'] = 'Nanny Jobs in Your Local Area';
				}
				elseif ($job['id'] >= 75981 and $job['id'] <= 75985)
				{
				    $xmlArray[$key]['title'] = 'Dock Workers Immediate Openings';
				}
				elseif ($job['id'] >= 75986 and $job['id'] <= 75990)
				{
				    $xmlArray[$key]['title'] = 'Become a Dog Walker / Pet Sitter';
				}
				elseif ($job['id'] >= 75991 and $job['id'] <= 75995)
				{
				    $xmlArray[$key]['title'] = 'Immediate Need For Forklift Operators Will Train';
				}
				elseif ($job['id'] >= 75996 and $job['id'] <= 76000)
				{
				    $xmlArray[$key]['title'] = 'Immediate Position Available For Security Guard';
				}
				elseif ($job['id'] >= 76001 and $job['id'] <= 76005)
				{
				    $xmlArray[$key]['title'] = 'Become a Customer Service Representative and Make A Difference';
				}
				elseif ($job['id'] >= 76006 and $job['id'] <= 76010)
				{
				    $xmlArray[$key]['title'] = 'Cashiers - Get Paid Weekly';
				}
				elseif ($job['id'] >= 76011 and $job['id'] <= 76015)
				{
				    $xmlArray[$key]['title'] = 'Warehouse Workers - Earn Up to $13/Hour';
				}
				elseif ($job['id'] >= 76016 and $job['id'] <= 76020)
				{
				    $xmlArray[$key]['title'] = 'Clerk - Hiring Clerk positions - Start Immediately';
				}
				elseif ($job['id'] >= 76021 and $job['id'] <= 76025)
				{
				    $xmlArray[$key]['title'] = 'Administrative Assistants - Great Pay';
				}
				//ticket 1024
				elseif($job['id'] >= 76184 && $job['id'] <= 76523)
				{
				    $titleId = 76523 - $job['id'];
				    while($titleId > 33)
				    {
				        $titleId = $titleId - 34;
				    }
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 76966 && $job['id'] <= 77475)
				{
				    $titleId = 77475 - $job['id'];
				    $titleId = $titleId % 34;
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				//ticket 1098 new flow 11 added
				elseif($job['id'] >= 78751 && $job['id'] <= 83025)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $titleId = 83025 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorDevTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $titleId = 83025 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorWebDeveloperTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $titleId = 83025 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorFrontendTitle[$titleId];
				    }
				}
				
				$xmlArray[$key]['jobtype'] = $job['jobType'];
				
				//setting job description
				if($job['id'] >= 75763 && $job['id'] <= 75788 || $job['id'] >= 75936 && $job['id'] <= 76025)
				{
				    $xmlArray[$key]['description'] = 'Hiring Immediately. Start Today For Great Pay.';
				}
				//ticket 1024
				elseif($job['id'] >= 76184 && $job['id'] <= 76523)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 76966 && $job['id'] <= 77475)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				elseif($job['id'] >= 78751 && $job['id'] <= 83025)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Entry Level Developer';
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Web Developer';
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Frontend Developer';
				    }
				}
				else
				{
				    $xmlArray[$key]['description'] = $job['description'];
				}
				$xmlArray[$key]['city'] = $city;
				$xmlArray[$key]['state'] = $state;
				// 				$xmlArray[$key]['postalcode'] = $job['zipcode'];
				$xmlArray[$key]['cpc'] = $commonFields['price'];
				$xmlArray[$key]['date'] = $commonFields['date'];
				
				$xmlArray[$key]['cpc'] = $costs[$job['id']]['cpc'];
				
				if($job['id'] >= 75763 && $job['id'] <= 75788)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/general_cleaner_co1_1c?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['category'] == 'cleaning_authority_or1')
				{
				    $xmlArray[$key]['company'] = 'Cleaning Authority' . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1e?id=' . $job['id'];
				}
				elseif($job['id'] >= 78751 && $job['id'] <= 83025)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['id'] >= 88006 && $job['id'] <= 88185)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				elseif($job['id'] >= 88438 && $job['id'] <= 88617)
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
				else
				{
				    $xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1c?id=' . $job['id'];
				    $xmlArray[$key]['company'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				}
// 				if ($xmlArray[$key]['city'] == "San Francisco")
// 				{
// 					$xmlArray[$key]['cpc'] = "$2.10";
// 				}
				
// 				if (in_array($job['category'], $orphanJobsCategories))
// 				{
// 					$xmlArray[$key]['cpc'] = "$0.26";
						
// 					if ($xmlArray[$key]['city'] == "San Francisco")
// 					{
// 						$xmlArray[$key]['cpc'] = "$1.26";
// 					}
// 				}
            $xmlArray[$key]['company'] = 'Crowded';
            
//             $xmlArray[$key]['url'] = 'http://devprofile.crowded.com/registration?subid=' . $job['id'];
            $xmlArray[$key]['url'] = 'http://profile.crowded.com/registration?subid=' . $job['id'] . '&amp;cat=developers&amp;platform=J2C';
			}
			
			elseif($platform == "Juju")
			{
				$xmlArray[$key]['jobid'] = $job['id'];
				
				//setting title
				if ($job['id'] >= 74677 and $job['id'] <= 74776)
				{
				    $xmlArray[$key]['title'] = 'General Cleaner Wanted Start Today';
				}
				elseif ($job['id'] >= 74777 and $job['id'] <= 74876)
				{
				    $xmlArray[$key]['title'] = 'Building and Grounds Cleaning Position Available Apply Today';
				}
				elseif ($job['id'] >= 74877 and $job['id'] <= 74976)
				{
				    $xmlArray[$key]['title'] = 'Aircraft Cleaners No Experience Necessary - Will Train';
				}
				elseif ($job['id'] >= 74977 and $job['id'] <= 75076)
				{
				    $xmlArray[$key]['title'] = 'Open Housekeeper Position competitive pay and great benefits';
				}
				elseif ($job['id'] >= 75077 and $job['id'] <= 75176)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Up to $13/HR';
				}
				elseif ($job['id'] >= 75177 and $job['id'] <= 75276)
				{
				    $xmlArray[$key]['title'] = 'Housekeeping Positions - Up to $13/HR';
				}
				elseif ($job['id'] >= 75557 and $job['id'] <= 75656)
				{
				    $xmlArray[$key]['title'] = 'Looking For A Housekeeper - Up to $13/HR';
				}
				elseif ($job['id'] >= 75657 and $job['id'] <= 75756)
				{
				    $xmlArray[$key]['title'] = 'Hotel Housekeeper Jobs - Up to $13/HR';
				}
				
				$xmlArray[$key]['sourceurl'] = $commonFields['url'];
				$xmlArray[$key]['jobsourceurl'] = $commonFields['url'];
				//ticket 935
				if ($job['id'] >= 76026 and $job['id'] <= 76030)
				{
				    $xmlArray[$key]['title'] = 'Call Center Representative Multiple Shifts Available';
				}
				elseif ($job['id'] >= 76031 and $job['id'] <= 76035)
				{
				    $xmlArray[$key]['title'] = 'Apply Now For Cashier Position';
				}
				elseif ($job['id'] >= 76036 and $job['id'] <= 76040)
				{
				    $xmlArray[$key]['title'] = 'Government Cleaning Jobs - Get Paid Weekly';
				}
				elseif ($job['id'] >= 76041 and $job['id'] <= 76045)
				{
				    $xmlArray[$key]['title'] = 'Package Delivery Drivers - Get Paid Weekly';
				}
				elseif ($job['id'] >= 76046 and $job['id'] <= 76050)
				{
				    $xmlArray[$key]['title'] = 'Get a Warehouse Job - Get Paid Weekly';
				}
				elseif ($job['id'] >= 76051 and $job['id'] <= 76055)
				{
				    $xmlArray[$key]['title'] = 'Hiring Package Handlers and Helpers';
				}
				elseif ($job['id'] >= 76056 and $job['id'] <= 76060)
				{
				    $xmlArray[$key]['title'] = 'Store Managers - No Experience Necessary - Will Train';
				}
				elseif ($job['id'] >= 76061 and $job['id'] <= 76065)
				{
				    $xmlArray[$key]['title'] = 'Food Service Workers Position Available';
				}
				elseif ($job['id'] >= 76066 and $job['id'] <= 76070)
				{
				    $xmlArray[$key]['title'] = 'Nanny Jobs in Your Local Area';
				}
				elseif ($job['id'] >= 76071 and $job['id'] <= 76075)
				{
				    $xmlArray[$key]['title'] = 'Dock Workers Immediate Openings';
				}
				elseif ($job['id'] >= 76076 and $job['id'] <= 76080)
				{
				    $xmlArray[$key]['title'] = 'Become a Dog Walker / Pet Sitter';
				}
				elseif ($job['id'] >= 76081 and $job['id'] <= 76085)
				{
				    $xmlArray[$key]['title'] = 'Immediate Need For Forklift Operators Will Train';
				}
				elseif ($job['id'] >= 76086 and $job['id'] <= 76090)
				{
				    $xmlArray[$key]['title'] = 'Immediate Position Available For Security Guard';
				}
				elseif ($job['id'] >= 76091 and $job['id'] <= 76095)
				{
				    $xmlArray[$key]['title'] = 'Become a Customer Service Representative and Make A Difference';
				}
				elseif ($job['id'] >= 76096 and $job['id'] <= 76100)
				{
				    $xmlArray[$key]['title'] = 'Cashiers - Get Paid Weekly';
				}
				elseif ($job['id'] >= 76101 and $job['id'] <= 76105)
				{
				    $xmlArray[$key]['title'] = 'Warehouse Workers - Earn Up to $13/Hour';
				}
				elseif ($job['id'] >= 76106 and $job['id'] <= 76110)
				{
				    $xmlArray[$key]['title'] = 'Clerk - Hiring Clerk positions - Start Immediately';
				}
				elseif ($job['id'] >= 76111 and $job['id'] <= 76115)
				{
				    $xmlArray[$key]['title'] = 'Administrative Assistants - Great Pay';
				}
				//ticket 1024
				elseif($job['id'] >= 76524 && $job['id'] <= 76863)
				{
				    $titleId = 76863 - $job['id'];
				    while($titleId > 33)
				    {
				        $titleId = $titleId - 34;
				    }
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 77476 && $job['id'] <= 77986)
				{
				    $titleId = 77986 - $job['id'];
				    $titleId = $titleId % 34;
				    $xmlArray[$key]['title'] = $titlesArray1024[$titleId];
				}
				//ticket 1098 new flow 11 added
				elseif($job['id'] >= 83026 && $job['id'] <= 87300)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $titleId = 87300 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorDevTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $titleId = 87300 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorWebDeveloperTitle[$titleId];
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $titleId = 87300 - $job['id'];
				        $titleId = $titleId % 18;
				        $xmlArray[$key]['title'] = $juniorFrontendTitle[$titleId];
				    }
				}
				else
				{
				    $xmlArray[$key]['title'] = $job['title'];
				}
				$xmlArray[$key]['type'] = $jobTypes[$job['jobTypeId']];
				
				if($job['id'] >= 75789 && $job['id'] <= 75901)
				{
				    $xmlArray[$key]['source'] = $commonFields['company'];
				    $xmlArray[$key]['employer'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = $commonFields['company'];
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/general_cleaner_co1_1c?id=' . $job['id'];
				}
				elseif($job['category'] == 'cleaning_authority_or1')
				{
				    $xmlArray[$key]['source'] = 'Cleaning Authority';
				    $xmlArray[$key]['employer'] ='Cleaning Authority' . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = 'Cleaning Authority';
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1e?id=' . $job['id'];
				}
				elseif($job['id'] >= 83026 && $job['id'] <= 87300)
				{
				    $xmlArray[$key]['source'] = $commonFields['company'];
				    $xmlArray[$key]['employer'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = $commonFields['company'];
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
				elseif($job['id'] >= 88186 && $job['id'] <= 88365)
				{
				    $xmlArray[$key]['source'] = $commonFields['company'];
				    $xmlArray[$key]['employer'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = $commonFields['company'];
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
				elseif($job['id'] >= 88618 && $job['id'] <= 88797)
				{
				    $xmlArray[$key]['source'] = $commonFields['company'];
				    $xmlArray[$key]['employer'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = $commonFields['company'];
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
				else
				{
				    $xmlArray[$key]['source'] = $commonFields['company'];
				    $xmlArray[$key]['employer'] = $commonFields['company'] . " - " . $xmlArray[$key]['title'];
				    $xmlArray[$key]['jobsource'] = $commonFields['company'];
				    $xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1c?id=' . $job['id'];
				}
				
			    //setting job description
				if($job['id'] >= 75789 && $job['id'] <= 75901 || $job['id'] >= 76026 && $job['id'] <= 76115)
				{
				    $xmlArray[$key]['description'] = 'Hiring Immediately. Start Today For Great Pay.';
				}
				//ticket 1024
				elseif($job['id'] >= 76524 && $job['id'] <= 76863)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				//ticket 1024 / 2
				elseif($job['id'] >= 77476 && $job['id'] <= 77986)
				{
				    $xmlArray[$key]['description'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				elseif($job['id'] >= 83026 && $job['id'] <= 87300)
				{
				    if($job['category'] == 'junior_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Entry Level Developer';
				    }
				    elseif($job['category'] == 'junior_web_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Web Developer';
				    }
				    elseif($job['category'] == 'junior_frontend_developer')
				    {
				        $xmlArray[$key]['description'] = '3 Open Positions For Junior Frontend Developer';
				    }
				}
				else
				{
				    $xmlArray[$key]['description'] = $job['description'];
				}
				$xmlArray[$key]['location']['nation'] = $commonFields['country'];
				$xmlArray[$key]['location']['city'] = $city;
				$xmlArray[$key]['location']['state'] = $state;
				// 				$xmlArray[$key]['postalcode'] = $job['zipcode'];
		// 				$xmlArray[$key]['cpc'] = $commonFields['price'];
				$xmlArray[$key]['feeddate'] = $commonFields['date'];
				$xmlArray[$key]['postingdate'] = $commonFields['date'];
				
				$xmlArray[$key]['employer'] = 'Crowded';
				
// 				$xmlArray[$key]['joburl'] = 'http://devprofile.crowded.com/registration?subid=' . $job['id'];
				$xmlArray[$key]['joburl'] = 'http://profile.crowded.com/registration?subid='. $job['id'] . '&amp;cat=developers&amp;platform=Jju';
			}
			elseif($platform == "TopJobsUSA")
			{
				$xmlArray[$key]['JobID'] = $job['id'];
				$xmlArray[$key]['JobDate'] = $commonFields['date'];
				$xmlArray[$key]['JobTitle'] = $job['title'];
				$xmlArray[$key]['JobDescription'] = $job['description'];
				$xmlArray[$key]['JobCity'] = $city;
				$xmlArray[$key]['JobState'] = $state;
				//$xmlArray[$key]['jobzip'] = ???; - need more info
				$titleForCompany = explode('-', $job['title']);
				$finalTitleForCompany = '';
				foreach ($titleForCompany as $title)
				{
				    if(strstr($title,'Up to') == false)
				    {
				        if($finalTitleForCompany == '')
				        {
				            $finalTitleForCompany = $finalTitleForCompany . $title;
				        }
				        else
				        {
				            $finalTitleForCompany = $finalTitleForCompany . "-" . $title;
				        }
				    }
				}
				if ($xmlArray[$key]['JobID'] >= 87256 && $xmlArray[$key]['JobID'] <= 87867)
				{
				    $xmlArray[$key]['JobUrl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
				elseif ($xmlArray[$key]['JobID'] >= 87970 && $xmlArray[$key]['JobID'] <= 88005)
				{
				    $xmlArray[$key]['JobUrl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
				elseif ($xmlArray[$key]['JobID'] >= 88402 && $xmlArray[$key]['JobID'] <= 88437)
				{
				    $xmlArray[$key]['JobUrl'] = $commonFields['url'] . $job['city'] . '/'. $job['category'] .'?id=' . $job['id'];
				}
			    else 
			    {
			        $xmlArray[$key]['JobUrl'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '_1c?id=' . $job['id'];
			    }
				//setting costum title/description
				if($xmlArray[$key]['JobID'] >= 87256 && $xmlArray[$key]['JobID'] <= 87459)
				{
				    $titleId = 87459 - $xmlArray[$key]['JobID'];
				    $titleId = $titleId % 18;
				    $xmlArray[$key]['JobTitle'] = $juniorDevTitle[$titleId];
				    $xmlArray[$key]['JobDescription'] = '3 Open Positions For Entry Level Developer';
				}
				elseif($xmlArray[$key]['JobID'] >= 87460 && $xmlArray[$key]['JobID'] <= 87663)
				{
				    $titleId = 87663 - $xmlArray[$key]['JobID'];
				    $titleId = $titleId % 18;
				    $xmlArray[$key]['JobTitle'] = $juniorWebDeveloperTitle[$titleId];
				    $xmlArray[$key]['JobDescription'] = '3 Open Positions For Junior Web Developer';
				}
				elseif($xmlArray[$key]['JobID'] >= 87664 && $xmlArray[$key]['JobID'] <= 87867)
				{
				    $titleId = 87867 - $xmlArray[$key]['JobID'];
				    $titleId = $titleId % 18;
				    $xmlArray[$key]['JobTitle'] = $juniorFrontendTitle[$titleId];
				    $xmlArray[$key]['JobDescription'] = '3 Open Positions For Junior Frontend Developer';
				}
				elseif($xmlArray[$key]['JobID'] >= 87868 && $xmlArray[$key]['JobID'] <= 87900)
				{
				    $titleId = 87900 - $xmlArray[$key]['JobID'];
				    $titleId = $titleId % 34;
				    $xmlArray[$key]['JobTitle'] = $titlesArray1024[$titleId];
				    $xmlArray[$key]['JobDescription'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				elseif($xmlArray[$key]['JobID'] >= 87901 && $xmlArray[$key]['JobID'] <= 87934)
				{
				    $titleId = 87934 - $xmlArray[$key]['JobID'];
				    $titleId = $titleId % 34;
				    $xmlArray[$key]['JobTitle'] = $titlesArray1024[$titleId];
				    $xmlArray[$key]['JobDescription'] = 'Hiring House Cleaners / housekeeping. Great Pay for Experience.';
				}
				$xmlArray[$key]['JobCompany'] = $commonFields['company'] . " - " . $xmlArray[$key]['JobTitle'];
				
				$xmlArray[$key]['JobCompany'] = 'Crowded';
// 				$xmlArray[$key]['JobUrl'] = 'http://devprofile.crowded.com/registration?subid=' . $job['id'];
				$xmlArray[$key]['JobUrl'] = 'http://profile.crowded.com/registration?subid='. $job['id'] . '&amp;cat=developers&amp;platform=TopJUS';
			}
			
			elseif($platform == 'Job.com')
			{
			    $xmlArray[$key]['jobData']['jobCategoryID'] = $categoriesMapper[$job['category']];
			    $xmlArray[$key]['jobData']['jobTitleST'] = $job['title'];
			    $xmlArray[$key]['jobData']['jobCompanyST'] = $commonFields['company'] . " - " . $xmlArray[$key]['jobData']['jobTitleST'];
			    $xmlArray[$key]['jobData']['jobCityST'] = $city;
			    $xmlArray[$key]['jobData']['jobStateID'] = $state;
			    $xmlArray[$key]['jobData']['jobClickPrice'] = $costs[$job['id']]['cpc'];
			    $xmlArray[$key]['jobData']['jobWorkTypeID'] = $job['jobTypeId'];
			    
			    $xmlArray[$key]['contentData']['contentJobDescST'] = $job['description'];
			    
			    $xmlArray[$key]['jobData']['jobCompanyST'] = 'Crowded';
			   // $xmlArray[$key]['contactInfo']['contactURLST'] = 'http://devprofile.crowded.com/registration?subid=' . $job['id'];
			    $xmlArray[$key]['contactInfo']['contactURLST'] = 'http://profile.crowded.com/registration?subid='. $job['id'] . '&amp;cat=developers&amp;platform=JB';
			  //  $xmlArray[$key]['cpc'] = $costs[$job['id']]['cpc'];
			}
		}
		return $xmlArray;
	}

	public function exportJobs($allJobs, $platform)
	{
		/* create a dom document with encoding utf8 */
		$domtree = new DOMDocument('1.0', 'UTF-8');
		$domtree->formatOutput = true;
		
		/* create the root element of the xml tree */
		if($platform == 'VHM')
		{
			$xmlRoot = $domtree->createElement("JOBS");
		}
		elseif($platform == 'Jobs2Career')
		{
			$xmlRoot = $domtree->createElement("source");
		}
		elseif($platform == 'Juju')
		{
			$xmlRoot = $domtree->createElement("positionfeed");
		}
		elseif($platform == 'TopJobsUSA')
		{
		    $xmlRoot = $domtree->createElement("jobs");
		}
		elseif($platform == 'Job.com')
		{
		    $xmlRoot = $domtree->createElement("jobListing");
		}
		
		/* append it to the document created */
		$xmlRoot = $domtree->appendChild($xmlRoot);
		
		foreach ($allJobs as $jobs)
		{
			foreach($jobs as $key => $record)
			{
				if($platform == 'Juju')
				{
					$currentTrack = $domtree->createElement('job');
					$currentTrack->setAttribute("id", $record['jobid']);
					unset($record['jobid']);
				}
				else
				{
					$currentTrack = $domtree->createElement("job");
				}
				
				$currentTrack = $xmlRoot->appendChild($currentTrack);
				foreach($record as $tag => $value)
				{
					if($platform == 'Juju')
					{
						if($tag == "location")
						{
							$locationTrack = $domtree->createElement($tag);
							foreach($record[$tag] as $locationType => $value)
							{
								$locationTrack->appendChild($domtree->createElement($locationType, $value));
							}
							$currentTrack->appendChild($locationTrack);
							unset($record[$tag]);
						}
					}
					elseif($platform == 'Job.com')
					{
					    
					    if($tag == 'jobData')
					    {
					        $contentData = $domtree->createElement($tag);
					        foreach($record[$tag] as $contentType => $value)
					        {
					            $contentData->appendChild($domtree->createElement($contentType, $value));
					        }
					        $currentTrack->appendChild($contentData);
					    }
					    
					    if($tag == 'contentData')
					    {
					        $contentData = $domtree->createElement($tag);
					        foreach($record[$tag] as $contentType => $value)
					        {
					            $contentData->appendChild($domtree->createElement($contentType, $value));
					        }
					        $currentTrack->appendChild($contentData);
					    }
					    
					    if($tag == 'contactInfo')
					    {
					        $contentData = $domtree->createElement($tag);
					        foreach($record[$tag] as $contentType => $value)
					        {
					            $contentData->appendChild($domtree->createElement($contentType, $value));
					        }
					        $currentTrack->appendChild($contentData);
					    }
					}
					if($tag != 'location' && $tag != 'contentData' && $tag != 'contactInfo' && $tag != 'jobData')
					{
						$currentTrack->appendChild($domtree->createElement($tag, $value));
					}
				}
			}
		}
		
// 		$filename = 'testFile-' . $platform . '.xml';
// 		$path = APPLICATION_PATH . '/upload/model/' . $filename;
// 		$fp = fopen($path, 'w');
// 		fwrite($fp, $domtree->saveXML());
// 		fclose($fp);
// 		chmod($path, 0775);
		
		header('Content-Disposition: attachment;filename=' . $platform . ' - ' . date('Y-m-d h:i:sa', time()) . '.xml');
		header('Content-Type: text/xml');
		
		echo $domtree->saveXML();
		exit();
	}

	/**
	 * Return category for each platform (for VHM we have category ID)
	 * @param string $platform
	 * @return array
	 */
	private function returnCategories($platform)
	{
		if($platform == 'VHM')
		{
			$platformId = '1';
		}
		elseif($platform == "Jobs2Career")
		{
			$platformId = '2';
		}
		elseif($platform == "ADWORDS")
		{
			$platformId = '10';
		}
		elseif($platform == "Job.com")
		{
		    $platformId = '39';
		}
		
		$select = $this->db->select()
						->from(array('mcjpc' => 'microRecruitingJobPlatformCategory'), array('platformCategory'))
						->join(array('mc' => 'microRecruitingCategory'), 'mcjpc.categoryId=mc.id', array('categoryName'))
						->where('platformId =?', $platformId);
		
		$result = $this->db->fetchAll($select);
		
		$categories = array();
		
		foreach ($result as $category)
		{
			$categories[$category['categoryName']] = $category['platformCategory'];
		}
		
		return $categories;
	}

	/**
	 * Set category as key and text as value
	 * for title and description until now
	 * @param array $data
	 */
	
	private function setCategoryAndText($data)
	{
		$newArrayData = array();
		foreach($data as $category)
		{
			$newArrayData[$category['category']] = $category['text'];
		}

		return $newArrayData;
	}
	
	/**
	 * Return description for jobs
	 * @return array
	 */
	private function returnDescription()
	{
		$select = $this->db->select()
						->from(array('mc' => 'microRecruitingCategory'), array('category' => 'categoryName'))
						->join(array('mjd' => 'microRecruitingJobDescription'), 'mc.id=mjd.categoryId', array('text' => 'description'));
		
		$result = $this->db->fetchAll($select);
		$result = $this->setCategoryAndText($result);
		
		return $result;
		
// 		return array('childcare' => "Get hired immediately and start working today. Earn up to $20/hr on your flexible schedule.", // $19/hr for newborn jobs and $16/hr for all other jobs. Always seeking great new caregivers on an ongoing basis. Apply Now and get Started Today
// 						'delivery' => 'Earn $25/hr by delivering stuff. You can use your bike, car, van, or truck. We work around your schedule, pick the shifts that work best for you. Start working today.', //Do you have a Pickup Truck ? Cargo Van? Box Truck? You choose your own schedules and earn up to $30+/hr. To Get Started Immediately Visit Our Site To Apply, 
// 						'dogwalking' => "You can earn up to $1,000 a month doing something you love! Become a pet / dog sitter and get Paid quickly.", //We're looking to hire dog walkers in your area. This is a fantastic way to earn some extra income. Apply Now To Get Started,
// 						'driving' => "Drive and get paid weekly in fares by helping our community of riders get around town. Driving is a great way to earn cash on your schedule. Apply Now and Start Earning Income Today");
	}

	/**
	 * Return title for jobs
	 * @return array
	 */
	private function returnTitle()
	{
		$select = $this->db->select()
						->from(array('mc' => 'microRecruitingCategory'), array('category' => 'categoryName'))
						->join(array('mjt' => 'microRecruitingJobTitle'), 'mc.id=mjt.categoryId', array('text' => 'title'));
		
		$result = $this->db->fetchAll($select);
		$result = $this->setCategoryAndText($result);

		return $result;
		
// 		return array('childcare' => "Nanny Jobs in Your Local Area - Part Time $20/hr", //Flexible Babysitting Jobs Available (up to $19/hr)
// 						'delivery' => "Hate sitting behind a desk all day?", // Get a Delivery Job (up to $25/hr)
// 						'dogwalking' => "Become a Dog Walker / Pet Sitter. $1,000/month.", // Petsitting/Dogwalkers Needed - Part-Time (up to $500/week) // Dog Walkers / Pet Sitters Needed - Part-Time (up to $500/week)
// 						'driving' => "Part Time Driver Wanted - Independent Contractor (Up to $25/hr)");
	}

	/**
	 * Return price for jobs per platform
	 * @return array
	 */
	private function returnPrice()
	{
		return array('VHM' => '$0.21', 'Jobs2Career' => '$0.36');
	}

	/**
	 * return Job Type for Juju (strings that have to be in XMLs)
	 * In database we have the table microRecruitingJobType (#id => 'jobType')
	 * The table has exactly the same job types, but values from DB are easier to be understood
	 * Values from DB are valid for Jobs2Career too (DON'T CHANGE THOSE VALUES -> or if you do, make an array like below and asign the correspondet #ID to each string)
	 * Actually, here, we are asigning the valid strings that Juju platform accepts in XMLs
	 * @return array
	 */
	private function returnJujuJobType()
	{
		return array('1' => 'fulltime', '2' => 'parttime', '3' => 'contract', '4' => 'temporary', '5' => 'seasonal');
	}
	
	private function returnJobcomJobType()
	{
	    return array('0' => 'Any', '1' => 'Full-Time', '2' => 'Part-Time', '3' => 'Contract', '4' => 'Consultant');
	}

	/**
	 * insert jobs to microRecruitingJob table
	 */
	public function insertJobs()
	{
		$cities = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12');
// 		$cities = array('1', '2', '4', '7');
		
		$jobs = array();
		
		for ($i = 24; $i <= 126; $i++)
		{
			if ($i != 27 & $i != 125)
			{
				$jobs[$i] = array('categoryId' => $i, 'titleId' => $i, 'descriptionId' => $i);
			}
		}
		
// 		$jobs = array(array('categoryId' => '5', 'titleId' => '5', 'descriptionId' => '5'), 
// 						array('categoryId' => '6', 'titleId' => '6', 'descriptionId' => '6'), 
// 						array('categoryId' => '7', 'titleId' => '7', 'descriptionId' => '7'), 
// 						array('categoryId' => '8', 'titleId' => '8', 'descriptionId' => '8'));
		$jobTypes = array('1', '2', '3', '4', '5');
		
// 		$id = 10473;
		$id = 17745;
		
		foreach($cities as $city)
		{
			foreach($jobTypes as $jobType)
			{
				foreach($jobs as $job)
				{
					$job['id'] = $id;
					$job['cityId'] = $city;
					$job['jobTypeId'] = $jobType;
					$job['platformId'] = '3';
					$new_job = $job;
					
					$this->db->insert('microRecruitingJob', $new_job);
					exit;
					$id++;
				}
			}
		}
		echo "done";
		exit;
	}

	/**
	 * Return Orphan categories
	 * @return array
	 */
	
	private function getOrphanCategories()
	{
		$select = $this->db->select()
					->from('microRecruitingCategory', array('category' => 'categoryName'))
					->where('id >= ?', '5')
					->where('id <= ?', '23');
		
		$result = $this->db->fetchAll($select);
		
		$categories = array();
		
		foreach ($result as $category)
		{
			array_push($categories, $category['category']);
		}
		
		return $categories;
	}
	
	/**
	 * Append data that is common for all categories answers (for all jobs)
	 * @param array $jobs
	 * @return array
	 */
	public function appendDataToJobRecordsForKeyWords($jobs, $platform)
	{
		$price = $this->returnPrice();
		$commonFields = array('company' => 'MicroRecruiting', 'url' => 'http://www.microrecruiting.com/', 
						'date' => date('Y-m-d h:i:sa', time()), 'country' => 'United States');
		
		if($platform == "VHM" || $platform == "Jobs2Career")
		{
			$commonFields['price'] = $price[$platform];
		}
		
		if($platform == "VHM" || $platform == "Jobs2Career")
		{
			$categories = array('VHM' => '33', 'Jobs2Career' => 'Driver / Transportation / Maritime');
			$category = $categories[$platform];
		}
		
		$xmlArray = array();
		
		if($platform == 'Juju')
		{
			$jobTypes = $this->returnJujuJobType();
		}
		
		$subIds = array();
		
		foreach ($jobs as $job)
		{
			array_push($subIds, $job['id']);
		}
		
		$costs = $this->returnLastCostPerSubId($subIds);
		
		foreach ($costs as $subId => $cpc)
		{
			$costs[$subId]['cpc'] = $cpc['cpc'];
		}
		
		foreach($jobs as $key => $job)
		{
			$cityState = explode('-', $job['cityState']);
			$city = $cityState[0];
			if(count($cityState) > 1)
			{
				$state = $cityState[1];
			}
			$title = $job['keyWord'] . " - Earn Up to $25/Hour";
			$description = "Earn up to $25/hr - if you already drive with Uber, Lyft, or another ride-sharing company or deliver with DoorDash, Postmates, or Instacart - Apply right now";
			
			if($job['cityState'] == 'Connecticut')
			{
				$city = 'Stamford';
				$state = 'CT';
			}
			elseif($job['cityState'] == 'New Jersey')
			{
				$city = 'Newark';
				$state = 'NJ';
			}
			
			if($job['cityState'] == "New York City-NY")
			{
				$city = 'New York';
			}
			if($job['cityState'] == "Washington-DC")
			{
				$city = 'Washington';
			}
			
			if($platform == "VHM")
			{
				$xmlArray[$key]['id'] = $job['id'];
				$xmlArray[$key]['sponsor'] = $commonFields['company'];
				$xmlArray[$key]['company'] = $commonFields['company'];
				$xmlArray[$key]['title'] = $title;
				$xmlArray[$key]['categoryid'] = $category;
				$xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '?id=' .
										 $job['id'];
				$xmlArray[$key]['description'] = $description;
				$xmlArray[$key]['city'] = $city;
				$xmlArray[$key]['state'] = $state;
				// 				$xmlArray[$key]['zip'] = $job['zipcode'];
				$xmlArray[$key]['cpc'] = $commonFields['price'];
				
// 				if ($xmlArray[$key]['city'] == "San Francisco")
// 				{
// 					$xmlArray[$key]['cpc'] = "$2.10";
// 				}
				$xmlArray[$key]['cpc'] = $costs[$job['id']]['cpc'];
			}
			
			elseif($platform == "Jobs2Career")
			{
				$xmlArray[$key]['referencenumber'] = $job['id'];
				$xmlArray[$key]['company'] = $commonFields['company'];
				$xmlArray[$key]['title'] = $title;
				$xmlArray[$key]['category'] = $category;
				$xmlArray[$key]['jobtype'] = $job['jobType'];
				$xmlArray[$key]['url'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '?id=' .
										 $job['id'];
				$xmlArray[$key]['description'] = $description;
				$xmlArray[$key]['city'] = $city;
				$xmlArray[$key]['state'] = $state;
				// 				$xmlArray[$key]['postalcode'] = $job['zipcode'];
				$xmlArray[$key]['cpc'] = $commonFields['price'];
				$xmlArray[$key]['date'] = $commonFields['date'];
				
// 				if ($xmlArray[$key]['city'] == "San Francisco")
// 				{
// 					$xmlArray[$key]['cpc'] = "$2.10";
// 				}
				$xmlArray[$key]['cpc'] = $costs[$job['id']]['cpc'];

			}
			
			elseif($platform == "Juju")
			{
				$xmlArray[$key]['jobid'] = $job['id'];
				$xmlArray[$key]['source'] = $commonFields['company'];
				$xmlArray[$key]['employer'] = $commonFields['company'];
				$xmlArray[$key]['jobsource'] = $commonFields['company'];
				$xmlArray[$key]['sourceurl'] = $commonFields['url'];
				$xmlArray[$key]['jobsourceurl'] = $commonFields['url'];
				$xmlArray[$key]['title'] = $title;
				$xmlArray[$key]['type'] = $jobTypes[$job['jobTypeId']];
				$xmlArray[$key]['joburl'] = $commonFields['url'] . $job['city'] . '/' . $job['category'] . '?id=' .
										 $job['id'];
				$xmlArray[$key]['description'] = $description;
				$xmlArray[$key]['location']['nation'] = $commonFields['country'];
				$xmlArray[$key]['location']['city'] = $city;
				$xmlArray[$key]['location']['state'] = $state;
				// 				$xmlArray[$key]['postalcode'] = $job['zipcode'];
				// 				$xmlArray[$key]['cpc'] = $commonFields['price'];
				$xmlArray[$key]['feeddate'] = $commonFields['date'];
				$xmlArray[$key]['postingdate'] = $commonFields['date'];
			}
		}

		return $xmlArray;
	}

	private function getKeyWordIds()
	{
		$select = $this->db->select()->from('microRecruitingJobKeyWord', 'id');
		
		$result = $this->db->fetchAll($select);
		return $result;
	}

	/**
	 * insert jobs to microRecruitingJob table
	 */
	public function insertJobsKeyWord()
	{
		$keyWords = $this->getKeyWordIds();
		
		$cities = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12');
		$jobs = array(array('categoryId' => '2', 'titleId' => '2', 'descriptionId' => '2'));
		$jobTypes = array('1', '2', '3', '4', '5');
		
		foreach($cities as $city)
		{
			foreach($jobTypes as $jobType)
			{
				foreach($keyWords as $keyWord)
				{
					foreach($jobs as $job)
					{
						$job['cityId'] = $city;
						$job['keyWordId'] = $keyWord['id'];
						$job['platformId'] = '3';
						$job['jobTypeId'] = $jobType;
						$new_job = $job;
						
						$this->db->insert('microRecruitingJob', $new_job);
					}
				}
			}
		}
		echo "done";
		exit();
	}

	public function getAllSubIdById($dates)
	{
		$dates = $this->formatDate($dates);

		$select = $this->db->select()
			->from(array('mj' => 'microRecruitingJob'), array('id', 'subId' => 'id','date'))
			->joinLeft(array('mc' => 'microRecruitingCities'), 'mc.id=mj.cityId', 
								array('city' => 'cityLink', 'cityState' => 'name'))
			->joinLeft(array('mca' => 'microRecruitingCategory'), 'mca.id=mj.categoryId', 
								array('category' => 'categoryName'))
			->joinLeft(array('mjt' => 'microRecruitingJobType'), 'mjt.id=mj.jobTypeId', 
								array('jobTypeId' => 'id', 'jobType'))
			->joinLeft(array('mjti' => 'microRecruitingJobTitle'), 'mjti.id=mj.titleId', array('title'))
			->joinLeft(array('mjd' => 'microRecruitingJobDescription'), 'mjd.id=mj.titleId', array('description'))
			->joinLeft(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', 
								array('platformName' => 'name'))
			->joinLeft(array('mjpc' => 'microRecruitingJobPlatformCost'), 'mj.platformId=mjpc.platformId', 
								array('cost'))
			->where(new Zend_db_Expr('CAST(mj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'))
			->order('mj.id');
		
		$result = $this->db->fetchAll($select);
		$return = array();
		foreach ( $result as $r )
		{
			$return[ $r['subId'] ] = $r;
		}		
		return $return;
	}
	public function getReg1($dates)
	{
		$dates = $this->formatDate($dates);	
		$select = $this->db->select()
					->from(array('mrc' => 'microRecruitingVisits'), '')
					->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', '')
					->join(array('mrsts1' => 'microRecruitingSubIdTrackingStep1'), 'mrsts1.visitorId=mrc.id', array('subId','reg1' => new Zend_Db_Expr('COUNT(mrsts1.subId)')))
					->group('mrsts1.subId')
					->where(new Zend_db_Expr('CAST(mrj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'));


				
		$result = $this->db->fetchAll($select);

		$return = array();
		foreach ( $result as $r )
		{
			if ( $r['subId']==='juju-replac' )
			{
				continue;
			}
			$return[ $r['subId'] ] = $r;
		}
		return $return;
	}
	public function getReg2($dates)
	{
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
					->from(array('mrc' => 'microRecruitingVisits'), '')
					->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', '')
					->join(array('mrsts2' => 'microRecruitingSubIdTrackingStep2'), 'mrsts2.visitorId=mrc.id', array('subId','reg2' => new Zend_Db_Expr('COUNT(mrsts2.subId)')))
					->group('mrsts2.subId')
					->where(new Zend_db_Expr('CAST(mrj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'));
					
		$result = $this->db->fetchAll($select);

		$return = array();
		foreach ( $result as $r )
		{
			if ( $r['subId']==='juju-replac' )
			{
				continue;
			}
			$return[ $r['subId'] ] = $r;
		}
		return $return;
	}
	public function getVisits($dates)
	{
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
		->from(array('mrv' => 'microRecruitingVisits'), array('totalVisits' => new Zend_Db_Expr('COUNT(mrv.subId)')))
		->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrv.subId', '')
		->joinLeft(array('mjpc' => 'microRecruitingJobPlatformCost'), 'mrj.platformId=mjpc.platformId', '')
		->where('mrv.subId = mrj.id')
		->where(new Zend_db_Expr('CAST(mrj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'));
		$result = $this->db->fetchAll($select);

		if ( !empty($result) )
		{
			$result = current($result);
		}
		return $result;

	}
	public function getUniqueVisits($dates)
	{
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
		->from(array('mrv' => 'microRecruitingVisits'), array('uniqueVisits' => new Zend_Db_Expr('COUNT(DISTINCT(ip))')))
		->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrv.subId', '')
		->joinLeft(array('mjpc' => 'microRecruitingJobPlatformCost'), 'mrj.platformId=mjpc.platformId', '')
		->where('mrv.subId = mrj.id')
		->where(new Zend_db_Expr('CAST(mrj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'));
		$result = $this->db->fetchAll($select);

		if ( !empty($result) )
		{
			$result = current($result);
		}
		return $result;
	}
	public function getTotalCost($dates)
	{
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), array('id' , 'date'))
		->joinLeft(array('mrv' => 'microRecruitingVisits'), 'mrv.subId=mj.id' ,array('subId'=>'mrv.subId','countedVisits' => new Zend_Db_Expr('COUNT(mrv.subId)')))
		->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrv.subId', array('mrj.platformId'))
		->joinLeft(array('mjpc' => 'microRecruitingJobPlatformCost'), 'mrj.platformId=mjpc.platformId', array('cost'))
		->group('mrv.subId')
		->where('mrv.subId = mj.id')
		->where(new Zend_db_Expr('CAST(mj.date AS DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" AS DATE)'));
		


		$result = $this->db->fetchAll($select);
		/*foreach ($result as $key => $value) 
		{
			$result[$key]['totalCost'] = $value['countedVisits'] * $value['cost'];
		}*/
		$return = array();
		foreach ($result as $r) 
		{
			$return[ $r['subId'] ] = $r;
			$return[ $r['subId'] ]['totalCost'] = $r['countedVisits'] * $r['cost'];
			// $result[$key]['totalCost'] = $value['countedVisits'] * $value['cost'];
		}
		 $totalPlatformCost = 0;
		 $totalPlatformCostPerPlatform = array();
		 $totalPlatformVisitsPerPlatform = array();
		/*foreach ($result as $key => $value) 
		{
			$totalPlatformCost = $totalPlatformCost + $value['totalCost'];

			//take the total cost for each platform
			if (array_key_exists($value['platformId'], $totalPlatformCostPerPlatform)) 
			{
				$totalPlatformCostPerPlatform[$value['platformId']] +=  $value['totalCost'];
			}
			else
			{
				$totalPlatformCostPerPlatform[$value['platformId']] =  $value['totalCost'];
			}

			//take the total visits for each platform
			if (array_key_exists($value['platformId'], $totalPlatformVisitsPerPlatform)) 
			{
				$totalPlatformVisitsPerPlatform[$value['platformId']] +=  $value['countedVisits'];
			}
			else
			{
				$totalPlatformVisitsPerPlatform[$value['platformId']] =  $value['countedVisits'];
			}

		}*/
		

		return $return;

	}
	
    //To Do - Functie de CPA per platforma 


	// public function getReg2PerPlatform()
	// {
	// 	$select = $this->db->select()
	// 	->from(array('mrs' => 'microRecruitingSubIdTrackingStep2'), array('subIdCount' => new Zend_Db_Expr('COUNT(mrs.subId)')))
	// 	->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrs.subId', array('mrj.platformId'));

	// 	$reg2Number = $this->db->fetchAll($select);

	// echo "<pre>";

	// 	 $totalReg2PerPlatform = array();
		
	// 	foreach ($reg2Number as $key => $value) 
	// 	{
	// 		//take the total cost for each platform
	// 		if (array_key_exists($value['platformId'], $totalReg2PerPlatform)) 
	// 		{
	// 			// $totalReg2PerPlatform[$value['subId']] ++;
	// 		}
	// 		else
	// 		{
	// 			$totalReg2PerPlatform[$value['platformId']] =  $value['totalCost'];
	// 		}
	// 	echo "<pre>";

	//     	$totalCost = $value['cost'] * $counts['visits'];
	//     	if ($counts['reg2'] > 0)
	//     	{
	//     		$cpa = $value['cost'] * $counts['visits'] / $counts['reg2'];
	//     		$cpa = number_format((float)$cpa, 2, '.', '');
	//     	}
	//     	else
	//     	{
	//     		$cpa = $totalCost . " (0 reg 2)";
	//     	}
	//     }

	// }
	public function getUserListStep1($dates,$platformId = '2')
	{
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
		->from(array('mrsits' => 'microRecruitingSubIdTrackingStep1'), array('subId', 'userId'))
		->join(array('u'=>'userDataStep1'), 'mrsits.userId = u.id', array('email', 'registerType', 'dateCreated'))
		->join(array('mj'=>'microRecruitingJob'), 'mj.id=mrsits.subId', array('platformId'))
		->join(array('mjp'=>'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName'=>'name'))
		->join(array('mv'=>'microRecruitingVisits'), 'mj.id=mv.subId', array('userAgent', 'referer', 'ip'))
		->join(array('mrc' => 'microRecruitingCategory'), 'mrc.id=mj.categoryId' , array('category' => 'mrc.categoryName'))
		->join(array('mrcs' => 'microRecruitingCities'), 'mrcs.id=mj.cityId' , array('city' => 'mrcs.name'))
		->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
		->where('u.platform = ?', $platformId)
		->group('u.id');

		$result = $this->db->fetchAll($select);
		foreach ($result as $key => $subId)
		{
		     
		    if ($subId['city'] == "Connecticut")
		    {
		        $result[$key]['city'] = 'Stamford-CT';
		    }
		    elseif ($subId['city'] == "New Jersey")
		    {
		        $result[$key]['city'] = 'Newark-NJ';
		    }
		    else
		    {
		        $result[$key]['city'] = $subId['city'];
		    }
		     
		}
		return $result;
	}
	
	public function exportCsvDataStep1($report , $dates)
	{
		$filename = 'exportStep1Csv-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
		$f = fopen('php://memory', 'w');
	
		$csv = '"email","platformName","platformId","category","cityState","subId","referer","userAgent","registerType","ip","dateCreated"'."\n";
	
		foreach($report as $key=>$row)
		{
			if($row['registerType'] == 0)
			{
				$row['registerType'] = "Email";
			}
				
			if($row['registerType'] == 1)
			{
				$row['registerType'] = "Facebook login";
			}
				
			if($row['registerType'] == 2)
			{
				$row['registerType'] = "LinkedIn login";
			}
			
			$csv .= '"' . $row['email'].'","' . $row['platformName'].'","' . $row['platformId'].'","' . $row['category'].'","' . $row['city'].'","'  . $row['subId'].'","' . $row['referer'].'","' . $row['userAgent'].'","' . $row['registerType'].'","' . $row['ip'].'","' . $row['dateCreated'].'",' . "\n";
		}
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
		echo $csv;
		die();
	}
	
	public function getUserDetails($field = '', $value = '', $platformId = '2')
	{
		$select = $this->db->select()
		->from(array('u'=>'userData'),array('id', 'email', 'platform', 'registerType'))
		->where('u.platform = ?', $platformId);
		$result = $this->db->fetchAll($select);
		
	
	}
	
	
	public function getSurveyAnswers($userId , $dates)
	{
	    //$userId='137';
	    $surveyNumber='100';
	    $selectFields=$this->db->select()
	    ->from('surveyField','id')
	    ->where('surveyField.formId = ?', $surveyNumber);
	    $fieldsResult = $this->db->fetchAll($selectFields);
	    $surveyFields=array();
	 
	    foreach ($fieldsResult as $key => $value)
	    {
	        array_push($surveyFields, $value['id']);
	    }
		$dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from(array('u'=>'userData'), array('email', 'ip', 'dateCreated', 'registerType'))
	    ->join('surveyAnswers', 'surveyAnswers.userId=u.id', 'answer')
	    ->join('surveyField', 'surveyFieldId=surveyField.id', array('surveyAnswers.userId','id', 'question'))
	    ->joinLeft(array('mrsits'=>'microRecruitingSubIdTrackingStep2'),'u.id=mrsits.userId' , '')
	    ->joinLeft(array('mrv'=> 'microRecruitingVisits'), 'mrv.id = mrsits.visitorId', array('userAgent', 'referer'))
	    ->joinLeft(array('mrj'=>'microRecruitingJob'), 'mrsits.subId = mrj.id', '')
	    ->joinLeft(array('mrjt'=>'microRecruitingJobType'), 'mrjt.id = mrj.jobTypeId', 'jobType')
	    ->join(array('mat' => 'microRecruitingActionTracking'), 'mat.userId=mrsits.userId', array('category' , 'city'))
        ->where('surveyFieldId IN (?)', $surveyFields)
	    ->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	    $result = $this->db->fetchAll($select);
	   
	    foreach ($result as $key => $subId)
	    {
	         
	        if ($subId['city'] == "connecticut")
	        {
	            $result[$key]['city'] = 'Stamford-CT';
	        }
	        elseif ($subId['city'] == "new_jersey")
	        {
	            $result[$key]['city'] = 'Newark-NJ';
	        }
	        else
	        {
	            $result[$key]['city'] = $subId['city'];
	        }
	         
	    }	     
	    foreach ($result as $key => $upper)
	    {
	        if ($upper['city'] == $upper['city'])
	        {
	            $result[$key]['city'] = ucwords($upper['city'] , '-_');
	        }
	    
	    }
	    
	    $goodresult[0]['userId']='userId';//storing csv header
	    $goodresult[0]['email']='email';
	    $goodresult[0]['ip']='ip';
	    $goodresult[0]['dateCreated']='dateCreated';
	    $goodresult[0]['registerType']='registerType';
	    $goodresult[0]['category']='JobCategory';
	    $goodresult[0]['city']='City';
	    $goodresult[0]['userAgent']='Browser Type:';
	    $goodresult[0]['referer']='Referer:';
	    $goodresult[0]['jobType']='jobType';
	    $goodresult[0]['questions']='Questions and answers';
	    $goodresultrow=1;//current row in CSV
	   
	    if(empty($goodresult[$goodresultrow]))
	    {
	        $goodresult[$goodresultrow][0] = 0;
	        $goodresult[$goodresultrow][1] = 0;
	        $goodresult[$goodresultrow][2] = 0;
	        $goodresult[$goodresultrow][3] = 0;
	        $goodresult[$goodresultrow][4] = 0;
	        $goodresult[$goodresultrow][5] = 0;
	        $goodresult[$goodresultrow][6] = 0;
	        $goodresult[$goodresultrow][7] = 0;
	        $goodresult[$goodresultrow][8] = 0;
	        $goodresult[$goodresultrow][9] = 0;
	    }
	    else 
	    {
	    $goodresult[$goodresultrow][0] = $result[0]['userId'];//add the data about the first user
	    $goodresult[$goodresultrow][1] = $result[0]['email'];
	    $goodresult[$goodresultrow][2] = $result[0]['ip'];
	    $goodresult[$goodresultrow][3] = $result[0]['dateCreated'];
	    $goodresult[$goodresultrow][4] = $result[0]['registerType'];
	    $goodresult[$goodresultrow][5] = $result[0]['category'];
	    $goodresult[$goodresultrow][6] = $result[0]['city'];
	    $goodresult[$goodresultrow][7] = $result[0]['userAgent'];
	    $goodresult[$goodresultrow][8] = $result[0]['referer'];
	    $goodresult[$goodresultrow][9] = $result[0]['jobType'];
	    }
	    $next=0;//next row?
	    
	    foreach($result as $k => $v)
	    {
	        if($next==0)
	        {
	    		      if(isset($result[$k+1]['email']))
	    		      {
	    		          if($result[$k]['email']!=$result[$k+1]['email'])
	    		          {
	    		              $next = 1;
	    		          }
	    		      }
	    		      array_push($goodresult[$goodresultrow] , $v['question']);
	    		      array_push($goodresult[$goodresultrow] , $v['answer']);
	        }
	        else
	        {
	            $next = 0;
	            $goodresultrow++;
	            $goodresult[$goodresultrow][0] = $result[$k+1]['userId'];
	            $goodresult[$goodresultrow][1] = $result[$k+1]['email'];
	            $goodresult[$goodresultrow][2] = $result[$k+1]['ip'];
	            $goodresult[$goodresultrow][3] = $result[$k+1]['dateCreated'];
	            $goodresult[$goodresultrow][4] = $result[$k+1]['registerType'];
	            $goodresult[$goodresultrow][5] = $result[$k+1]['category'];
	            while($goodresult[$goodresultrow][5] == '')
	            {
	                foreach ($result as $w)
	                {
	                    if($w['userId']==$goodresult[$goodresultrow][0])
	                    {
	                        $goodresult[$goodresultrow][5] = $w['category'];
	                        break;
	                    }
	                }
	            }
	            $goodresult[$goodresultrow][6] = $result[$k+1]['city'];
	            $goodresult[$goodresultrow][7] = $result[$k+1]['userAgent'];
	            $goodresult[$goodresultrow][8] = $result[$k+1]['referer'];
	            $goodresult[$goodresultrow][9] = $result[$k+1]['jobType'];
	            
	            if($result[$k+1]['registerType'] == '0')
	            {
	            	$goodresult[$goodresultrow][4] = 'email';
	            }
	            if($result[$k+1]['registerType'] == '1')
	            {
	            	$goodresult[$goodresultrow][4] = 'facebook';
	                $select2 = $this->db->select()
	                ->from('facebook', array('firstName', 'lastName'))
	                ->where('email = ?', $result[$k+1]['email']);
	                $result2 = $this->db->fetchRow($select2);
	                array_push($goodresult[$goodresultrow] , 'First Name:');
	                array_push($goodresult[$goodresultrow] , $result2['firstName']);
	                array_push($goodresult[$goodresultrow] , 'Last Name:');
	                array_push($goodresult[$goodresultrow] , $result2['lastName']);
	            }
	            if($result[$k+1]['registerType'] == '2')
	            {
	            	$goodresult[$goodresultrow][4] = 'linkedin';
	                $select3 = $this->db->select()
	                ->from('linkedin', array('firstName', 'lastName', 'locationName'))
	                ->where('email = ?', $result[$k+1]['email']);
	                $result3 = $this->db->fetchRow($select3);
	                array_push($goodresult[$goodresultrow] , 'First Name:');
	                array_push($goodresult[$goodresultrow] , $result3['firstName']);
	                array_push($goodresult[$goodresultrow] , 'Last Name:');
	                array_push($goodresult[$goodresultrow] , $result3['lastName']);
	                array_push($goodresult[$goodresultrow] , 'Location:');
	                array_push($goodresult[$goodresultrow] , $result3['locationName']);
	            }
	            else
	            {
	                array_push($goodresult[$goodresultrow] , $v['question']);
	                array_push($goodresult[$goodresultrow] , $v['answer']);
	            }
	        }
	
	    }
	    
	    return $goodresult;
	}
	
	public function exportCsvDataStep2($report , $dates)
	{
	    $filename = 'exportStep2Csv-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	
	    // open raw memory as file so no temp files needed, you might run out of memory though
	    $f = fopen('php://memory', 'w');
	    // loop over the input array
	    foreach ($report as $line) {
	        // generate csv lines from the inner arrays
	        fputcsv($f, $line,",");
	    }
	    // reset the file pointer to the start of the file
	    fseek($f, 0);
	    // tell the browser it's going to be a csv file
	    header('Content-Type: application/csv');
	    // tell the browser we want to save it instead of displaying it
	    header('Content-Disposition: attachment; filename="'.$filename.'.csv";');
	    // make php send the generated csv lines to the browser
	    fpassthru($f);
	    die();
	}
	
	public function exportStatsTotalClicks()
	{
		$select = $this->db->select()
					->from(array('mj' => 'microRecruitingJob'), '')
					->join(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName' => 'name', 'platformId' => 'id'))
					->join(array('mv' => 'microRecruitingVisits'), 'mj.id = mv.subId', 'subId');

		$select2 = $this->db->select()
					->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId','platformName', 'clicks' => new Zend_Db_Expr('COUNT(subId)')))
					->group('subId');
		
		$result = $this->db->fetchAll($select2);
		

		return $result;

	}
	
	public function exportStatsReg1()
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName' => 'name', 'platformId' => 'id'))
		->join(array('mv' => 'microRecruitingVisits'), 'mj.id = mv.subId', 'ip')
		->join(array('mrsit' => 'microRecruitingSubIdTrackingStep1'), 'mrsit.subId = mj.id');
		
		$select2 = $this->db->select()
					->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId','platformName', 'count' => new Zend_Db_Expr('COUNT(subId)')))
					->group('subId');
		
		$result = $this->db->fetchAll($select2);
		return $result;
	}
	
	public function exportStatsReg2()
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName' => 'name', 'platformId' => 'id'))
		->join(array('mv' => 'microRecruitingVisits'), 'mj.id = mv.subId', 'ip')
		->join(array('mrsit' => 'microRecruitingSubIdTrackingStep2'), 'mrsit.subId = mj.id');
		
		$select2 = $this->db->select()
					->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId','platformName', 'count' => new Zend_Db_Expr('COUNT(subId)')))
					->group('subId');
		
		$result = $this->db->fetchAll($select2);
		return $result;
	}
	
	public function getReport($dates)
	{
		$dates = $this->formatDate($dates);
		$select  = $this->db->select()
			->from('microRecruitingVisits')
			->where(new Zend_db_Expr('CAST(microRecruitingVisits.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		$result = $this->db->fetchAll($select);

		$checkTotal = 0;
		$total = array();
		foreach($result as $key=>$subId)
		{
			if(isset($total[$subId['subId']]))
			{
				$total[$subId['subId']]['totalClicks']++;
			}
			else
			{
				$total[$subId['subId']]['totalClicks'] = 1;
			}
		}
	
		foreach($total as $subId=>$array)
		{
			$select  = $this->db->select()
				->from('microRecruitingSubIdTrackingStep1')
				->where('subId = ?',$subId);
			$result = $this->db->fetchAll($select);
			
			$total[$subId]['step1'] = count($result);
			
			$select  = $this->db->select()
					->from('microRecruitingSubIdTrackingStep2')
					->where('subId = ?',$subId);
			$result = $this->db->fetchAll($select);
	
			$total[$subId]['step2'] = count($result);
	
			$select  = $this->db->select()
					->from('microRecruitingJob','')
					->join('microRecruitingJobPlatform', 'microRecruitingJob.platformId = microRecruitingJobPlatform.id','name')
					->where('microRecruitingJob.id = ?',$subId);
			$result = $this->db->fetchRow($select);
	
			$total[$subId]['platformName'] = $result['name'];
		}
	
		ksort($total);
		$visits = array();
		return $total;
	}
	
	public function exportCsvStats($report , $dates)
	{
		$filename = 'exportCsvStatsBySubId-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
		$f = fopen('php://memory', 'w');
		
		$csv = '"subId","platformName","totalClicks","reg1","reg2"'."\n";
		
		foreach($report as $subId=>$values)
		{
			$csv .= '"' . $subId.'","' . $values['platformName'].'","' . $values['totalClicks'].'","' . $values['step1'].'","' . $values['step2'].'",' . "\n";
		}
		
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
		
		echo $csv;
		die();
	}
	
	public function exportCsvSubId($jobs, $dates)
	{	
		$filename = 'exportSubIdStats-'.date("d-m-Y-h:i:sA");
		$data = '"id","url","city","cityState","category","jobTypeId","jobType","title","description","platformName","cost" , "totalCost" , "countedVisits" ,"reg1" , "reg2" , " " , "Totals:" , "totalUniqueVisits" , "totalVisits"'."\n";
		$remove=array(",","\n",'\r','\r\n');

		$jobSubId = $this->getAllSubIdById($dates);
		$totalCost = $this->getTotalCost($dates);
		$totalUniqueVisits = $this->getUniqueVisits($dates);
		$totalVisits = $this->getVisits($dates);
		$reg1 = $this->getReg1($dates);
		$reg2 = $this->getReg2($dates);
		$jobs = array_replace_recursive($jobSubId, $totalCost ,$reg1 , $reg2/* , $totalUniqueVisits , $totalVisits*/);
		$visitsSet = false;
		foreach($jobs as $key=>$row)
		{
			$url = $this->config->website->params->url . '/' . $row['city'] .'/' . $row['category'] . '?id=' . $row['id'];

			$row['id'] = str_replace($remove, '', $row['id']);
			$row['city'] = str_replace($remove, '', $row['city']);
			$row['cityState'] = str_replace($remove, '', $row['cityState']);
			$row['category'] = str_replace($remove, ' ', $row['category']);
			$row['jobTypeId'] = str_replace($remove, ' ', $row['jobTypeId']);
			$row['jobType'] = str_replace($remove, ' ', $row['jobType']);
			$row['title'] = str_replace($remove, ' ', $row['title']);
			$row['description'] = str_replace($remove, ' ', $row['description']);
			$row['platformName'] = str_replace($remove, ' ', $row['platformName']);
			$row['cost'] = str_replace($remove, ' ', $row['cost']);

			if ( !$visitsSet )
			{
				$row['totalVisits'] = isset($totalVisits['totalVisits']) ? $totalVisits['totalVisits'] : 0;
				$row['uniqueVisits'] = isset($totalUniqueVisits['uniqueVisits']) ? $totalUniqueVisits['uniqueVisits'] : 0;
				$visitsSet = true;
			}

			if(!isset($row['totalCost']))
			{
				$row['totalCost'] = str_replace($remove, ' ', '0');
			}
			else
			{
				$row['totalCost'] = str_replace($remove, ' ', $row['totalCost']);
			}
			if(!isset($row['countedVisits']))
			{
				$row['countedVisits'] = str_replace($remove, ' ', '0');
			}
			else
			{
				$row['countedVisits'] = str_replace($remove, ' ', $row['countedVisits']);
			}
			if(!isset($row['reg1']))
			{
				$row['reg1'] = str_replace($remove, ' ', '0');
			}
			else
			{
				$row['reg1'] = str_replace($remove, ' ', $row['reg1']);
			}
			if(!isset($row['reg2']))
			{
				$row['reg2'] = str_replace($remove, ' ', '0');
			}
			else
			{
				$row['reg2'] = str_replace($remove, ' ', $row['reg2']);
			}
			if(!isset($row['uniqueVisits']))
			{
				$row['uniqueVisits'] = str_replace($remove, ' ', '');
			}
			else
			{
				$row['uniqueVisits'] = str_replace($remove, ' ', $row['uniqueVisits']);
			}
			if(!isset($row['totalVisits']))
			{
				$row['totalVisits'] = str_replace($remove, ' ', '');
			}
			else
			{
				$row['totalVisits'] = str_replace($remove, ' ', $row['totalVisits']);
			}
			$data .= '"' . $row['id'].'","' . $url.'","' 
						. $row['city'].'","' 
						. $row['cityState'].'","' 
						. $row['category'].'","' 
						. $row['jobTypeId'].'","'
						. $row['jobType'].'","' 
						. $row['title'].'","' 
						. $row['description'].'","' 
						. $row['platformName'].'","'
						. $row['cost'].'",'  
						. $row['totalCost'].',' 
						. $row['countedVisits'].',' 
						. $row['reg1'].',' 
						. $row['reg2'].','
						. " ".','
						. " ".','
						. $row['uniqueVisits'].',' 
						. $row['totalVisits'].',' 
						. "\n";
		
		}
		// echo "<pre>";
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
		echo $data;
		die();
	}
	
	/**
	 * Format dates to use them in select
	 * @param array $dates
	 * @return array
	 */
	
	public function formatDate($dates)
	{
	if (isset($dates['dateFrom']) && isset($dates['dateUntil']))
	    {
    	    $dateFrom=date_create($dates['dateFrom']);
    	    $dateUntil=date_create($dates['dateUntil']);
	    }
	    elseif (isset($dates['dateFromBot']) && isset($dates['dateUntilBot']))
	    {
	        $dateFrom=date_create($dates['dateFromBot']);
	        $dateUntil=date_create($dates['dateUntilBot']);
	    }
		$dates['dateFrom']=date_format($dateFrom, 'Y-m-d');
		$dates['dateUntil']=date_format($dateUntil, 'Y-m-d');
		
		return $dates;
	}
	
	private function returnLastCostPerSubId($subIds)
	{
		$selectMaxDate = $this->db->select()
		->from(array('mjc' => 'microRecruitingJobCostDate'), array('date' => new Zend_Db_Expr("MAX(CAST(date as DATE))")));
		
		$maxDate = $this->db->fetchOne($selectMaxDate);
		
		$select = $this->db->select()
		->from(array('mrjcd' => 'microRecruitingJobCostDate'), array('subId', 'cpc' => 'cost', 'date'))
		->where('subId IN (?)', $subIds)
		->where('date =?', $maxDate)
		->group('subId');
		
		$resultCosts = $this->db->fetchAll($select);
		
		$costs = array();
		
		foreach ($resultCosts as $subId)
		{
			$costs[$subId['subId']] = $subId;
			unset($costs[$subId['subId']]['subId']);
		}
		
		return $costs;
	}
	
	/**
	 * Get cost for each subId for each day we had leads (visits) per platform
	 * @param array $idsPerDay
	 * @param array $costPerIds
	 * @return array
	 */
	
	private function returnSubIdCostPerPlatformPerDay($idsPerDay, $costPerIds)
	{
		$subIdCostPerPlatformPerDay = array();;
		
		foreach ($idsPerDay as $key => $data)
		{
			if (!isset($costPerIds[$data['subId']][$data['date']]))
			{
				$subIdCostPerPlatformPerDay[$data['platform']][$data['subId']][$data['date']] = 0;
			}
			else 
			{
				$subIdCostPerPlatformPerDay[$data['platform']][$data['subId']][$data['date']] = $data['count'] * $costPerIds[$data['subId']][$data['date']];
			}
		}
		
		return $subIdCostPerPlatformPerDay;
	}
	
	/**
	 * Get average CPC per subId per platform for all days we had leads(visits)
	 * @param array $idsPerDay
	 * @param array $costPerIds
	 * @return array
	 */
	
	private function calculateAverageCpc($subIdsDatesForAverageCPC, $costPerIds)
	{
		$averageCPC = array();
		
		foreach ($subIdsDatesForAverageCPC as $platform => $data)
		{
			foreach ($data as $subId => $dates)
			{
				$subIdTotalCPC = 0;
				foreach ($dates as $date)
				{
					$costPerSubIdPerDate = isset($costPerIds[$subId][$date]) ? $costPerIds[$subId][$date] : '0';
					$subIdTotalCPC += $costPerSubIdPerDate;
				}
				$averageCPC[$platform][$subId] = round($subIdTotalCPC / count($dates), 3);
			}
		}

		return $averageCPC;
	}
	
	private function setSubIdAsKey($data)
	{
		$newArray = array();
		
		foreach ($data as $subId)
		{
			$newArray[$subId['subId']] = $subId['count'];
		}
		
		return $newArray;
	}
	
	/**
	 * Get subSubIds for all unique Ids in the desired date range
	 * @param array $dates
	 * @return array
	 */
	
	private function getSubSubIds($dates,$subIds)
	{
		$select = $this->db->select()
						->from(array('ssut' => 'subSubIdUrlTracking'), array('uniqueId'))
						->join(array('ss' => 'subSubId'), 'ssut.subSubId=ss.id', array('subSubIdName', 'subSubIdValue'))
						->where(new Zend_db_Expr('CAST(ssut.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
						->where('uniqueId IN (?)', $subIds)
						->where('platformId =?', '2')
						->group('uniqueId')
						->group('subSubId');
		$result = $this->db->fetchAll($select);
		
		$data = array();
		
		foreach ($result as $subSubId)
		{
			if (!array_key_exists($subSubId['uniqueId'], $data))
			{
				$data[$subSubId['uniqueId']] = array();
			}
			
			if (!array_key_exists($subSubId['subSubIdName'], $data[$subSubId['uniqueId']]))
			{
				$data[$subSubId['uniqueId']][$subSubId['subSubIdName']] = array();
			}
			
			array_push($data[$subSubId['uniqueId']][$subSubId['subSubIdName']], $subSubId['subSubIdValue']);
		}
		
		return $data;
	}
	
	/**
	 * Create a list with all SubSubIds
	 * @param array $uniqueIdsWithSubSubIds
	 * @return array
	 */
	
	private function createSubSubIdsList($uniqueIdsWithSubSubIds)
	{
		$subSubIdsList = array();
		
		foreach ($uniqueIdsWithSubSubIds as $uniqueId => $subSubIds)
		{
			foreach ($subSubIds as $subSubId => $subSubIdValue)
			{
				if (!in_array($subSubId, $subSubIdsList))
				{
					array_push($subSubIdsList, $subSubId);
				}
			}
		}
		
		return $subSubIdsList;
	}
	 private function _subIdsData($dates)
 {

	$select = $this->db->select()
						->from(array('mrc' => 'microRecruitingVisits'), array('subId', 'date', 'visitorId'=>"id"))
						->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('removed' => new Zend_Db_Expr("IF(mrj.status = '1', '', 'Yes')")))
						->joinLeft(array('mrjp' => 'microRecruitingJobPlatform'), 'mrj.platformId=mrjp.id', array('platform' => 'name'))
						->joinLeft(array('mrjt' => 'microRecruitingJobType'), 'mrjt.id=mrj.jobTypeId', array('jobType'))
						->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
						->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
						->joinLeft(array('mrjtitle' => 'microRecruitingJobTitle'), 'mrj.titleId=mrjtitle.id', array('title'))
						->joinLeft(array('mrjk' => 'microRecruitingJobKeyWord'), 'mrj.keyWordId=mrjk.id', array('keyWord'))
						->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
						->where('mrc.userAgent != ?', "AdsBot-Google (+http://www.google.com/adsbot.html)")
						->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
						->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
						->group('CAST(mrc.date as DATE)')
						->group('ip')
						->group('subId');

			$select2 = $this->db->select()
			->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId', 'date', 'removed', 'platform', 'clicks' => new Zend_Db_Expr('COUNT(subId)'), 'jobType', 'category', 'city', 'title', 'keyWord'))
			->group('visits.platform')
			->group('subId');

			$result = $this->db->fetchAll($select2);
			return $result;
}

	 private function _getSubIdsData($dates,$subId)
 {

	$select = $this->db->select()
						->from(array('mrc' => 'microRecruitingVisits'), array('subId', 'date', 'visitorId'=>'id'))
						->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('removed' => new Zend_Db_Expr("IF(mrj.status = '1', '', 'Yes')")))
						->joinLeft(array('mrjp' => 'microRecruitingJobPlatform'), 'mrj.platformId=mrjp.id', array('platform' => 'name'))
						->joinLeft(array('mrjt' => 'microRecruitingJobType'), 'mrjt.id=mrj.jobTypeId', array('jobType'))
						->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
						->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
						->joinLeft(array('mrjtitle' => 'microRecruitingJobTitle'), 'mrj.titleId=mrjtitle.id', array('title'))
						->joinLeft(array('mrjk' => 'microRecruitingJobKeyWord'), 'mrj.keyWordId=mrjk.id', array('keyWord'))
						->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
						->where('mrc.userAgent != ?', "AdsBot-Google (+http://www.google.com/adsbot.html)")
						->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
						->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
						->where('subId IN (?)', $subId)
						->group('CAST(mrc.date as DATE)')
						->group('ip')
						->group('subId');

			$select2 = $this->db->select()
			->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId', 'date', 'removed', 'platform', 'clicks' => new Zend_Db_Expr('COUNT(subId)'), 'jobType', 'category', 'city', 'title', 'keyWord'))
			->group('visits.platform')
			->group('subId');

			$result = $this->db->fetchAll($select2);
			return $result;
}


	private function _step1SubIds($subIds,$dates)
	{
		$selectStep1 = $this->db->select()
							->from(array('mrsts1' => 'microRecruitingSubIdTrackingStep1'), array('subId', 'count' => new Zend_Db_Expr('COUNT(mrsts1.subId)')))
							->join(array('u' => 'userDataStep1'), 'u.id=mrsts1.userId', '')
							->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
							->where('subId IN (?)', $subIds)
							->group('subId');
		
		$step1 = $this->db->fetchAll($selectStep1);
		$step1 = $this->setSubIdAsKey($step1);
		return $step1;
	}

	private function _step2SubIds($subIds,$dates)
	{

		$selectStep2 = $this->db->select($subIds,$dates)
							->from(array('mrsts2' => 'microRecruitingSubIdTrackingStep2'), array('subId', 'count' => new Zend_Db_Expr('COUNT(mrsts2.subId)')))
							->join(array('u' => 'userData'), 'u.id=mrsts2.userId', '')
							->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
							->where('subId IN (?)', $subIds)
							->group('subId');
		
		$step2 = $this->db->fetchAll($selectStep2);
		$step2 = $this->setSubIdAsKey($step2);
		return $step2;
	}

	private function _getSubSubIdsPerDate($dates)
	{
		$select = $this->db->select()
						->from(array('ssut' => 'subSubIdUrlTracking'))
						->join(array('ss' => 'subSubId'), 'ssut.subSubId=ss.id', array('subSubIdName', 'subSubIdValue'))
						->where(new Zend_db_Expr('CAST(ssut.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
						->where('platformId =?', '2')
						->group('uniqueId')
						->group('subSubId');
		$result = $this->db->fetchAll($select);
		
		$data = array();

		foreach ($result as $key => $value) 
		{
			if (!array_key_exists($value['subSubIdName'], $data))
			{
				$data[$value['subSubIdName']] = array();
			}
			$data[$value['subSubIdName']] =  $value['subSubIdName'];
		}
        
		return $data;
	}


	/**
	 * Export sub id data per date range
	 * @param array $dates
	 */
	
	public function exportSubIdsDataPerDate($dates)
	{
		$dates = $this->formatDate($dates);

		$result = $this->_subIdsData($dates);

		$subIds = array();
		$SubSubIdsPerDate = $this->_getSubSubIdsPerDate($dates);
		
		
		foreach ($result as $subId)
		{
			array_push($subIds, $subId['subId']);
		}
		
		$uniqueIdsArrayLength = count($subIds);
		$nrToStart = 0;
		$numberOfUniqeIdsToTake = 100;

		$filename = 'SubId stats - ' . date("d-m-Y-h:i:sA");
			
		$fileheader = array("SubId", "Platform", "Job Type", "Job Title", "Categoy MicroRecruiting", "Category XML", "City MicroRecruiting", "City XML", "Unique Clicks", "Step 1", "Step 2", 
							"Removed", "CPC", "AVERAGE CPC", "COST", "CPA reg 2", "Total Leads", "reg 1 to reg 2%", "");

			
		foreach ($SubSubIdsPerDate as $subSubId)
		{
			array_push($fileheader, $subSubId);
		}

		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');

		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);

		$totalOfTotals = array();
		while ($nrToStart < $uniqueIdsArrayLength)
		{	
			// take only a few IDs and add them to each function to take date for them
			// increment the new nrToStart and do it again untill you empty your IDs array
			$uniqueIdsSlice = array();
			$uniqueIdsSlice = array_slice($subIds, $nrToStart, $numberOfUniqeIdsToTake);
			$nrToStart += $numberOfUniqeIdsToTake;

			$result = $this->_getSubIdsData($dates,$uniqueIdsSlice);

			$idsPerDay = $this->getVisitsCountPerIdsPerDayWithoutDistinct($dates,$uniqueIdsSlice);

			$costPerIds = $this->setCostPerDayPerId($idsPerDay, $dates);
			
			$subIdCostPerPlatformPerDay = $this->returnSubIdCostPerPlatformPerDay($idsPerDay, $costPerIds);
		
			$uniqueIdsWithSubSubIds = $this->getSubSubIds($dates,$uniqueIdsSlice);

			$subSubIdsList = $this->createSubSubIdsList($uniqueIdsWithSubSubIds);
			
			$subIdsDatesForAverageCPC = array();
			$totalCostPerSubId = array();
			
			foreach ($subIdCostPerPlatformPerDay as $platform => $data)
			{
				foreach ($data as $subId => $costs)
				{
					$totalCostPerSubId[$platform][$subId] = array_sum($costs);
					$subIdsDatesForAverageCPC[$platform][$subId] = array_keys($costs);
				}
			}
			$averageCPC = $this->calculateAverageCpc($subIdsDatesForAverageCPC, $costPerIds);
			
			$step1 = $this->_step1SubIds($uniqueIdsSlice,$dates);
		
			$step2 = $this->_step2SubIds($uniqueIdsSlice,$dates);
			
			$costs = $this->returnLastCostPerSubId($uniqueIdsSlice);
			
			$data = '' . "\n";
			
			$totals = array();
			
			$keys = array('clicks', 'reg1', 'reg2', 'cost', 'cpa', 'totalLeads', 'conversionRate');
				
			foreach ($keys as $key)
			{
				$totals[$key] = 0;
			}
			
			$result = $this->appendMoreDataToExport($result);
			
			$totals = array();

			$keys = array('clicks', 'reg1', 'reg2', 'cpa', 'totalLeads', 'conversionRate','cost');
			
			foreach($result as $key => $value)
			{
				foreach ($keys as $key)
				{
					$totals[$value['platform']][$key] = 0;
				}
			}
			
			foreach ($totalCostPerSubId as $platform => $subIdCost)
			{
				$totals[$platform]['cost'] = array_sum($subIdCost);
			}
			
			foreach($result as $key=>$subId)
			{
				$totals[$subId['platform']]['clicks'] += $subId['clicks'];
				if (isset($step1[$subId['subId']]))
				{
					$totals[$subId['platform']]['reg1'] += $step1[$subId['subId']];
				}
				if (isset($step2[$subId['subId']]))
				{
					$totals[$subId['platform']]['reg2'] += $step2[$subId['subId']];
				}
			}
	
			foreach($totals as $platform => $cost)
			{
				$conversionRate = 0;
				$totalLeads = $totals[$platform]['reg1'] + $totals[$platform]['reg2'];
				($totalLeads != 0) ? $conversionRate = round($totals[$platform]['reg2'] * 100 / $totalLeads, 2) : 0;		

				if(!array_key_exists($platform, $totalOfTotals)) 
				{
					$totalOfTotals[$platform] = array();
				}
				foreach ($cost as $key => $value) 
				{
					if (!array_key_exists($key, $totalOfTotals[$platform])) 
					{
						$totalOfTotals[$platform][$key] = 0;
					}
					$totalOfTotals[$platform][$key] += $value;
				}
			}

			foreach ($result as $subId)
			{
				$reg1 = isset($step1[$subId['subId']]) ? $step1[$subId['subId']] : 0;
				$reg2 = isset($step2[$subId['subId']]) ? $step2[$subId['subId']] : 0;
				($reg2 != 0) ? $cpa = round($totalCostPerSubId[$subId['platform']][$subId['subId']] / $reg2, 2) : $cpa = 0;
				$totalLeads = $reg1 + $reg2;
				($totalLeads != 0) ? $conversionRate = round($reg2 * 100 / $totalLeads, 2) : $conversionRate = 0;
				$subId['platform'] = isset($subId['platform']) ? $subId['platform'] : '';

				$costPerSubId = isset($costs[$subId['subId']]['cpc']) ? $costs[$subId['subId']]['cpc'] : 0;
				$averageCostPerClick = isset($averageCPC[$subId['platform']][$subId['subId']]) ? $averageCPC[$subId['platform']][$subId['subId']] : 0;
				
				$data = array($subId['subId'], $subId['platform'], $subId['jobType'], $subId['title'], $subId['category'], $subId['categoryXML'], $subId['city'], $subId['cityXML'], $subId['clicks'], 
								$reg1, $reg2, $subId['removed'], "$ " . $costPerSubId, "$ " . $averageCostPerClick, "$ " . $totalCostPerSubId[$subId['platform']][$subId['subId']], "$ " . $cpa, $totalLeads,
								$conversionRate . "%", "");
				if (array_key_exists($subId['subId'], $uniqueIdsWithSubSubIds))
				{
					foreach ($subSubIdsList as $subSubId)
					{
						if (array_key_exists($subSubId, $uniqueIdsWithSubSubIds[$subId['subId']]))
						{
							$value = '';
							foreach ($uniqueIdsWithSubSubIds[$subId['subId']][$subSubId] as $subIdValue)
							{
								if ($value == '')
								{
									$value = $subIdValue;
								}
								else
								{
									$value .= '; ' . $subIdValue;
								}
							}
							array_push($data, $value);
						}
						else 
						{
							array_push($data, '');
						}
					}
				}			
				array_push($data,  "\n");
				fputcsv($fileOutput, $data);
			}
		}

		if(!empty($totalOfTotals))
		{

			foreach ($totalOfTotals as $platform => $values) 
			{
				$conversionRate = 0;
				$totalLeads = $totalOfTotals[$platform]['reg1'] + $totalOfTotals[$platform]['reg2'];
				($totalLeads != 0) ? $conversionRate = round($totalOfTotals[$platform]['reg2'] * 100 / $totalLeads, 2) : 0;

				$totalCostPerPlatformData = array('', 'TOTAL', $platform, '', '', '', '', '', $totalOfTotals[$platform]['clicks'], $totalOfTotals[$platform]['reg1'], 
					$totalOfTotals[$platform]['reg2'], '', '', '', "$ " . $totalOfTotals[$platform]['cost'],
							" ", $totalLeads, $conversionRate . "%", "\n");

				fputcsv($fileOutput, $totalCostPerPlatformData);
			}	
		}
		
		fclose($fileOutput);
		die();
	}

	/**
	 * Eliminate empty values from $_POST and return the dates array
	 * @param array $post
	 * @return array
	 */
	
	public function setDates($post)
	{
		$dates = array();
		if($post['dateFrom'] != "")
		{
			$dates['dateFrom'] = $post['dateFrom'];
		}
		if($post['dateUntil'] != "")
		{
			$dates['dateUntil'] = $post['dateUntil'];
		}
		
		return $dates;
	}

	public function getAllClicks($dates)
	{
		$dates = $this->formatDate($dates);

		$select  = $this->db->select()
				->from(array('mrv'=>'microRecruitingVisits'), array('subId','date'))
				->joinLeft(array('mrj'=>'microRecruitingJob'), 'mrj.id=mrv.subId','')
				->joinLeft(array('mrc'=>'microRecruitingCategory'), 'mrc.id=mrj.categoryId','categoryName')
				->where(new Zend_db_Expr('CAST(mrv.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
				;
		$result = $this->db->fetchAll($select);

		foreach ($result as $key => $value) 
		{

			if (isset($count[$value['subId']][$value['categoryName']]))
				{
					$count[$value['subId']][$value['categoryName']] ++;

				}	
				else
				{
					$count[$value['subId']][$value['categoryName']] = 1;
				}
		}

		$index = array();
		if(!empty($count))
		{
			foreach ($count as $key => $value) 
			{
				foreach ($value as $k => $v) 
				{
					$index[$k]=(isset($index[$k])) ? $index[$k]+$v : $v;
				}
			}
		}
		return $index;
	}

	private function setPlatformNameAsKey($data)
	{
		$newData = array();

		foreach ($data as $key => $value) {
			$newData[$value['categoryName']] = $value['count'];
		}

		return $newData;
	}

	public function exportAllClicks($clicks,$step1Data,$step2Data,$dates)
	{


		if(array_key_exists("",$clicks))
		{
			$clicks['juju-replac']=$clicks[''];
			unset($clicks['']);
		}

		$step1New = $this->setPlatformNameAsKey($step1Data);
		$step2New = $this->setPlatformNameAsKey($step2Data);

		foreach ($keys as $key) 
		{
			if (!array_key_exists($key, $step1New)) 
			{
				$step1New[$key] = '0';
			}
		}

		foreach ($keys as $key) 
		{
			if (!array_key_exists($key, $step2New)) 
			{
				$step2New[$key] = '0';
			}
		}
		

		$keys = array('delivery','driving','dogwalking','childcare','juju-replac');
		
		foreach ($keys as $key) 
		{
			if (!array_key_exists($key, $clicks)) 
			{
				$clicks[$key] = '0';
			}
		}


		$data ='"Type","Delivery","Driving","Dogwalking","Childcare","juju-replace"'; 
		$data .= "\n";
		$data .='"'."Clicks".'",'.'"'.$clicks['delivery'].'",'.'"'.$clicks['driving'].'",'.'"'.$clicks['dogwalking'].'",'.'"'.$clicks['childcare'].'",'.'"' . $clicks['juju-replac'] . '",';
		$data .= "\n";


		foreach ($keys as $key) 
		{
			if (!array_key_exists($key, $step1New)) 
			{
				$step1New[$key] = '0';
			}
		}

		foreach ($keys as $key) 
		{
			if (!array_key_exists($key, $step2New)) 
			{
				$step2New[$key] = '0';
			}
		}

		$data .='"'."Reg1".'",'.'"'.$step1New['delivery'].'",'.'"'.$step1New['driving'].'",'.'"'.$step1New['dogwalking'].'",'.'"'.$step1New['childcare'].'",'.'"'.$step1New['juju-replac'].'",';
		$data .= "\n";
		$data .='"'."Reg2".'",'.'"'.$step2New['delivery'].'",'.'"'.$step2New['driving'].'",'.'"'.$step2New['dogwalking'].'",'.'"'.$step2New['childcare'].'",'.'"'.$step2New['juju-replac'].'",';

		$filename = $this->setFileExportName($dates);

		header("Content-Encoding: UTF-8"); 
		header("Content-type: text/csv; charset=UTF-8");
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");

		echo $data;
		die();
	}

	private function setFileExportName($byDate = '', $dates = array())
	{
		if($byDate == "byDate")
		{
			$countDates = count($dates);
			if ($countDates < 2)
			{
				$filename = 'exportAllClicksByCategory-'.date("d-m-Y-h:i:sA") . '-range' . current($dates);
			}
			elseif ($countDates == 2)
			{
				$filename = 'exportAllClicksByCategory-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
			}
		}
		else
		{
			$filename = 'exportAllClicksByCategory-'.date("d-m-Y-h:i:sA");
		}
		
		return $filename;
	}



	public function getClicksByReg1($dates)
	{
		$dates = $this->formatDate($dates);

		$select  = $this->db->select()
				->from(array('mrsts1'=>'microRecruitingSubIdTrackingStep1'), array('count' => new Zend_Db_Expr('COUNT(subId)')))
				->joinLeft(array('mrj'=>'microRecruitingJob'), 'mrj.id=mrsts1.subId','')
				->joinLeft(array('mrc'=>'microRecruitingCategory'), 'mrc.id=mrj.categoryId', array('categoryName' => new Zend_Db_Expr("IF (categoryName IS NULL, 'juju-replac', categoryName)")))
				->joinLeft(array('uds1'=>'userDataStep1'), 'uds1.id=mrsts1.userId')
				->where(new Zend_db_Expr('CAST(uds1.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
				->group('mrj.categoryId');

		$result = $this->db->fetchAll($select);

		return $result;
		
	}


	public function getClicksByReg2($dates)
	{
		$dates = $this->formatDate($dates);

		$select  = $this->db->select()
				->from(array('mrsts2'=>'microRecruitingSubIdTrackingStep2'), array('count' => new Zend_Db_Expr('COUNT(subId)')))
				->joinLeft(array('mrj'=>'microRecruitingJob'), 'mrj.id=mrsts2.subId','')
				->joinLeft(array('mrc'=>'microRecruitingCategory'), 'mrc.id=mrj.categoryId',array('categoryName' => new Zend_Db_Expr("IF (categoryName IS NULL, 'juju-replac', categoryName)")))
				->joinLeft(array('ud'=>'userData'), 'ud.id=mrsts2.userId')
				->where(new Zend_db_Expr('CAST(ud.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
				->group('mrj.categoryId');
		$result = $this->db->fetchAll($select);

		return $result;
	}

	
	public function getClicksByCity($dates)
	{
		$select  = $this->db->select()
				->from(array('mrv'=>'microRecruitingVisits'), array('subId','date'))
				->joinLeft(array('mrj'=>'microRecruitingJob'), 'mrj.id=mrv.subId','')
				->joinLeft(array('mrciti'=>'microRecruitingCities'), 'mrciti.id=mrj.cityId','name')
				;
		$result = $this->db->fetchAll($select);
		
		
		foreach ($result as $key => $value) 
		{
			if (isset($count[$value['subId']][$value['name']]))
				{
					$count[$value['subId']][$value['name']] ++;

				}	
				else
				{
					$count[$value['subId']][$value['name']] = 1;
				}
		}

		$index = array();

		foreach ($count as $key => $value) 
		{
			foreach ($value as $k => $v) 
			{
				$index[$k]=(isset($index[$k])) ? $index[$k]+$v : $v;
			}
		}

		return $index;
	}

	public function exportClicksByCity($clicks,$dates)
	{
		$data ='"New York City-NY","San Francisco-CA","Chicago-IL","Seattle-WA","Dallas-TX","Washington-DC","Denver-CO","Austin-TX","Connecticut","New Jersey","Atlanta-GA","Boston-MA","juju-replac Visitor"'; 
		$data .= "\n";
		$data .='"'.$clicks['New York City-NY'].'",'.'"'.$clicks['San Francisco-CA'].'",'.'"'.$clicks['Chicago-IL'].'",'.'"'.$clicks['Seattle-WA'].'",'.'"'.$clicks['Dallas-TX'].'",'.'"'.$clicks['Washington-DC'].'",'.'"'.$clicks['Denver-CO'].'",'.'"'.$clicks['Austin-TX'].'",'.'"'.$clicks['Connecticut'].'",'.'"'.$clicks['New Jersey'].'",'.'"'.$clicks['Atlanta-GA'].'",'.'"'.$clicks['Boston-MA'].'",'.'"'.$clicks[''].'",';

		$filename = $this->setFileExportNameCity($dates);

		header("Content-Encoding: UTF-8"); 
		header("Content-type: text/csv; charset=UTF-8");
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");

		echo $data;
		die();
	}

	private function setFileExportNameCity($byDate = '', $dates = array())
	{
		if($byDate == "byDate")
		{
			$countDates = count($dates);
			if ($countDates < 2)
			{
				$filename = 'exportAllClicksByCity-'.date("d-m-Y-h:i:sA") . '-range' . current($dates);
			}
			elseif ($countDates == 2)
			{
				$filename = 'exportAllClicksByCity-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
			}
		}
		else
		{
			$filename = 'exportAllClicksByCity-'.date("d-m-Y-h:i:sA");
		}
		
		return $filename;
	}
	
	private function totalRegistration($result)
	{
		foreach($result as $key=>$value)
		{
			if($value['email'] == NULL)
			{
				unset($result[$key]);
			}
			else
			{
				$domain = explode('@', $value['email']);
				$total[$value['platformName']][] = strtolower($domain[1]);
			}
		}
		$newArray = array();
		
		if(!empty($total))
		{
			foreach($total as $key => $value)
			{
				$newArray[$key] = array_count_values($value);
			}
		}
			
		return $newArray;
	}
	
	public function getEmailReportStep1($dates, $platform = '2', $registerType = '0')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName' => 'name'))
		->join(array('mrsits1'=>'microRecruitingSubIdTrackingStep1'), 'mj.id=mrsits1.subId', 'userId')
		->join(array('uds1'=>'userDataStep1'), 'uds1.id=mrsits1.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('platform=?', $platform)
		->where(new Zend_db_Expr('CAST(uds1.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));

		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailReportForJujuStep1($dates, $platform = '2', $registerType = '0')
	{
		$select = $this->db->select()
		->from(array('mrsits1' => 'microRecruitingSubIdTrackingStep1'), new Zend_Db_Expr ('"juju-replac" AS platformName'))
		->join(array('uds1'=>'userDataStep1'), 'uds1.id=mrsits1.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('platform=?', $platform)
		->where('mrsits1.subId = ?', 'juju-replac')
		->where(new Zend_db_Expr('CAST(uds1.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailReportStep2($dates, $platform = '2', $registerType = '0')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mjp' => 'microRecruitingJobPlatform'), 'mj.platformId=mjp.id', array('platformName' => 'name'))
		->join(array('mrsits2'=>'microRecruitingSubIdTrackingStep2'), 'mj.id=mrsits2.subId', 'userId')
		->join(array('uds2'=>'userData'), 'uds2.id=mrsits2.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('platform=?', $platform)
		->where(new Zend_db_Expr('CAST(uds2.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailReportForJujuStep2($dates, $platform = '2', $registerType = '0')
	{
		$select = $this->db->select()
		->from(array('mrsits2' => 'microRecruitingSubIdTrackingStep2'), new Zend_Db_Expr ('"juju-replac" AS platformName'))
		->join(array('uds2'=>'userData'), 'uds2.id=mrsits2.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('platform=?', $platform)
		->where('mrsits2.subId = ?', 'juju-replac')
		->where(new Zend_db_Expr('CAST(uds2.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function totalRegistrationByEmail($dates)
	{
		$reg1 = $this->getEmailReportStep1($dates);
		$reg2 = $this->getEmailReportStep2($dates);
		
		$reg1juju = $this->getEmailReportForJujuStep1($dates);
		$reg2juju = $this->getEmailReportForJujuStep2($dates);
		
		$resultsReg1 = $this->totalRegistration($reg1);
		$resultsReg2 = $this->totalRegistration($reg2);
		
		$resultsReg1juju = $this->totalRegistration($reg1juju);
		$resultsReg2juju = $this->totalRegistration($reg2juju);
	
		$resultsReg1 = array_merge($resultsReg1, $resultsReg1juju);
		$resultsReg2 = array_merge($resultsReg2, $resultsReg2juju);
		
		$sums = array();
	
		foreach ($resultsReg1 as $platformName => $platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if(array_key_exists($platformName, $resultsReg2))
				{
					if (array_key_exists($domain, $resultsReg2[$platformName]))
					{
						$sums[$platformName][$domain] = $resultsReg1[$platformName][$domain] + $resultsReg2[$platformName][$domain];
					}
					else
					{
						$sums[$platformName][$domain] = $resultsReg1[$platformName][$domain];
					}
				}
				else
				{
					$sums[$platformName] = $resultsReg1[$platformName];
				}
			}
		}
				
		foreach ($resultsReg2 as $platformName => $platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if(isset($sums[$platformName]))
				{
					if (!array_key_exists($domain, $sums[$platformName]))
					{
						$sums[$platformName][$domain] = $resultsReg2[$platformName][$domain];
					}
				}
				else 
				{
					echo '';
				}
			}
		}
		
		return $sums;
	}
	
	public function exportCsvEmail($report, $dates)
	{
		$f = fopen('php://memory', 'w');
		
		$csv = '"Platform","Email Tld","Registration Count", "Total Platform Reg","Percentage"'."\n";
		
		$countTotals = array();
		
		foreach($report as $platformName =>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if (!array_key_exists($platformName, $countTotals))
				{
					$countTotals[$platformName] = 0;
				}
				$countTotals[$platformName] += $count;
			}
		} 
		
		foreach($report as $platformName=>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				$countPercentage = round($count * 100 / $countTotals[$platformName], 2);
				$csv .= '"' . $platformName.'","' . $domain.'","' . $count.'","' . $countTotals[$platformName] . '","' . $countPercentage . '%'.'",' . "\n" . "\r";
			}
		}
		
		$filename = 'exportCsvEmailTld-'.date("d-m-Y-h:i:sA") . '--' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
		
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
		
		echo $csv;
		die();
	}
	
	public function getTotalClicksForCitiesPerCategoryAndPlatform($dates, $platformId)
	{
		$select = $this->db->select()
					->from(array('mrc' => 'microRecruitingVisits'), array('date', 'totalClicks'=>new Zend_Db_Expr('COUNT(mrc.subId)')))
					->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('cityId', 'categoryId'))
					->join(array('mrjp' => 'microRecruitingJobPlatform'), 'mrj.platformId=mrjp.id', array('platformName'=>'name'))
					->joinLeft(array('mrsts1' => 'microRecruitingSubIdTrackingStep1'), 'mrsts1.visitorId=mrc.id', array('reg1' => new Zend_Db_Expr('COUNT(mrsts1.userId)')))
					->joinLeft(array('mrsts2' => 'microRecruitingSubIdTrackingStep2'), 'mrsts2.visitorId=mrc.id', array('reg2' => new Zend_Db_Expr('COUNT(mrsts2.userId)')))
					->joinLeft(array('mrsts3' => 'microRecruitingSubIdTrackingStep3'), 'mrsts3.visitorId=mrc.id', array('reg3' => new Zend_Db_Expr('COUNT(mrsts3.userId)')))
					->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
					->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
					->group('mrcat.categoryName')
					->group('mrcity.name')
					->where('mrj.platformId=?', $platformId)
					->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getTotalClicksForCitiesPerCategory($dates)
	{
		$select = $this->db->select()
		->from(array('mrc' => 'microRecruitingVisits'), array('date', 'totalClicks'=>new Zend_Db_Expr('COUNT(mrc.subId)')))
		->joinLeft(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('cityId', 'categoryId'))
		->joinLeft(array('mrsts1' => 'microRecruitingSubIdTrackingStep1'), 'mrsts1.visitorId=mrc.id', array('reg1' => new Zend_Db_Expr('COUNT(mrsts1.userId)')))
		->joinLeft(array('mrsts2' => 'microRecruitingSubIdTrackingStep2'), 'mrsts2.visitorId=mrc.id', array('reg2' => new Zend_Db_Expr('COUNT(mrsts2.userId)')))
		->joinLeft(array('mrsts3' => 'microRecruitingSubIdTrackingStep3'), 'mrsts3.visitorId=mrc.id', array('reg3' => new Zend_Db_Expr('COUNT(mrsts3.userId)')))
		->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
		->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
		->group('mrcat.categoryName')
		->group('mrcity.name')
		->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	
	
	public function exportDataForCityPerCategory($report, $dates, $platform)
	{
		$f = fopen('php://memory', 'w');
		$csv = '"Category","City","Total Clicks","Reg 1","Reg 2","Reg 3"'."\n";
		
		foreach($report as $key=>$row)
		{
			if($row['city'] == NULL)
			{
				$row['city'] = 'juju-replace';
			}
			
			if ($row['category'] == 'delivery')
			{
			    $row['reg3'] = 'No Step3';
			}
			if ($row['category'] == 'driving')
			{
			    $row['reg3'] = 'No Step3';
			}
			if ($row['category'] == 'dogwalking')
			{
			    $row['reg3'] = 'No Step3';
			}
			if ($row['category'] == 'childcare')
			{
			    $row['reg3'] = 'No Step3';
			}
			if(isset($_POST['platform']))
			{
				$csv .= '"' .$row['category'].'","' . $row['city'].'","' . $row['totalClicks'].'","' . $row['reg1'].'","' . $row['reg2']. '","' . $row['reg3'] . '",' . "\n";
			}
			
		}
		$filename = $platform . '-' . 'exportDataByCategoryAndCity-'.date("d-m-Y-h:i:sA") . '--' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
		echo $csv;
		die();
	}
	
	public function exportZeroClicksSubIds($dates)
	{
		
		$select = $this->db->select()
					->distinct('mv.subId')
					->from(array('mv' => 'microRecruitingVisits'), array('subId'))
					->order('mv.subId');

		
		$result = $this->db->fetchAll($select);
		
		$subIds = array();
		
		foreach ($result as $subId)
		{
			array_push($subIds, $subId['subId']);
		}
		$dates = $this->formatDate($dates);
		$select = $this->db->select()
					->from(array('mj' => 'microRecruitingJob'), array('subId' => 'id'))
					->join(array('mp' => 'microRecruitingJobPlatform'), 'mp.id=mj.platformId', array('platform' => 'name'))
					->joinLeft(array('mjtype' => 'microRecruitingJobType'), 'mjtype.id=mj.jobTypeId', array('jobType'))
					->join(array('mjtitle' => 'microRecruitingJobTitle'), 'mjtitle.id=mj.titleId', array('title'))
					->joinLeft(array('mjk' => 'microRecruitingJobKeyWord'), 'mj.keyWordId=mjk.id', array('keyWord'))
					->join(array('mc' => 'microRecruitingCities'), 'mj.cityId=mc.id', array('city' => 'name'))
					->join(array('mcat' => 'microRecruitingCategory'), 'mcat.id=mj.categoryId', array('category' => 'categoryName'))
					->where('mj.id NOT IN (?)', $subIds)
					->where(new Zend_db_Expr('CAST(mj.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		
		$result = $this->db->fetchAll($select);
		
		$subIdsData = $this->appendMoreDataToExport($result);
		
		$filename = 'SubId with 0 clicks - ' . date("d-m-Y-h:i:sA") . '--' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
		$fileheader = array('subId', 'Platform', 'JobType', 'JobTitle', 'City', 'City XML', 'Category', 'Category XML');
		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		$data = '' . "\n";
		
		foreach ($subIdsData as $subId)
		{
			$data = $subId['subId'] . $this->separator . $subId['platform'] . $this->separator . $subId['jobType'] . $this->separator . $subId['title'] . $this->separator . 
					$subId['city'] . $this->separator . $subId['cityXML'] . $this->separator . $subId['category'] . $this->separator . $subId['categoryXML'] . $this->separator . "\n";
				
			$values = explode($this->separator, $data);
			fputcsv($fileOutput, $values);
		}
		
		fclose($fileOutput);
		die;
	}
	
	private function appendMoreDataToExport($result)
	{
		foreach ($result as $key => $subId)
		{
			if ($subId['keyWord'] != NULL)
			{
				$result[$key]['title'] = $subId['keyWord'] . " - Earn Up to $25/Hour";
			}
		
			if ($subId['platform'] == 'Juju' || $subId['platform'] == 'ADWORDS' || $subid['platform'] == NULL)
			{
				$result[$key]['categoryXML'] = '';
			}
			else
			{
				$categoriesXML = $this->returnCategories($subId['platform']);
				$result[$key]['categoryXML'] = $categoriesXML[$subId['category']];
			}
		
			if ($subId['city'] == "Connecticut")
			{
				$result[$key]['cityXML'] = 'Stamford-CT';
			}
			elseif ($subId['city'] == "New Jersey")
			{
				$result[$key]['cityXML'] = 'Newark-NJ';
			}
			else
			{
				$result[$key]['cityXML'] = $subId['city'];
			}
		}
		
		return $result;
	}
	
	public function getPlatformName()
	{
		$select = $this->db->select()
		->from('microRecruitingJobPlatform', array('platformName' => 'name'));
		
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Export registration type per categories
	 * @param array $dates
	 */
	
	public function getRegTypePerCategory($dates)
	{
		$dates = $this->formatDate($dates);
		
		$select = $this->db->select()
						->from(array('u' => 'userData'), array('registerType'))
						->join(array('mat' => 'microRecruitingActionTracking'), 'mat.userId=u.id', array('date' => new Zend_Db_Expr("MIN(mat.date)"), 'category', 'userId'))
						->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
						->group('mat.userId');

		$select2 = $this->db->select()
						->from(array('users' => new Zend_Db_Expr("($select)")), array('category', 'registerType' => new Zend_Db_Expr("(IF(registerType = '0', 'email', IF(registerType = '1', 'facebook', IF(registerType = '2', 'linkedin', 'unknown'))))"), 'count' => new Zend_Db_Expr("COUNT(userId)")))
						->group('registerType')
						->group('category');
		
		$result = $this->db->fetchAll($select2);
		
		$arrayData = array();
		
		foreach ($result as $category)
		{
			if (!array_key_exists($category['category'], $arrayData))
			{
				$arrayData[$category['category']] = array();
			}
			
			$arrayData[$category['category']][$category['registerType']] = $category['count'];
		}

		if (array_key_exists('public', $arrayData))
		{
			unset($arrayData['public']);
		}

		$totalsPerCategory = array();
		
		foreach ($arrayData as $categoryName => $category)
		{
			$totalsPerCategory[$categoryName] = array_sum($category);
		}
		
		$regTypes = array('email', 'facebook', 'linkedin');
		
		foreach ($arrayData as $categoryName => $category)
		{
			foreach ($regTypes as $regType)
			{
				if (!array_key_exists($regType, $category))
				{
					$arrayData[$categoryName][$regType] = 0;
				}
			}
		}
		
		$filename = 'Users Reg Type per Category - '. 'date range - ' . $dates['dateFrom'] . ' - ' . $dates['dateUntil'] . ' - export - ' . date("d-m-Y-h:i:sA");
		$fileheader = array('category', 'email', 'facebook', 'linkedin');
		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		$data = '' . "\n";
		
		foreach ($arrayData as $categoryName => $category)
		{
			$emailPercentage = round($category['email'] * 100 / $totalsPerCategory[$categoryName], 2);
			$facebookPercentage = round($category['facebook'] * 100 / $totalsPerCategory[$categoryName], 2);
			$linkedinPercentage = round($category['linkedin'] * 100 / $totalsPerCategory[$categoryName], 2);
			
			$data = $categoryName . $this->separator . $emailPercentage . "%" . $this->separator . $facebookPercentage . "%" . $this->separator . $linkedinPercentage . "%" . $this->separator . "\n";
			
			$values = explode($this->separator, $data);
			fputcsv($fileOutput, $values);
		}
		
		fclose($fileOutput);
		die;
		
	}
	
	/**
	 * Get subIds Per Day (visits per day) without filtering by IP
	 * @return array
	 */
	private function getVisitsCountPerIdsPerDayWithoutDistinct($dates,$subIds)
	{
		$dates = $this->formatDate($dates);
	
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->joinLeft(array('mp' => 'microRecruitingJobPlatform'), 'mj.platformId=mp.id', array('platform' => 'name'))
		->join(array('mv' => 'microRecruitingVisits'), 'mj.id=mv.subId', array('subId', 'date' => new Zend_Db_Expr("CAST(mv.date as DATE)")))
		->where('mv.userAgent != ?', "AdsBot-Google (+http://www.google.com/adsbot.html)")
		->where('mv.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
		->where('mv.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
		->where(new Zend_db_Expr('CAST(mv.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
		->where('subId IN (?)', $subIds)
		->group('CAST(mv.date as DATE)')
		->group('ip')
		->group('subId');

		$select2 = $this->db->select()
		->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId','date', 'platform', 'count' => new Zend_Db_Expr('COUNT(subId)')))
		->group('CAST(visits.date as DATE)')
		->group('visits.platform')
		->group('subId');

		$result = $this->db->fetchAll($select2);
		return $result;
	}
	
	/**
	 * Get subIds Per Day (visits per day)
	 * @return array
	 */
	private function getVisitsCountPerIdsPerDay($dates)
	{
		$dates = $this->formatDate($dates);
		
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mp' => 'microRecruitingJobPlatform'), 'mj.platformId=mp.id', array('platform' => 'name'))
		->join(array('mv' => 'microRecruitingVisits'), 'mj.id=mv.subId', array('subId', 'date' => new Zend_Db_Expr("CAST(mv.date as DATE)")))
		->where('mv.userAgent != ?', "AdsBot-Google (+http://www.google.com/adsbot.html)")
		->where('mv.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
		->where('mv.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
		->where(new Zend_db_Expr('CAST(mv.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
		->group('CAST(mv.date as DATE)')
		->group('ip')
		->group('subId');
		
		$select2 = $this->db->select()
					->from(array('visits' => new Zend_Db_Expr("($select)")), array('subId','date', 'platform', 'count' => new Zend_Db_Expr('COUNT(subId)')))
					->group('CAST(visits.date as DATE)')
					->group('visits.platform')
					->group('subId');
		
		$result = $this->db->fetchAll($select2);
		return $result;
	}
	
	/**
	 * Get cost for all days for subIds in array ($subIds)
	 * @param array $subIds
	 * @return array
	 */
	
	private function getCostForRequestedIds($subIds, $dates)
	{
		$select = $this->db->select()
					->from(array('mcd' => 'microRecruitingJobCostDate'), array('subId', 'cpc' => 'cost', 'date'))
					->where('subId IN (?)', $subIds)
					->where(new Zend_db_Expr('CAST(mcd.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
		
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	/**
	 * Set subID as key and as value we have an array with ["date"] => ["cost"]
	 * @param array $idsCostPerDate
	 * @return array
	 */
	
	private function setCostPerIds($idsCostPerDate)
	{
		$costPerId = array();
		
		foreach ($idsCostPerDate as $subIdCostPerDate)
		{
			if (!array_key_exists($subIdCostPerDate['subId'], $costPerId))
			{
				$costPerId[$subIdCostPerDate['subId']] = array();
			}
			
			$costPerId[$subIdCostPerDate['subId']][$subIdCostPerDate['date']] = $subIdCostPerDate['cpc'];
		}
		
		return $costPerId;
	}
	
	/**
	 * Set Cost Per Day Per Id
	 * @param array $idsPerDay
	 * @return array
	 */
	
	private function setCostPerDayPerId($idsPerDay, $dates)
	{
		$idsForCost = array();
		
		foreach ($idsPerDay as $subId)
		{
			if (!in_array($subId['subId'], $idsForCost))
			{
				array_push($idsForCost, $subId['subId']);
			}
		}
		
		$costPerIds = $this->getCostForRequestedIds($idsForCost, $dates);
		$costPerIds = $this->setCostPerIds($costPerIds);
		
		return $costPerIds;
	}
	
	/**
	 * Get data for Cost per platform per day export
	 * @return array
	 */
	
	private function getDataForExportCostPerPlatformPerDay($dates)
	{
		$idsPerDay = $this->getVisitsCountPerIdsPerDay($dates);
		$costPerIds=$this->setCostPerDayPerId($idsPerDay);
		
		$subIdsPerPlatform = array();
		
		foreach ($idsPerDay as $subId)
		{
			if (!array_key_exists($subId['platform'], $subIdsPerPlatform))
			{
				$subIdsPerPlatform[$subId['platform']] = array();
			}
			
			array_push($subIdsPerPlatform[$subId['platform']], $subId);
		}
		
		$totalCostPerPlatformPerDate = array();
		
		foreach ($subIdsPerPlatform as $platformName => $platform)
		{
			foreach ($platform as $key => $subIdPerDate)
			{
				@$subIdsPerPlatform[$platformName][$key]['cost'] = $subIdPerDate['count'] * $costPerIds[$subIdPerDate['subId']][$subIdPerDate['date']];
			
				if (!array_key_exists($platformName, $totalCostPerPlatformPerDate))
				{
					$totalCostPerPlatformPerDate[$platformName] = array();
				}
				
				if (!array_key_exists($subIdPerDate['date'], $totalCostPerPlatformPerDate[$platformName]))
				{
					$totalCostPerPlatformPerDate[$platformName][$subIdPerDate['date']]['cost'] = 0;
					$totalCostPerPlatformPerDate[$platformName][$subIdPerDate['date']]['clicks'] = 0;
				}
				
				$totalCostPerPlatformPerDate[$platformName][$subIdPerDate['date']]['cost'] += $subIdsPerPlatform[$platformName][$key]['cost'];
				$totalCostPerPlatformPerDate[$platformName][$subIdPerDate['date']]['clicks'] += $subIdsPerPlatform[$platformName][$key]['count'];
			}
		}
		
		return $totalCostPerPlatformPerDate;
	}
	
	/**
	 * Export csv file with cost per paltform per day
	 */
	
	public function exportCostPerPlatformPerDay($dates)
	{
		$platformCostPerDate = $this->getDataForExportCostPerPlatformPerDay($dates);

		$totalCostPerPlatform = array();

		$total = array();
		foreach ($platformCostPerDate as $platformName => $platformData)
		{
			foreach ($platformData as $date)
			{
				if (!array_key_exists($platformName, $totalCostPerPlatform))
				{
					$totalCostPerPlatform[$platformName]['cost'] = 0;
					$totalCostPerPlatform[$platformName]['clicks'] = 0;
				}
				$totalCostPerPlatform[$platformName]['cost'] += $date['cost'];
				$totalCostPerPlatform[$platformName]['clicks'] += $date['clicks'];
			}
		}
		
		$filename = 'Export cost per paltform per day - ' . date("d-m-Y-h:i:sA");
		$fileheader = array('platform', 'date', 'clicks', 'cost');
		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		$data = '' . "\n";
		
		foreach ($platformCostPerDate as $platformName => $platformData)
		{
			foreach ($platformData as $date => $dateData)
			{
				$data = $platformName . $this->separator . $date . $this->separator . $dateData['clicks'] . $this->separator . $dateData['cost'] . $this->separator . "\n";
				
				$values = explode($this->separator, $data);
				fputcsv($fileOutput, $values);
			}
			
			$data = $platformName . $this->separator . 'TOTAL' . $this->separator . $totalCostPerPlatform[$platformName]['clicks'] . $this->separator . $totalCostPerPlatform[$platformName]['cost'] . $this->separator . "\n";
			$values = explode($this->separator, $data);
			fputcsv($fileOutput, $values);
			
			$emptyLine = '' . $this->separator;
			$values = explode($this->separator, $emptyLine);
			fputcsv($fileOutput, $values);
		}
		
		fclose($fileOutput);
		die;
	}
	function multiexplode($delimiters, $string)
	{
	    $ready = str_replace($delimiters, $delimiters[0], $string);
	    $launch = explode($delimiters[0], $ready);
	    return $launch;
	}
	
	public function getUserAgentExport($dates)
	{
	    $dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from(array('mv'=>'microRecruitingVisits'), array( 'total'=> 'userAgent' , 'date'))
	    ->joinLeft(array('mj' => 'microRecruitingJob'), 'mj.id = mv.subId' , array('id','platform'=>'mj.platformId'))
	    ->join(array('mjp' => 'microRecruitingJobPlatform') , 'mjp.id = mj.platformId' , array('platformName' => 'name'))
	    ->where(new Zend_db_Expr('CAST(mv.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
	    // user agents
	    $result = $this->db->fetchAll($select);

	    $userAgentPerCategory = array();
	    
	    foreach ($result as $userAgent)
	    {
	        if (!array_key_exists($userAgent['platformName'], $userAgentPerCategory))
	        {
	            $userAgentPerCategory[$userAgent['platformName']] = array();
	        }
	        array_push($userAgentPerCategory[$userAgent['platformName']], $userAgent);
	    }

// 	    foreach ($userAgentPerCategory as $platformName => $cat)
// 	    {
// 	        echo $platformName . ' - ' . "\n";
// 	    }
	    
	    $totals = array();
	    
	    $iphone = 'iphone;';
	    $ipad = 'ipad;';
	    $android = 'android';
	    $windows = 'windows';
	    $linux = 'x11;';
	    $macintosh = 'macintosh;';
	    
	    $others = '';
	    
	    foreach ($userAgentPerCategory as $platformName => $data)
	    {
	        foreach ($data as $userAgent)
	        {
	            $userAgent['total'] = strtolower($userAgent['total']);
    	        $arrayData = $this->multiexplode(array(" ","(",")","/"), $userAgent['total']);
    	        $arrayData2 =  $this->multiexplode(array(" ","(",")","/"),$userAgent['platformName']);
    	        
    	        if (!array_key_exists($userAgent['platformName'], $totals))
    	        {
    	            $totals[$userAgent['platformName']] = array();
    	        }
    	        
    	        if (in_array($iphone, $arrayData) || in_array($ipad, $arrayData) ) 
    	        {
    	            if (! array_key_exists('ios', $totals[$userAgent['platformName']]))
    	            {
    	                $totals[$userAgent['platformName']]['ios'] = 0;
    	            }
    	            $totals[$userAgent['platformName']]['ios'] += 1;
    	        }
    	        
    	        elseif (in_array($android, $arrayData))
    	        {
    	            if (! array_key_exists('android', $totals[$userAgent['platformName']]))
    	            {
    	                $totals[$userAgent['platformName']]['android'] = 0;
    	            }
    	            $totals[$userAgent['platformName']]['android'] += 1;
    	        }
    	        
    	        elseif (in_array($windows, $arrayData) || in_array($linux, $arrayData) || in_array($macintosh, $arrayData))
    	        {
    	            if (! array_key_exists('desktop', $totals[$userAgent['platformName']]))
    	            {
    	                $totals[$userAgent['platformName']]['desktop'] = 0;
    	            }
    	            $totals[$userAgent['platformName']]['desktop'] += 1;
    	        
    	        }
	        }
	    }
	    $counts = array();

	    $finalData = array();
	    $arrayData = array();
	    $iPhone = array();
	    $android = array();
	    $windows = array();
	    $linux = array();
	    $macintosh = array();
	    $others = array();
	    // platforms
	    $vhm = array();
	    $jtc = array();
	    $juju = array();
	    
	    foreach ($result as $key => $value) {
	        $value['total'] = strtolower($value['total']);
	        $arrayData = $this->multiexplode(array(" ","(",")","/"), $value['total']);
	        $arrayData2 =  $this->multiexplode(array(" ","(",")","/"),$value['platformName']);
	       
	
	        $iphone = 'iphone;';
	        $ipad = 'ipad;';
	
	        $android = 'android';
	
	        $windows = 'windows';
	        $linux = 'x11;';
	        $macintosh = 'macintosh;';

	        
	        $others = '';
	        
	        $vhm = 'VHM';
	        $jtc = 'Jobs2Career';
	        $juju = 'Juju';

	        // IOS
	        if (in_array($iphone, $arrayData) || in_array($ipad, $arrayData) ) {
	
	            if (! array_key_exists('ios', $finalData))
	            {
	                $finalData['ios'] = array();
	            }
	            array_push($finalData['ios'], $value['total']);
	
	        }
	        // ANDROID
	        if (in_array($android, $arrayData))
	        {
	
	            if (! array_key_exists('android', $finalData))
	            {
	                $finalData['android'] = array();
	            }
	            array_push($finalData['android'], $value['total']);
	
	        }
	        // DESKTOP
	        if (in_array($windows, $arrayData) || in_array($linux, $arrayData) || in_array($macintosh, $arrayData))
	        {
	            if (! array_key_exists('desktop', $finalData))
	            {
	                $finalData['desktop'] = array();
	            }
	            array_push($finalData['desktop'], $value['total']);
	
	        }
	    }
	    
	    // IOS
	    if(empty($finalData['ios']))
	    {
	        $ios = 0;
	    }
	    else 
	    {
	        $ios = count($finalData['ios']);
	    }

	    // ANDROID
	    if(empty($finalData['android']))
	    {
	        $android = 0;
	    }
	    else
	    {
	        $android = count($finalData['android']);
	    }

	    // DESKTOP
	    if(empty($finalData['desktop']))
	    {
	        $desktop = 0;
	    }
	    else
	    {
	        $desktop = count($finalData['desktop']);
	    }

	    
	    $total = count($result);
	    
	    $others = round($total - $desktop - $ios - $android);
	 
	 if (empty($totals))
	 {
	     
	     $totalPlatformVHM = 0;
	     $totalPlatformJobs = 0;
	     $totalPlatformJuju = 0;
	 }
	 else 
	 {
	     $totalPlatformVHM = round($totals['VHM']['desktop'] + $totals['VHM']['ios'] + $totals['VHM']['android']);
	     $totalPlatformJobs = round($totals['Jobs2Career']['desktop'] + $totals['Jobs2Career']['ios'] + $totals['Jobs2Career']['android']);
	     $totalPlatformJuju = round($totals['Juju']['desktop'] + $totals['Juju']['ios'] + $totals['Juju']['android']);
	 }
	 
	 if (empty($userAgentPerCategory))
	 {
	 
	     $countAllVhm = 0;
	     $countAllJobs = 0;
	     $countAllJuju = 0;
	 }
	 else
	 {
	       $countAllVhm = count($userAgentPerCategory['VHM']);
    	   $countAllJobs = count($userAgentPerCategory['Jobs2Career']);
    	   $countAllJuju = count($userAgentPerCategory['Juju']);
	 }
	 
	 if (empty($totals))
	 {
	 
	     $othersVHM = 0;
	     $othersJobs = 0;
	     $othersJuju = 0;
	 }
	 else
	 {
	       $othersVHM = round($countAllVhm - $totals['VHM']['desktop'] - $totals['VHM']['ios'] - $totals['VHM']['android']);
           $othersJobs = round($countAllJobs - $totals['Jobs2Career']['desktop'] - $totals['Jobs2Career']['ios'] - $totals['Jobs2Career']['android']);
           $othersJuju = round($countAllJuju - $totals['Juju']['desktop'] - $totals['Juju']['ios'] - $totals['Juju']['android']);
	 }

	 if (empty($totals))
	 {
	 
	     $allVhm = 0;
	     $allJobs = 0;
	     $allJuju = 0;
	 }
	 else
	 {
	     $allVhm = array('desktopvhm' => $totals['VHM']['desktop'] , 'iosvhm' => $totals['VHM']['ios'] , 'androidvhm' => $totals['VHM']['android'] , 'totalVhm'=> $countAllVhm , 'othersvhm' => $othersVHM );
    	$allJobs = array('desktopjtc' => $totals['Jobs2Career']['desktop'] , 'iosjtc' => $totals['Jobs2Career']['ios'] , 'androidjtc' => $totals['Jobs2Career']['android'] , 'totalJobs'=> $countAllJobs , 'othersjobs' => $othersJobs );
    	$allJuju = array('desktopjuju' => $totals['Juju']['desktop'] , 'iosjuju' => $totals['Juju']['ios'] , 'androidjuju' => $totals['Juju']['android'] , 'othersjuju' => $othersJuju , 'totalJuju'=> $countAllJuju );
	  
	 }
	   if($allJuju['totalJuju']!=null)
	   {
    	   $iosjujuPercentage = round($allJuju['iosjuju'] * 100 / $allJuju['totalJuju'],2);
    	   $androidjujuPercentage = round($allJuju['androidjuju'] * 100 / $allJuju['totalJuju'],2);
    	   $desktopjujuPercentage = round($allJuju['desktopjuju'] * 100 / $allJuju['totalJuju'],2);
    	   $othersjujuPercentage = round($allJuju['othersjuju'] * 100 / $allJuju['totalJuju'],2);
	   }
	   
	   else 
	   {
	       $iosjujuPercentage = 0;
	       $androidjujuPercentage = 0;
	       $desktopjujuPercentage = 0;
	       $othersjujuPercentage = 0;
	   }
	   
	   if ($allJobs['totalJobs']!=null)
	   {
    	   $iosjtcPercentage = round($allJobs['iosjtc'] * 100 / $allJobs['totalJobs'],2);
    	   $androidjtcPercentage = round($allJobs['androidjtc'] * 100 / $allJobs['totalJobs'],2);
    	   $desktopjtcPercentage = round($allJobs['desktopjtc'] * 100 / $allJobs['totalJobs'],2);
    	   $othersjtcPercentage = round($allJobs['othersjobs'] * 100 / $allJobs['totalJobs'],2);
	   }
	   else
	   {
	       $iosjtcPercentage = 0;
	       $androidjtcPercentage = 0;
	       $desktopjtcPercentage = 0;
	       $othersjtcPercentage = 0;
	   }
	   if ($allVhm['totalVhm']!=null)
	   {
	       $iosvhmPercentage = round($allVhm['iosvhm'] * 100 / $allVhm['totalVhm'],2);
	       $androidvhmPercentage = round($allVhm['androidvhm'] * 100 / $allVhm['totalVhm'],2);
	       $desktopvhmPercentage = round($allVhm['desktopvhm'] * 100 / $allVhm['totalVhm'],2);
	       $othersvhmPercentage = round($allVhm['othersvhm'] * 100 / $allVhm['totalVhm'],2);
	   }
	   else
	   {
	       $iosvhmPercentage = 0;
	       $androidvhmPercentage = 0;
	       $desktopvhmPercentage = 0;
	       $othersvhmPercentage = 0;
	   }

	    $all = array('ios' => $ios , 'android' => $android , 'desktop' => $desktop , 'total' => $total , 'others' => $others );
	    
	    // IOS
	    if(empty($all['ios']))
	    {
	        $iosPercentage = 0;
	    }
	    else
	    {
	        $iosPercentage = round($all['ios'] * 100 / $all['total'],2);
	    }

	    // ANDROID
	    if(empty($all['android']))
	    {
	        $androidPercentage = 0;
	    }
	    else
	    {
	        $androidPercentage = round($all['android'] * 100 / $all['total'],2);
	    }

	    // DESKTOP
	    if(empty($all['desktop']))
	    {
	        $desktopPercentage = 0;
	    }
	    else
	    {
	        $desktopPercentage = round($all['desktop'] * 100 / $all['total'],2);
	    }

	    // OTHERS
	    if(empty($all['others']))
	    {
	        $othersPercentage = 0;
	    }
	    else
	    {
	        $othersPercentage = round($all['others'] * 100 / $all['total'],2);
	    }
	    $intoCsv = array('desktopCsv' => $desktopPercentage , 'iosCsv' => $iosPercentage , 'androidCsv' => $androidPercentage , 'othersCsv' => $othersPercentage
	        , 'iosVhmCsv' => $iosvhmPercentage , 'iosJtcCsv' => $iosjtcPercentage , 'iosJujuCsv' => $iosjujuPercentage 
	        , 'androidVhmCsv' => $androidvhmPercentage , 'androidJtcCsv' => $androidjtcPercentage , 'androidJujuCsv' => $androidjujuPercentage
	        , 'desktopVhmCsv' => $desktopvhmPercentage , 'desktopJtcCsv' => $desktopjtcPercentage , 'desktopJujuCsv' => $desktopjujuPercentage
	        , 'othersVhmCsv' => $othersvhmPercentage , 'othersJobsCsv' => $othersjtcPercentage ,'othersJujuCsv' => $othersjujuPercentage
	    );
	 
	    $filename = 'Export BrowserType - ' . date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	    $fileheader = array(
	        'platform',
	        'desktop',
	        'mobile iphone',
	        'mobile android',
	        'mobile others',
	      	    );
	
	    header('Content-Type: application/excel');
	    header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
	
	    $fileOutput = fopen('php://output', 'w');
	    fputcsv($fileOutput, $fileheader);
	
	    $data = '' . "\n";

	    $data = 'TOTAL' . $this->separator . $intoCsv['desktopCsv'] . "%" . $this->separator . $intoCsv['iosCsv'] . "%" . $this->separator . $intoCsv['androidCsv'] . "%" . $this->separator . $intoCsv['othersCsv'] . "%" ."\n"; 
	    
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	    
	    $data = 'VHM' . $this->separator . $intoCsv['desktopVhmCsv'] . "%" . $this->separator . $intoCsv['iosVhmCsv'] . "%" . $this->separator . $intoCsv['androidVhmCsv'] . "%" .
	    $this->separator . $intoCsv['othersVhmCsv'] . "%" ."\n";
	     
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	    
	    $data = 'Jobs2Career' . $this->separator . $intoCsv['desktopJtcCsv'] . "%" . $this->separator . $intoCsv['iosJtcCsv'] . "%" . $this->separator . $intoCsv['androidJtcCsv'] . "%" . 
	    $this->separator . $intoCsv['othersJobsCsv'] . "%" ."\n";
	    
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	    
	    $data = 'Juju' . $this->separator . $intoCsv['desktopJujuCsv'] . "%" . $this->separator . $intoCsv['iosJujuCsv'] . "%" . $this->separator . $intoCsv['androidJujuCsv'] . "%" .
	    $this->separator . $intoCsv['othersJujuCsv'] . "%" ."\n";
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	
	    fclose($fileOutput);
	    die();
	}
	public function getAndroidIosUserAgent($dates)
	{
		$dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from(array('mv'=>'microRecruitingVisits'), array( 'total'=> 'userAgent' , 'date'))
	    ->where(new Zend_db_Expr('CAST(mv.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	    // user agents
	    $result = $this->db->fetchAll($select);
	    
	    $userAgentPerCategory = array();
	   
	    $totals = array();
	     
	    $iphone = 'iphone;';
	    $ipad = 'ipad;';
	    $android = 'android';

	    $counts = array();
	    
	    $finalData = array();
	    $arrayData = array();
	    $iPhone = array();
	    $android = array();
	   
	     
	    foreach ($result as $key => $value) {
	        $value['total'] = strtolower($value['total']);
	        $arrayData = $this->multiexplode(array(" ","(",")","/"), $value['total']);
	    
	        $iphone = 'iphone;';
	        $ipad = 'ipad;';
	    
	        $android = 'android';
	        // IOS
	        if (in_array($iphone, $arrayData) || in_array($ipad, $arrayData) ) {
	    
	            if (! array_key_exists('ios', $finalData))
	            {
	                $finalData['ios'] = array();
	            }
	            array_push($finalData['ios'], $value['total']);
	            
	        }
	        // ANDROID
	        if (in_array($android, $arrayData))
	        {
	    
	            if (! array_key_exists('android', $finalData))
	            {
	                $finalData['android'] = array();
	            }
	            array_push($finalData['android'], $value['total']);
	    
	        }
	      
	    }

        $androidExplode = array();
        $androidArr=array();
	    foreach ($finalData['android'] as $key => $value)
	    {
	        
	        $androidExplode = $this->multiexplode(array(';'), $value);
	        $androidArr[] = $androidExplode['1'];
	        
	    }
	    foreach ($androidArr as $value)
	    {
	        $version = explode(' ', $value);
	        if ($version['1']=='android')
	        {
	            $androidVer[] = $version['2'];
	        }
	        
	    }
	    
	    if (empty($androidVer))
	    {
	        $valuesCount = 0;
	    }
	    else 
	    {
	        $valuesCount = array_count_values($androidVer);
	    }
	    
	    $iosExplode = array();
	    $iosArr = array();
	    
	    foreach ($finalData['ios'] as $key => $value)
	    {
	        $iosExplode = $this->multiexplode(array(' '), $value);
	        $iosArr1[] = $iosExplode['5'];
	        $iosArr2[] = $iosExplode['4'];
	        
	    }
	    
	    $iosArrMerge = array_merge($iosArr1 , $iosArr2);
	    $allIosVersions = array();
	    foreach ($iosArrMerge as $key => $value)
	    {
	        if (substr($value, -1) / 1)
	        {
	            if (isset($allIosVersions[$value]))
	            {
	               $allIosVersions[$value]++;
	            }
	            else 
	            {
	                $allIosVersions[$value] = 1;
	            }
	        }
	    }

	    $allIosVerKey = array('ios920' => '9_2' , 'ios921' => '9_2_1' , 'ios910' => '9_1' 
	        , 'ios902' => '9_0_2' , 'ios901' => '9_0_1' , 'ios841' => '8_4_1' ,
	        'ios840' => '8_4' , 'ios830' => '8_3' , 'ios820' => '8_2' ,	        
	        'ios813' => '8_1_3' , 'ios812' => '8_1_2' , 'ios811' => '8_1_1' ,
	        'ios810' => '8_1' , 'ios802' => '8_0_2' , 'ios712' => '7_1_2' ,
	        'ios711' => '7_1_1' , 'ios710' => '7_1' , 'ios706' => '7_0_6' ,
	        'ios704' => '7_0_4' , 'ios703' => '7_0_3' , 'ios702' => '7_0_2' ,
	        'ios616' => '6_1_6' , 'ios614' => '6_1_4' , 'ios613' => '6_1_3' ,
	        'ios612' => '6_1_2' , 'ios610' => '6_1' , 'ios601' => '6_0_1' ,
	        'ios511' => '5_1_1' , 'ios510' => '5_1' , 'ios501' => '5_0_1' ,
	        'ios435' => '4_3_5' , 'ios320' => '3_2'
	        ); 
	    $allIosVer = array();
	    foreach ($allIosVerKey as $key => $value) 
	    {
	    	$allIosVer[$key] = isset($allIosVersions[$value]) ? $allIosVersions[$value] : 0;
	    }

	    // $allIosVer = array('ios920' => $allIosVersions['9_2'] , 'ios921' => $allIosVersions['9_2_1'] , 'ios910' => $allIosVersions['9_1'] 
	    //     , 'ios902' => $allIosVersions['9_0_2'] , 'ios901' => $allIosVersions['9_0_1'] , 'ios841' => $allIosVersions['8_4_1'] ,
	    //     'ios840' => $allIosVersions['8_4'] , 'ios830' => $allIosVersions['8_3'] , 'ios820' => $allIosVersions['8_2'] ,	        
	    //     'ios813' => $allIosVersions['8_1_3'] , 'ios812' => $allIosVersions['8_1_2'] , 'ios811' => $allIosVersions['8_1_1'] ,
	    //     'ios810' => $allIosVersions['8_1'] , 'ios802' => $allIosVersions['8_0_2'] , 'ios712' => $allIosVersions['7_1_2'] ,
	    //     'ios711' => $allIosVersions['7_1_1'] , 'ios710' => $allIosVersions['7_1'] , 'ios706' => $allIosVersions['7_0_6'] ,
	    //     'ios704' => $allIosVersions['7_0_4'] , 'ios703' => $allIosVersions['7_0_3'] , 'ios702' => $allIosVersions['7_0_2'] ,
	    //     'ios616' => $allIosVersions['6_1_6'] , 'ios614' => $allIosVersions['6_1_4'] , 'ios613' => $allIosVersions['6_1_3'] ,
	    //     'ios612' => $allIosVersions['6_1_2'] , 'ios610' => $allIosVersions['6_1'] , 'ios601' => $allIosVersions['6_0_1'] ,
	    //     'ios511' => $allIosVersions['5_1_1'] , 'ios510' => $allIosVersions['5_1'] , 'ios501' => $allIosVersions['5_0_1'] ,
	    //     'ios435' => $allIosVersions['4_3_5'] , 'ios320' => $allIosVersions['3_2'] 
	    // );

		
		$allIosVer = $this->knatsort($allIosVer);

	    $totalIosVerCount = array_sum($allIosVersions);
	
	    foreach ($allIosVer as $key => $value) 
	    {
	    	if (empty($allIosVer[$key])) 
	    	{
	    		$iosVerPercentage[$key] = 0;
	    	}
	    	else
	    	{
	    		$iosVerPercentage[$key] = round($allIosVer[$key] * 100 / $totalIosVerCount , 2);
	    	}
	    }
	    $allAndroidVerKey = array('android404' => '4.0.4' , 'android421' => '4.2.1' , 'android600' => '6.0'
            , 'android601' => '6.0.1' ,'android403' => '4.0.3' , 'android411' => '4.1.1'
            , 'android443' => '4.4.3' , 'android440' => '4.4' , 'android412' => '4.1.2' 
            , 'android430' => '4.3' , 'android444' => '4.4.4' , 'android422' => '4.2.2'
            , 'android500' => '5.0' , 'android510' => '5.1' , 'android501' => '5.0.1'
            , 'android511' => '5.1.1' , 'android442' => '4.4.2' , 'android502' => '5.0.2'
        );
        $allAndroidVer = array();
        foreach ($allAndroidVerKey as $key => $value) 
	    {
	    	$allAndroidVer[$key] = isset($valuesCount[$value]) ? $valuesCount[$value] : 0;
	    }
	  
        // $allAndroidVer = array('android404' => $valuesCount['4.0.4'] , 'android421' => $valuesCount['4.2.1'] , 'android600' => $valuesCount['6.0']
        //     , 'android601' => $valuesCount['6.0.1'] ,'android403' => $valuesCount['4.0.3'] , 'android411' => $valuesCount['4.1.1']
        //     , 'android443' => $valuesCount['4.4.3'] , 'android440' => $valuesCount['4.4'] , 'android412' => $valuesCount['4.1.2'] 
        //     , 'android430' => $valuesCount['4.3'] , 'android444' => $valuesCount['4.4.4'] , 'android422' => $valuesCount['4.2.2']
        //     , 'android500' => $valuesCount['5.0'] , 'android510' => $valuesCount['5.1'] , 'android501' => $valuesCount['5.0.1']
        //     , 'android511' => $valuesCount['5.1.1'] , 'android442' => $valuesCount['4.4.2'] , 'android502' => $valuesCount['5.0.2']
        // ); 	
        $allAndroidVer = $this->knatsort($allAndroidVer);

        $totalAndroidVerCount = count($androidVer);
        
        foreach ($allAndroidVer as $key => $value) 
        {
        	$androidVerPercentage[$key] = round($allAndroidVer[$key] * 100 / $totalAndroidVerCount , 2);

        }
        $allAndroidVerCountKey = array('android404c' => '4.0.4' , 'android421c' => '4.2.1' , 'android600c' => '6.0'
            , 'android601c' => '6.0.1' ,'android403c' => '4.0.3' , 'android411c' => '4.1.1'
            , 'android443c' => '4.4.3' , 'android440c' => '4.4' , 'android412c' => '4.1.2' 
            , 'android430c' => '4.3' , 'android444c' => '4.4.4' , 'android422c' => '4.2.2'
            , 'android500c' => '5.0' , 'android510c' => '5.1' , 'android501c' => '5.0.1'
            , 'android511c' => '5.1.1' , 'android442c' => '4.4.2' , 'android502c' => '5.0.2'
        );
        $androidVerCount = array();
        foreach ($allAndroidVerCountKey as $key => $value) 
	    {
	    	$androidVerCount[$key] = isset($valuesCount[$value]) ? $valuesCount[$value] : 0;
	    }
        // $androidVerCount = array('android404c' => $valuesCount['4.0.4'] , 'android421c' => $valuesCount['4.2.1'] , 'android600c' => $valuesCount['6.0']
        //     , 'android601c' => $valuesCount['6.0.1'] ,'android403c' => $valuesCount['4.0.3'] , 'android411c' => $valuesCount['4.1.1']
        //     , 'android443c' => $valuesCount['4.4.3'] , 'android440c' => $valuesCount['4.4'] , 'android412c' => $valuesCount['4.1.2'] 
        //     , 'android430c' => $valuesCount['4.3'] , 'android444c' => $valuesCount['4.4.4'] , 'android422c' => $valuesCount['4.2.2']
        //     , 'android500c' => $valuesCount['5.0'] , 'android510c' => $valuesCount['5.1'] , 'android501c' => $valuesCount['5.0.1']
        //     , 'android511c' => $valuesCount['5.1.1'] , 'android442c' => $valuesCount['4.4.2'] , 'android502c' => $valuesCount['5.0.2']
        // );
        $androidVerCount = $this->knatsort($androidVerCount);
    	
	    $intoCsv = array_merge($androidVerPercentage, $androidVerCount);

	    $filename = 'Export BrowserType - ' . date("d-m-Y-h:i:sA"). date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	    $fileheader = array(
	        'Totals',
	        'Total Android',
	        'Android 6.0.1',
	        'Android 6.0' , 'Android 5.1.1', 'Android 5.1', 'Android 5.0.2', 'Android 5.0.1', 'Android 5.0', 'Android 4.4.4', 'Android 4.4.3',
	        'Android 4.4.2', 'Android 4.4', 'Android 4.3', 'Android 4.2.2', 'Android 4.2.1', 'Android 4.1.2', 'Android 4.1.1', 'Android 4.0.4', 'Android 4.0.3'
	    );
	    
	    header('Content-Type: application/excel');
	    header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
	    
	    $fileOutput = fopen('php://output', 'w');
	    fputcsv($fileOutput, $fileheader);

	    $data = 'Android %' . $this->separator . '100%';
	    foreach ( $androidVerPercentage as $prc )
	    {
	    	$data .= $this->separator . $prc . '%';
	    }

	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	    
	    $data = 'Android Count' . $this->separator .  $totalAndroidVerCount;
	    foreach ( $androidVerCount as $count )
	    {
	    	$data .= $this->separator . $count;
	    }

	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);






	    
	    $fileheader2 = array(
	        ' ',
	        'Total Ios',
	        'Ios 9.2','Ios 9.2.1','Ios 9.1','Ios 9.0.2','Ios 9.0.1','Ios 8.4.1','Ios 8.4','Ios 8.3','Ios 8.2',
	        'Ios 8.1.3','Ios 8.1.2','Ios 8.1.1','Ios 8.1','Ios 8.0.2','Ios 7.1.2','Ios 7.1.1','Ios 7.1','Ios 7.0.6',
	        'Ios 7.0.4','Ios 7.0.3','Ios 7.0.2','Ios 6.1.6','Ios 6.1.4','Ios 6.1.3','Ios 6.1.2','Ios 6.1','Ios 6.0.1',
	        'Ios 5.1.1','Ios 5.1','Ios 5.0.1','Ios 4.3.5','Ios 3.2'
	    );
	   
	   	$fileOutput = fopen('php://output', 'w');
	    fputcsv($fileOutput, $fileheader2);

	    $data = 'Ios %' . $this->separator . '100%';
	    foreach ( $iosVerPercentage as $IosPrc )
	    {
	    	$data .= $this->separator . $IosPrc . '%';
	    }
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);

	   $data = 'Ios Count' . $this->separator .  $totalIosVerCount;
	     foreach ( $allIosVer as $iosCount )
	    {
	    	$data .= $this->separator . $iosCount;
	    }
	    $values = explode($this->separator, $data);
	    fputcsv($fileOutput, $values);
	    
	   
	    
	                fclose($fileOutput);
	                die();
	}

	function knatsort ($subject = array())
	{
		$keys = array_keys($subject);
		natsort($keys);

		$return = array();
		foreach($keys as $kcurrkey)
		{
			$return[$kcurrkey] = $subject[$kcurrkey];
		}

		return array_reverse($return);
	}
	
	/**
	 * Export answers to questions for requested subIds
	 * @param array $post
	 */
	
	public function exportAnswersForSubIds($post)
	{
		$dates = array( 'dateFrom' => $post['dateFrom'],
						'dateUntil' => $post['dateUntil']);
		$subIds = explode(',', $post['subIds']);
		
		foreach ($subIds as $key => $subId)
		{
			$subIds[$key] = trim($subId);
				
			if ($subIds[$key] == '')
			{
				unset($subIds[$key]);
			}
		}

		$dates = $this->formatDate($dates);
		
		$select = $this->db->select()
					->from(array('sa' => 'surveyAnswers'), array('surveyFieldId', 'answer', 'answerCount' => new Zend_Db_Expr('COUNT(answer)')))
					->join(array('sf' => 'surveyField'), 'sa.surveyFieldId=sf.id', array('question'))
					->join(array('mst2' => 'microRecruitingSubIdTrackingStep2'), 'sa.userId=mst2.userId', array('subId'))
					->join(array('u' => 'userData'), 'sa.userId=u.id', '')
					->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
					->where('subId IN (?)', $subIds)
					->where('surveyFieldId NOT IN (?)', array('153', '154', '155', '156', '171', '169', '170'))
					->group('subId')
					->group('surveyFieldId')
					->group('answer');
		
		$result = $this->db->fetchAll($select);
		$result = $this->setDataForSurveyAnswers($result);
		
		$questions = array();
		foreach ($result as $subId => $subIdAnswers)
		{
			foreach ($subIdAnswers as $questionId => $answer)
			{
				if (!in_array($questionId, $questions))
				{
					array_push($questions, $questionId);
				}
			}
		}
		$subIds = array_keys($result);
		
		$select = $this->db->select()
					->from(array('mj' => 'microRecruitingJob'), array('subId' => 'id'))
					->join(array('mjt' => 'microRecruitingJobPlatform'), 'mj.platformId=mjt.id', array('platform' => 'name'))
					->joinLeft(array('mjtype' => 'microRecruitingJobType'), 'mj.jobTypeId=mjtype.id', array('jobType'))
					->join(array('mrca' => 'microRecruitingCategory'), 'mrca.id=mj.categoryId', array('category' => 'categoryName'))
					->join(array('mrci' => 'microRecruitingCities'), 'mrci.id=mj.cityId', array('city' => 'name'))
					->joinLeft(array('mrjt' => 'microRecruitingJobTitle'), 'mrjt.id=mj.titleId', array('title'))
					->joinLeft(array('mrjkw' => 'microRecruitingJobKeyWord'), 'mrjkw.id=mj.keyWordId', array('keyWord'))
					->joinLeft(array('mrjd' => 'microRecruitingJobDescription'), 'mrjd.id=mj.descriptionId', array('description'))
					->where('mj.id IN (?)', $subIds);
		
		$resultsMoreData = $this->db->fetchAll($select);
		
		foreach ($resultsMoreData as $key => $subIdData)
		{
			if ($resultsMoreData[$key]['keyWord'] != NULL)
			{
				$resultsMoreData[$key]['title'] = $resultsMoreData[$key]['keyWord'] . " - Earn Up to $25/Hour";
				$resultsMoreData[$key]['description'] = "Earn up to $25/hr - if you already drive with Uber, Lyft, or another ride-sharing company or deliver with DoorDash, Postmates, or Instacart - Apply right now";
			}
		}

		$subIdsData = array();
		foreach ($resultsMoreData as $subId)
		{
			$subIdsData[$subId['subId']] = $subId;
			unset($subIdsData[$subId['subId']]['subId']);
		}
		
		$filename = 'Export subIds answers - ' . date("d-m-Y-h:i:sA");
		$fileheader = array('subId', 'platform', 'jobType', 'category', 'city', 'title', 'description');
		
		foreach ($questions as $question)
		{
			array_push($fileheader, $question);
		}
		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		$data = '' . "\n";
		
		foreach($result as $subId => $subIdData)
		{
			$data = $subId . $this->separator;
			
			$data .= $subIdsData[$subId]['platform'] . $this->separator . $subIdsData[$subId]['jobType'] . $this->separator . $subIdsData[$subId]['category'] . $this->separator .
			$subIdsData[$subId]['city'] . $this->separator . $subIdsData[$subId]['title'] . $this->separator . $subIdsData[$subId]['description'] . $this->separator;
			
			foreach ($questions as $questionId => $question)
			{
				if (array_key_exists($question, $subIdData))
				{
					foreach ($subIdData[$question]['surveyAnswers'] as $answer => $count)
					{
						$percentage = round($count * 100 /array_sum($subIdData[$question]['surveyAnswers']), 2);
						$data .= $answer . '(' . $count .')' . '(' . $percentage . '%)' . "\n";
					}
					
					$data .= '' . $this->separator;
				}
				else 
				{
					$data .= '' . $this->separator;
				}
			}
			
			$values = explode($this->separator, $data);
			fputcsv($fileOutput, $values);
		}
		
		fclose($fileOutput);
		die;
	}
	
	/**
	 * Set subId as key and organize a little bit the data for each subId for each question
	 * @param array $data
	 * @return array $newArray
	 */
	
	private function setDataForSurveyAnswers($data)
	{
		$newArray = array();
		
		foreach ($data as $answer)
		{
			if (!array_key_exists($answer['subId'], $newArray))
			{
				$newArray[$answer['subId']] = array();
			}
			
			if (!array_key_exists($answer['question'], $newArray[$answer['subId']]))
			{
				$newArray[$answer['subId']][$answer['question']] = array();
			}
			
			
			$newArray[$answer['subId']][$answer['question']]['question'] = $answer['question'];
			$newArray[$answer['subId']][$answer['question']]['surveyAnswers'][$answer['answer']] = $answer['answerCount'];
		}
		
		return $newArray;
	}
	
	public function getQuestionByCategoryData($categoryDisplay = '0', $formId = '100')
	{
		$select = $this->db->select()
		->from(array('mrcq'=>'microRecruitingCategoryQuestion'), '')
		->join(array('mrc'=>'microRecruitingCategory'), 'mrcq.categoryId=mrc.id', 'categoryName')
		->join(array('sf'=>'surveyField'), 'mrcq.questionId=sf.id', array('id','question'))
		->join(array('sa'=>'surveyAnswers'), 'sa.surveyFieldId=sf.id', array('answer', 'answerCount'=>new Zend_Db_Expr('COUNT(sa.answer)')))
		->join(array('ud'=>'userData'), 'ud.id=sa.userId','')
		->where('sf.formId=?', $formId)
		->where('mrc.display=?', $categoryDisplay)
		->group('surveyFieldId')
		->group('answer');
	
		$result = $this->db->fetchAll($select);
	
		$categoryQuestions = array();
	
		foreach($result as $value)
		{
			$categoryQuestions[$value['id']]['category'] = $value['categoryName'];
			$categoryQuestions[$value['id']]['question'] = $value['question'];
			if (!array_key_exists('answer', $categoryQuestions[$value['id']]))
			{
				$categoryQuestions[$value['id']]['answer'] = array();
			}
			$categoryQuestions[$value['id']]['answer'][$value['answer']] = $value['answerCount'];
		}
		return $categoryQuestions;
	}
	
	public function getAnswersForQuestions($category, $formId = '100')
	{
		if ($category == 'orphan')
		{
			$select = $this->db->select()
						->from(array('sf'=>'surveyField'), array('id', 'value'))
						->where('sf.formId=?', $formId)
						->where('sf.id >= 190');
		}
		elseif ($category == 'main')
		{
			$select = $this->db->select()
						->from(array('sf'=>'surveyField'), array('id', 'value'))
						->where('sf.formId=?', $formId)
						->where('sf.id <= 190');
		}
		
		$result = $this->db->fetchAll($select);
		
		$answers = array();
	
		foreach($result as $value)
		{
			$answer = explode(PHP_EOL, $value['value'] );
				
			foreach($answer as $v)
			{
				$answers[$value['id']]['answer'][$v] = 0;
			} 
		}
		return $answers;
	}
	
	public function groupAnswersToQuestionsByCategory($categoryDisplay, $category)
	{
		$questions = $this->getQuestionByCategoryData($categoryDisplay);
		$answers = $this->getAnswersForQuestions($category);

		foreach ($questions as $surveyFieldId => $questionData)
		{
			foreach($questionData['answer'] as $answer => $count)
			{
				if ($answer == "" || $answer == " ")
				{
					unset($questions[$surveyFieldId]['answer'][$answer]);
				}
			}
		}
		
// 		foreach ($answers as $key => $value)
// 		{
// 			foreach ($value as $answer => $count)
// 			{
// 				if(array_key_exists($key, $questions))
// 				{
// 					if (array_key_exists($answer, $questions[$key]))
// 					{
// 						$questions[$key][$answer] = $questions[$key][$answer] + $answers[$key][$answer];
// 						unset($questions[$key][$answer][""]);
// 					}
// 					else
// 					{
// 						$questions[$key][$answer] = $questions[$key][$answer];
// 					}
// 				}
// 				else
// 				{
// 					$questions[$key] = $questions[$key];
// 				}
// 			}
// 		}
		$categoryQuestions = array();
	
		foreach($questions as $key)
		{
			$categoryQuestions[$key['category']][$key['question']] = $key['answer'];
		}
		return $categoryQuestions;
	}
	
	public function exportQuestionsByCategory($category, $report)
	{
		if ($category == 'orphan')
		{
			$select = $this->db->select()
						->from(array('mrcq'=>'microRecruitingCategoryQuestion'), '')
						->join(array('mrc'=>'microRecruitingCategory'), 'mrcq.categoryId=mrc.id', 'categoryName')
						->join(array('sf'=>'surveyField'), 'mrcq.questionId=sf.id', array('id', 'question', 'value'))
						->where('formId =?', '100')
						->where('sf.id >=?', '190');
		}
		elseif($category == 'main')
		{
			$select = $this->db->select()
						->from(array('mrcq'=>'microRecruitingCategoryQuestion'), '')
						->join(array('mrc'=>'microRecruitingCategory'), 'mrcq.categoryId=mrc.id', 'categoryName')
						->join(array('sf'=>'surveyField'), 'mrcq.questionId=sf.id', array('id', 'question', 'value'))
						->where('formId =?', '100')
						->where('sf.id <=?', '190');
		}
		
		$result = $this->db->fetchAll($select);
		
		$questionAndPossibleAnswers = array();
		
		foreach ($result as $question)
		{
			if (!array_key_exists($question['question'], $questionAndPossibleAnswers))
			{
				$questionAndPossibleAnswers[$question['question']] = array();
				
				$answers = explode(PHP_EOL, $question['value']);
				foreach ($answers as $answer)
				{
					array_push($questionAndPossibleAnswers[$question['question']], trim($answer));
				}
			}
		}
		
		$filename = 'Export Category Questions - ' . $category . ' - ' . date("d-m-Y-h:i:sA");
		$fileheader = array('Category');
		
		$questions = array();

		foreach ($questionAndPossibleAnswers as $question => $answers)
		{
			foreach ($answers as $answer)
			{
				array_push($fileheader, $question);
			}
		}

		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		$possibleAnswers = array('');
		
		foreach ($questionAndPossibleAnswers as $question => $answers)
		{
			foreach ($answers as $answer)
			{
				array_push($possibleAnswers, $answer);
			}
		}
		
		fputcsv($fileOutput, $possibleAnswers);
		
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');

		$data = '' . "\n";

		foreach($report as $category => $questions)
		{
			$data = $category . $this->separator;
			foreach($questionAndPossibleAnswers as $question => $answers)
			{
				if (array_key_exists($question, $questions))
				{
					foreach($answers as $answer)
					{
						if (array_key_exists($answer,  $questions[$question]))
						{
							$count = $questions[$question][$answer];
							$percentage = round($count * 100 / array_sum($questions[$question]), 2);
							$data .= $percentage . '%' . $this->separator;
						}
						else 
						{
							$data .= '' . $this->separator;
						}
					}
				}
				else
				{
					foreach ($answers as $answer)
					{
						$data .= '' . $this->separator;
					}
				}
			}
			$values = explode($this->separator, $data);
			fputcsv($fileOutput, $values);
		}
		fclose($fileOutput);
		die;
	}
	
	/**
	 * Return dates array, by picking dates from POST
	 * @param array $post
	 * @return array
	 */
	
	private function returnDatesFromPost($post)
	{
		$dates = array( 'dateFrom' => $post['dateFrom'],
						'dateUntil' => $post['dateUntil']);
	
		return $dates;
	}
	
	/**
	 * Return array with all userAgents
	 * @return array
	 */
	
	private function getAllUserAgentsForSubIds()
	{
		$select = $this->db->select()
					->from(array('cwsv' => 'microRecruitingVisits'), 'userAgent')
					->where('userAgent !=?', '')
					->where('userAgent !=?', 'AdsBot-Google (+http://www.google.com/adsbot.html)')
					->where('userAgent !=?', 'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)')
					->where('userAgent !=?', 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)')
					->where('userAgent !=?', 'Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)')
					->where('userAgent !=?', 'Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)')
					->where('userAgent !=?', 'Domain Re-Animator Bot (http://domainreanimator.com) - support@domainreanimator.com');
		$result = $this->db->fetchAll($select);
	
		$userAgents = array();
		foreach ($result as $userAgent)
		{
			array_push($userAgents, $userAgent['userAgent']);
		}
	
		return $userAgents;
	}
	
	/**
	 * Export count for each browser type from userAgent
	 * @param array $post
	 */
	
	public function exportBrowserType($post)
	{
		$dates = $this->returnDatesFromPost($post);
	
		$userAgents = $this->getAllUserAgentsForSubIds();
	
		$browsers = array();
		foreach ($userAgents as $userAgent)
		{
			$mobile = Dot_UserAgent_Utilities::isMobile($userAgent);
			if ($mobile == true)
			{
				$device = 'mobile';
			}
			else 
			{
				$device = 'desktop';
			}
			
			if (!array_key_exists($device, $browsers))
			{
				$browsers[$device] = array();
			}
			
			$browser = Dot_UserAgent_Utilities::getBrowserIcon($userAgent);
			if (!array_key_exists($browser, $browsers[$device]) && $browser != 'unknown')
			{
				$browsers[$device][$browser] = 0;
			}
			if ($browser == 'unknown')
			{
				if (strpos($userAgent, 'iPhone') !== false || strpos($userAgent, 'iPad') !== false) 
				{
					$browsers[$device]['safari'] += 1;
				}
				if (strpos($userAgent, 'Dalvik') !== false && strpos($userAgent, 'Android ') !== false) 
				{
					if (!array_key_exists('android', $browsers[$device]))
					{
						$browsers[$device]['android'] = 0;
					}
					$browsers[$device]['android'] += 1;
				}
			}
			else 
			{
				$browsers[$device][$browser] += 1;
			}
		}

		$filename = 'MicroRecruiting - Export browsers - ' . date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
		$fileheader = array('Device', 'Browser', 'Count', 'Percentage');
	
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
	
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
	
		$data = '' . "\n";
	
		$totalVisits = array_sum($browsers['mobile']) + array_sum($browsers['desktop']);
	
		foreach ($browsers as $deviceType => $browsersData)
		{
			foreach ($browsersData as $browserName => $count)
			{
				$percentage = round($count * 100 / $totalVisits, 2);
				$data = $deviceType . $this->separator . $browserName . $this->separator . $count . $this->separator . $percentage ."%" . $this->separator;
		
				$values = explode($this->separator, $data);
				fputcsv($fileOutput, $values);
			}
		}
	
		fclose($fileOutput);
		die;
	}
	
	public function getEmailTldByMainCategoriesForStep1($dates, $platform = '2', $registerType = '0', $display = '1')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mc' => 'microRecruitingCategory'), 'mj.categoryId=mc.id', array('categoryName'))
		->join(array('mrsits1'=>'microRecruitingSubIdTrackingStep1'), 'mj.id=mrsits1.subId', 'userId')
		->join(array('uds1'=>'userDataStep1'), 'uds1.id=mrsits1.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('mc.display = ?', $display)
		->where(new Zend_db_Expr('CAST(uds1.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailTldByMainCategoriesForStep2($dates, $platform = '2', $registerType = '0', $display = '1')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mc' => 'microRecruitingCategory'), 'mj.categoryId=mc.id', array('categoryName'))
		->join(array('mrsits2'=>'microRecruitingSubIdTrackingStep2'), 'mj.id=mrsits2.subId', 'userId')
		->join(array('ud'=>'userData'), 'ud.id=mrsits2.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('mc.display = ?', $display)
		->where(new Zend_db_Expr('CAST(ud.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailTldByOrphanCategoriesForStep1($dates, $platform = '2', $registerType = '0', $display = '0')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mc' => 'microRecruitingCategory'), 'mj.categoryId=mc.id', array('categoryName'))
		->join(array('mrsits1'=>'microRecruitingSubIdTrackingStep1'), 'mj.id=mrsits1.subId', 'userId')
		->join(array('uds1'=>'userDataStep1'), 'uds1.id=mrsits1.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('mc.display = ?', $display)
		->where(new Zend_db_Expr('CAST(uds1.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
	
	public function getEmailTldByOrphanCategoriesForStep2($dates, $platform = '2', $registerType = '0', $display = '0')
	{
		$select = $this->db->select()
		->from(array('mj' => 'microRecruitingJob'), '')
		->join(array('mc' => 'microRecruitingCategory'), 'mj.categoryId=mc.id', array('categoryName'))
		->join(array('mrsits2'=>'microRecruitingSubIdTrackingStep2'), 'mj.id=mrsits2.subId', 'userId')
		->join(array('ud'=>'userData'), 'ud.id=mrsits2.userId', array('email', 'dateCreated'))
		->where('registerType=?', $registerType)
		->where('mc.display = ?', $display)
		->where(new Zend_db_Expr('CAST(ud.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	
		$result = $this->db->fetchAll($select);
		return $result;
	}
		
	public function totalRegistrationByCategory($result)
	{
		foreach($result as $key=>$value)
		{
			if($value['email'] == NULL)
			{
				unset($result[$key]);
			}
			else
			{
				$domain = explode('@', $value['email']);
				$total[$value['categoryName']][] = strtolower($domain[1]);
			}
		}
		$newArray = array();
		
		if(!empty($total))
		{
			foreach($total as $key => $value)
			{
				$newArray[$key] = array_count_values($value);
			}
		}
		return $newArray;
	}
	
	public function emailRegistrationByCategories($resultsReg1, $resultsReg2, $dates)
	{
		$sums = array();
		
		foreach ($resultsReg1 as $categoryName => $platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if(array_key_exists($categoryName, $resultsReg2))
				{
					if (array_key_exists($domain, $resultsReg2[$categoryName]))
					{
						$sums[$categoryName][$domain] = $resultsReg1[$categoryName][$domain] + $resultsReg2[$categoryName][$domain];
					}
					else
					{
						$sums[$categoryName][$domain] = $resultsReg1[$categoryName][$domain];
					}
				}
				else
				{
					$sums[$categoryName] = $resultsReg1[$categoryName];
				}
			}
		}
		
		foreach ($resultsReg2 as $categoryName => $platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if(isset($sums[$categoryName]))
				{
					if (!array_key_exists($domain, $sums[$categoryName]))
					{
						$sums[$categoryName][$domain] = $resultsReg2[$categoryName][$domain];
					}
				}
				else
				{
					echo '';
				}
			}
		}
		return $sums;
	}
	
	public function exportCsvEmailForMainCategories($report, $dates)
	{
		$f = fopen('php://memory', 'w');
	
		$csv = '"Category","Email Tld","Registration Count", "Total Category Reg","Percentage"'."\n";
	
		$countTotals = array();
	
		foreach($report as $categoryName =>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if (!array_key_exists($categoryName, $countTotals))
				{
					$countTotals[$categoryName] = 0;
				}
				$countTotals[$categoryName] += $count;
			}
		}
		ksort($report);
		foreach($report as $categoryName=>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				$countPercentage = round($count * 100 / $countTotals[$categoryName], 2);
				$csv .= '"' . $categoryName.'","' . $domain.'","' . $count.'","' . $countTotals[$categoryName] .'","' . $countPercentage . '%'.'",' . "\n" . "\r";
			}
		}
	
		$filename = 'exportCsvEmailTldForMainCategories-'.date("d-m-Y-h:i:sA") . '--' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
		echo $csv;
		die();
	}
	
	public function exportCsvEmailForOrphanCategories($report, $dates)
	{
		$f = fopen('php://memory', 'w');
	
		$csv = '"Category","Email Tld","Registration Count", "Total Category Reg","Percentage"'."\n";
	
		$countTotals = array();
		
		foreach($report as $categoryName =>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				if (!array_key_exists($categoryName, $countTotals))
				{
					$countTotals[$categoryName] = 0;
				}
				$countTotals[$categoryName] += $count;
			}
		}
		
		ksort($report);
		foreach($report as $categoryName=>$platformEmails)
		{
			foreach ($platformEmails as $domain => $count)
			{
				$countPercentage = round($count * 100 / $countTotals[$categoryName], 2);
				$csv .= '"' . $categoryName .'","' . $domain.'","' . $count.'","' . $countTotals[$categoryName] .'","' . $countPercentage . '%'.'",' . "\n" . "\r";
			}
		}
	
		$filename = 'exportCsvEmailTldForOrphanCategories-'.date("d-m-Y-h:i:sA") . '--' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
		echo $csv;
		die();
	}
	public function getReg1Users($dates,$platformId = '2')
	{
	    $dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from(array('mrsits' => 'microRecruitingSubIdTrackingStep1'), array('subId', 'userId'))
	    ->join(array('u'=>'userDataStep1'), 'mrsits.userId = u.id', array('email', 'registerType', 'dateCreated'))
	    ->join(array('mj'=>'microRecruitingJob'), 'mj.id=mrsits.subId', '')
	    ->join(array('mrc' => 'microRecruitingCategory'), 'mrc.id=mj.categoryId' , array('category' => 'mrc.categoryName'))
	    ->join(array('mrcs' => 'microRecruitingCities'), 'mrcs.id=mj.cityId' , array('city' => 'mrcs.name'))
	    ->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
	    ->where('u.platform = ?', $platformId)
	    ->group('u.id');

	    $result = $this->db->fetchAll($select);
	    foreach ($result as $key => $subId)
	    {
	         
	        if ($subId['city'] == "Connecticut")
	        {
	            $result[$key]['city'] = 'Stamford-CT';
	        }
	        elseif ($subId['city'] == "New Jersey")
	        {
	            $result[$key]['city'] = 'Newark-NJ';
	        }
	        else
	        {
	            $result[$key]['city'] = $subId['city'];
	        }
	         
	    }
	    return $result;
	}
	public function exportReg1ToEmailCsv($report , $dates)
	{
	    $filename = 'exportReg1ToEmail-'.date("d-m-Y-h:i:sA") . '-range-' . $dates['dateFrom'] . '-until-' . $dates['dateUntil'];

	    $f = fopen('php://memory', 'w');
	    
	    $csv = '"userId","email","dateTime","regType","category","city/state"  '."\n";
	    
	    foreach($report as $key=>$row)
	    {
	        if($row['registerType'] == 0)
	        {
	            $row['registerType'] = "Email";
	        }
	    
	        if($row['registerType'] == 1)
	        {
	            $row['registerType'] = "Facebook";
	        }
	    
	        if($row['registerType'] == 2)
	        {
	            $row['registerType'] = "LinkedIn";
	        }
	        	
	        $csv .= '"' . $row['userId'].'","' . $row['email'].'","' . $row['dateCreated'].'","' . $row['registerType'].'","'  . $row['category'].'","' . $row['city']. '",' . "\n";
	    }
	    
	    header('Content-type: application/csv');
	    header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
	    header("Content-Transfer-Encoding: binary");
	    
	    echo $csv;
	    die();
	}
	
	
	public function getUserIdsReg2($dates)
	{
	    $dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from('userData', array('userId' => 'id' ))
	    ->where('platform=?', '2')
	    ->where(new Zend_db_Expr('CAST(dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	    $result = $this->db->fetchAll($select);
	    $ids = $this->returnUsersIds($result);
	    return $ids;
	}
	
	private function getUserStepReg2($ids)
	{
	    $surveys = array('100');
	    $select = $this->db->select()
	    ->from(array('sa' => 'surveyAnswered'), array('userId', 'count' => new Zend_Db_Expr('COUNT(userId)')))
	    ->where('sa.surveyId IN (?)', $surveys)
	    ->where('sa.userId IN (?)', $ids)
	    ->group('sa.userId');
	
	    $result = $this->db->fetchAll($select);
	    $step = $this->returnUsersIdsAsKey($result);
	
	    return $step;
	}
	
	private function getRedirectUrlForApplyUrl($ids)
	{
	    $select = $this->db->select()
	    ->from('userData', 'email')
	    ->where('id IN (?)', $ids);
	    $result = $this->db->fetchAll($select);
	
	    $emails = array();
	    foreach ($result as $email)
	    {
	        array_push($emails, $email['email']);
	    }
	
	    $select = $this->db->select()
	    ->from(array('cwr' => 'crowdedWorkSubIdTrackingRedirect'), array('urlRedirect', 'email'))
	    ->where('email IN (?)', $emails)
	    ->group('email')
	    ->group('urlRedirect');
	
	    $result = $this->db->fetchAll($select);
	
	    $data = array();
	    foreach ($result as $redirect)
	    {
	        if (!array_key_exists($redirect['email'], $data))
	        {
	            $data[$redirect['email']] = array();
	        }
	
	        array_push($data[$redirect['email']], $redirect['urlRedirect']);
	    }
	
	    return $data;
	}
	private function getAllRegisteredUsersReg2($dates)
	{
	    $dates = $this->formatDate($dates);
	    $select = $this->db->select()
	    ->from(array('u' => 'userData'), array('userId' => 'id', 'email', 'dateCreated' , 'regType' => 'registerType'))
	    ->join(array('mrsits' => 'microRecruitingSubIdTrackingStep2'),'mrsits.userId=u.id' , '')
	    ->join(array('mj'=>'microRecruitingJob'), 'mj.id=mrsits.subId', '')
	    ->join(array('mrc' => 'microRecruitingCategory'), 'mrc.id=mj.categoryId' , array('category' => 'mrc.categoryName'))
	    ->join(array('mrcs' => 'microRecruitingCities'), 'mrcs.id=mj.cityId' , array('city' => 'mrcs.name'))
	    ->where('u.platform=?', '2')
	    ->where(new Zend_db_Expr('CAST(dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'));
	    
	    $result = $this->db->fetchAll($select);
	   
	    foreach ($result as $key => $subId)
	    {

	        if ($subId['city'] == "Connecticut")
	        {
	            $result[$key]['city'] = 'Stamford-CT';
	        }
	        elseif ($subId['city'] == "New Jersey")
	        {
	            $result[$key]['city'] = 'Newark-NJ';
	        }
	        else
	        {
	            $result[$key]['city'] = $subId['city'];
	        }
	    
	    }
	    return $result;
	}
	private function getAllUsersForFacebookReg2($ids)
	{
	    $select = $this->db->select()
	    ->from(array('us' => 'userSocialAccounts'), array('userId' => 'userId'))
	    ->join(array('f' =>'facebook'), 'us.facebookId = f.facebookId',array('facebookFirstName' => 'firstName', 'facebookLastName' => 'lastName'))
	    ->joinLeft(array('fld' => 'facebookLinkDevice'), 'us.facebookId = fld.facebookId', array())
	    ->joinLeft(array('fd' => 'facebookDevice'), 'fld.deviceId = fd.id', array('facebookDeviceOS' => 'os'))
	    ->where('us.userId IN (?)', $ids);
	
	    $result = $this->db->fetchAll($select);
	    return $result;
	}
	/**
	 * Get all LinkedIn users data for registered users
	 * @param array $ids
	 * @return array
	 */
	
	private function getAllUsersForLinkedinReg2($ids)
	{
	    $select = $this->db->select()
	    ->from(array('l' => 'linkedin'), array('linkedinFirstName'=>'firstName','linkedinLastName'=>'lastName'))
	    ->join (array('us' => 'userSocialAccounts'), 'us.linkedinId = l.email', 'userId')
	    ->where('us.userId IN (?)', $ids);
	
	    $result = $this->db->fetchAll($select);
	    return $result;
	}
	
	private function exportQuestionsReg2($questions)
	{
	    // 		$data = '"' . 'userId' . '","' . 'email' . '","' . 'dateCreated' . '","';
	    $data = 'userId' . $this->separator . 'email' . $this->separator . 'dateCreated' . $this->separator . 'regType' . $this->separator;
	    $questionsOrder = $this->returnAnswersAndQuestionsOrderReg2();
	
	    foreach ($questionsOrder as $surveyKey => $surveyFieldKeys)
	    {
	        foreach ($surveyFieldKeys as $surveyFieldKey)
	        {
	
	            $data .= '' . $questions[$surveyKey][$surveyFieldKey] . $this->separator;
	
	
	        }
	
	    }
// 	    $data .= '' . "\n";
	    $socialNetworkFields = $this->returnSocialNetworkFieldsReg2();
	
	    foreach ($socialNetworkFields as $field)
	    {
	        $data .= $field . $this->separator ;
	    }
	    $data .= 'category' . $this->separator . 'cityState' . $this->separator . "\n";
	
	    return $data;
	}
	private function returnAnswersAndQuestionsOrderReg2()
	{
	    //keys 27 and 37 are for users that registered before we've changed the questions
	    return array('100' => array('153',  '154'));
	}
	private function appendSocialNetworkExportDataReg2($socialNetworkData)
	{
	    $socialNetworkFields = $this->returnSocialNetworkFieldsReg2();
	    $data = '';
	    foreach ($socialNetworkFields as $field)
	    {
	        if (!isset($socialNetworkData[$field]) || $socialNetworkData[$field] == '')
	        {
	            // 				$data .= '' . 'No Data' . '","';
	            $data .= 'No Data' . $this->separator;
	        }
	        else
	        {
	            $value = trim(preg_replace('/\s+/', ' ', $socialNetworkData[$field]));
	
	            if ($field == 'linkedinSummary')
	            {
	                $value = str_replace(",", "", $value);
	            }
	            $value = preg_replace('/[^(\x20-\x7F)]*/','', $value);
	            // 				$data .= '' . "$value" . '","';
	            $data .= "$value" . $this->separator;
	        }
	    }
	
	    return $data;
	}
	private function returnSocialNetworkFieldsReg2()
	{
	    return array("facebookFirstName","facebookLastName","linkedinFirstName","linkedinLastName");
	    /*
	     * ---- Google+ places lived, organizations etc... MORE than one ----
	     * "googlePlusLived","googlePlusPrimaryPlace","googlePlusOranizationTitle","googlePlusTitle",
	     * "googlePlusOranizationType","startDate","endDate","primary","googlePlusUrlLink","googlePlusLabel","googlePlusUrlType",
	     */
	}
	private function exportSurveyAnswersReg2($surveyAnswers, $allSurveyFields)
	{
	    // 	    if (isset($surveyAnswers['7']['35']))
	    // 	    {
	    // 	        $allSurveyFields['7']['0'] = '35';
	    // 	    }
	    // 	    array_push($allSurveyFields['7'], '37');
	    // 	    array_push($allSurveyFields['6'], '27');
	    $data = '';
	    foreach ($allSurveyFields as $surveyKey => $surveyFieldsArray)
	    {
	        foreach ($surveyFieldsArray as $surveyFieldKey)
	        {
	            if (isset($surveyAnswers[$surveyKey]))
	            {
	                if (!array_key_exists($surveyFieldKey, $surveyAnswers[$surveyKey]))
	                {
	                    $surveyAnswers[$surveyKey][$surveyFieldKey] = 'No Answer';
	                }
	                else
	                {
	                    $surveyAnswers[$surveyKey][$surveyFieldKey] = str_replace('"', " ", $surveyAnswers[$surveyKey][$surveyFieldKey]);
	                    $surveyAnswers[$surveyKey][$surveyFieldKey] = trim(preg_replace('/\s+/', ' ', $surveyAnswers[$surveyKey][$surveyFieldKey]));
	                }
	            }
	            else
	            {
	                $surveyAnswers[$surveyKey][$surveyFieldKey] = 'No Answer';
	            }
	        }
	    }
	
	    $answersOrder = $this->returnAnswersAndQuestionsOrderReg2();
	    if (isset($surveyAnswers['7']['35']))
	    {
	        $answersOrder['7']['0'] =  '35';

	    }

	    foreach ($answersOrder as $surveyKey => $surveyFieldKeys)
	    {
	        foreach ($surveyFieldKeys as $surveyFieldKey)
	        {
	            // 					$data .= '' . $surveyAnswers[$surveyKey][$surveyFieldKey] . '","';
	            $data .= '' . $surveyAnswers[$surveyKey][$surveyFieldKey] . $this->separator;
	        }
	    }
	      
	    return $data;
	}
	
	private function getAllUsersSurveyAnswersReg2()
	{
	    $surveyFieldKeys = array();
	    $surveyKeys = array('100');
	    $select = $this->db->select()
	    ->from(array('sa' => 'surveyAnswers'), array('surveyId', 'surveyFieldId', 'answer', 'userId'))
	    // 						->join(array('u' => 'userData'), 'sa.userId = u.id', array('userId' => 'id'))
	    // 						->join (array('sf' => 'surveyField'), 'sa.surveyFieldId = sf.id', 'question')
	    // 	    ->where('surveyId != 0')
	    ->where('surveyId IN (?)' , $surveyKeys)
// 	    ->where('surveyFieldId IN (?)' , $surveyFieldKeys);
	    ->where('surveyFieldId != 0');
	    $result = $this->db->fetchAll($select);
	    //surveyFieldId -- had to set questions for fields deleted -- (those questions still exist but on another surveyFieldId) -- exception surveyFieldId 35 (Doesn't exist)
	    $keysArray = array(
	        '127' => '132',
	        '128' => '133',
	        '129' => '134',
	        '130' => '135',
	        '131' => '136',
	        // 						'35' => '',
	        '36' => '150',
	        '38' => '151'
	    );
	
	    foreach ($result as $key => $value)
	    {
	        if (array_key_exists($result[$key]['surveyFieldId'], $keysArray))
	        {
	            $result[$key]['surveyFieldId'] = $keysArray[$result[$key]['surveyFieldId']];
	        }
	    }
	
	    return $result;
	}
	private function returnUsersSurveyAnswersReg2()
	{
	    $surveyAnswers = $this->addDataAsArrayPerUserId($this->getAllUsersSurveyAnswersReg2(), 'surveyAnswers');
	    return $surveyAnswers;
	}
	private function setAllSurveyFieldsInArrayReg2()
	{
	    $allSurveyIds = array();
	    $surveyIds = array('100');
	    foreach($surveyIds as $id)
	    {
	        $surveyIdsFromDB = $this->returnAllSurveyFields($id);
	        $ids = array();
	        	
	        foreach($surveyIdsFromDB as $key => $value)
	        {
	            array_push($ids, $value['id']);
	        }
	        $allSurveyIds[$id] = $ids;
	    }
	    return $allSurveyIds;
	}
	public function exportReg2ToEmailCsv($dates)
	{
	    $ids = $this->getUserIdsReg2($dates);
	    $userStep = $this->getUserStepReg2($ids);	     
	    $users = $this->returnUsersIdsAsKey($this->getAllRegisteredUsersReg2($dates));
	    $facebookData = $this->returnUsersIdsAsKey($this->getAllUsersForFacebookReg2($ids));
	    $linkedinData = $this->returnUsersIdsAsKey($this->getAllUsersForLinkedinReg2($ids));
	    $answers = $this->setSurveysData($this->returnUsersSurveyAnswersReg2());
	
	    $questions = $this->formatQuestions($this->getAllSurveysQuestions());
	    $data = $this->exportQuestionsReg2($questions);
	    $allSurveyFields = $this->setAllSurveyFieldsInArrayReg2();
	
	    $args = array($facebookData, $linkedinData, $answers);
	    $allData = $this->mergeKeysArray($args);
	    $allData = $this->mergeUsersArrayWithAllData($users,$allData);
// 	       echo '<pre>';
	    $fileheader = explode($this->separator, $data);
	
	    $filename = 'exportReg2ToEmail  - ' . date("d-m-Y-h:i:sA");
	    header('Content-Type: application/excel');
	    header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
	
	    $fileOutput = fopen('php://output', 'w');
	    fputcsv($fileOutput, $fileheader);
	
	    foreach ($allData as $userId => $userData)
	    {
	        if (isset($userData['surveyAnswers']))
	        {
	            $surveyAnswers = $this->exportSurveyAnswersReg2($userData['surveyAnswers'], $allSurveyFields);
	        }
	        if($userData['regType'] == 0)
	        {
	            $userData['regType'] = "Email";
	        }
	         
	        if($userData['regType'] == 1)
	        {
	            $userData['regType'] = "Facebook";
	        }
	         
	        if($userData['regType'] == 2)
	        {
	            $userData['regType'] = "LinkedIn";
	        }
	        unset($allData[$userId]['surveyAnswers']);
	        unset($allData[$userId]['facebookId']);
	        $socialNetworkData = $this->appendSocialNetworkExportDataReg2($userData);

// 	        			$data .= '"' . $userId . '","' . $userData['email'] . '","' . $userData['dateCreated'] . '","' . $surveyAnswers . $socialNetworkData . '"' . "\n";
	        $values = '' . $userId . $this->separator . $userData['email'] . $this->separator . $userData['dateCreated'] . $this->separator . $userData['regType'] . $this->separator . 
	        $surveyAnswers . $socialNetworkData . $userData['category'] . $this->separator . $userData['city'] . $this->separator;
	        $values = explode($this->separator, $values);
	        fputcsv($fileOutput, $values);
	
	    }
	    //
	    fclose($fileOutput);
	
	    // 		header("Content-Encoding: UTF-8");
	    // 		header("Content-type: text/csv; charset=UTF-8");
	    // 		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
	    // 		header("Content-Transfer-Encoding: binary");
	
	    // 		echo $data;
	
	    die();
	}

	public function exportAllUserAgents()
	{
		$selectData = $this->db->select()
							->from(array('mrv'=>'microRecruitingVisits'),array('userAgent'=>'userAgent'));
							$resultData = $this->db->fetchAll($selectData);
		$csv = '';
		$f = fopen('php://memory', 'w');
		foreach ($resultData as $key => $value) 
		{
			$csv .= '"'.$value['userAgent'].'"' . "\n";
		}
	
		$filename = 'exportAllUserAgents';
	
		header('Content-type: application/csv');
		header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
		header("Content-Transfer-Encoding: binary");
	
        echo $csv;
		die();
	}
	
	/**
	 * Export URL redirects for Step3 users
	 * @param array $dates
	 */
	
	public function exportStep3UsersData($dates)
	{
		$dates = $this->formatDate($dates);
		
		$select = $this->db->select()
							->from(array('msts3' => 'microRecruitingSubIdTrackingStep3'), array('userId'))
							->joinLeft(array('mstr' => 'microRecruitingSubIdTrackingRedirect'), 'msts3.userId=mstr.userId', array('urlRedirect', 'subId'))
							->where(new Zend_db_Expr('CAST(msts3.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
							->group('mstr.userId')
							->group('mstr.urlRedirect');
							
		$select2 = $this->db->select()
					->from(array('redirects' => new Zend_Db_Expr("($select)")), array('urlRedirect', 'count' => new Zend_Db_Expr('COUNT(urlRedirect)')))
					->group('urlRedirect');
		
		$result = $this->db->fetchAll($select2);
		
		$fileheader = array('count', 'URL redirect');
		$filename = 'export Step3 redirect - date range -' . $dates['dateFrom'] . ' - ' . $dates['dateUntil'] . ' - export date -' . date("d-m-Y-h:i:sA");
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);
		
		foreach ($result as $redirectUrl)
		{
			$values = array($redirectUrl['count'], $redirectUrl['urlRedirect']);
			fputcsv($fileOutput, $values);
		}
		
		fclose($fileOutput);
		die;
	}

	/**
	 * Export Survey questions and answers
	 * @param array $data
	 */
	public function exportSurveyQA($data)
	{
		$dates = array( 'dateFrom' => $data['dateFrom'],
						'dateUntil' => $data['dateUntil']);
		$dates = $this->formatDate($dates);

		$result = $this->getSurveyQAUsers($dates);
		$answers = $this->getSurveyQA($dates, [100, 110]);
		$subSubIds =$this->getSurveyQASubIds($dates);

		$resultData = array();
		foreach ($result as $key => $value) {
			foreach ($value as $k => $v) {
				$resultData[$value['userId']][$k] = $v; 
			}
		}

		$formatedAnswers = array();
		foreach ($answers as $key => $value) {
			$formatedAnswers[$value['userId']][$value['question']] = $value['answer'];
			// $resultData[$value['userId']]['answers'][] = $value;	
		}
		foreach ($formatedAnswers as $key => $value) {
			$resultData[$key] = array_merge($resultData[$key], $formatedAnswers[$key]);
		}
		foreach ($subSubIds as $key => $value) {
			$resultData[$value['userId']][$value['subSubIdName']] = $value['subSubIdValue'];
		}
		$headerArray = array();
		foreach ($resultData as $value) {
			foreach ($value as $key => $v) {
				$headerArray[] = $key;
			}
		}
		$headerArray = array_unique($headerArray, SORT_STRING);
		$headerArray = array_flip($headerArray);
		$csvArray = array();
		foreach ($resultData as $value) {
			foreach ($headerArray as $k => $val) {
				$csvArray[$value['userId']][$k] = isset($value[$k]) ? $value[$k] : " ";
			}
		}

		$headerArray = array_flip($headerArray);

		$filename = 'export Survey Question and Answers - date range -' . $dates['dateFrom'] . ' - ' . $dates['dateUntil'] . ' - export date -' . date("d-m-Y-h:i:sA");
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $headerArray);

		foreach ($csvArray as $value)
		{
			fputcsv($fileOutput, $value);
		}

		fclose($fileOutput);
		die;
	}

	private function getSurveyQA($dates, $limits=array())
	{
		$selectAnswers = $this->db->select()
					->from(array('sa'=>'surveyAnswers'), array('answer'))
					->join(array('sf'=>'surveyField'), 'sf.id = sa.surveyFieldId', array('question'))
					->joinLeft(array('u'=>'userData'), 'sa.userId = u.id', array('email', 'userId'=>'id'))
					->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
					->where('sf.formId >= '.$limits[0])
					->where('sf.formId <= '.$limits[1])
					->where('u.platform = "2"')
					->order('u.dateCreated ASC')
					/*->limit("500")*/;

		return $this->db->fetchAll($selectAnswers);
	}

	private function getSurveyQAUsers($dates)
	{
		$select = $this->db->select()
					->from(array('u'=>'userData'), array('userId'=>'id', 'email'))
					->joinLeft(array('mca'=>'microRecruitingCategoryAnswered'), 'mca.userId = u.id', 'category')
					->joinLeft(array('mc'=>'microRecruitingCities'), 'mca.city = mc.cityLink', array('cityName'=>'name'))
					->joinLeft(array('at'=>'microRecruitingActionTracking'), 'u.id = at.userId', 'country' )
					->joinLeft(array('sts2'=>'microRecruitingSubIdTrackingStep2'), 'u.id = sts2.userId', 'subId')
					->where('u.platform = "2"')
					->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
					/*->limit("100")*/;

		return	$this->db->fetchAll($select);
	}

	private function getSurveyQASubIds($dates)
	{
		$selectSubSubIds = $this->db->select()
							->from(array('ssiut'=>'subSubIdUrlTracking'), array('userId', 'visitId', 'uniqueId', 'subSubId'))
							->join(array('ssi'=>'subSubId'), 'ssi.id = ssiut.subSubId', array('subSubIdName', 'subSubIdValue'))
							->where('ssiut.platformId = "2"')
							->where(new Zend_db_Expr('CAST(ssiut.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
							;

		return $this->db->fetchAll($selectSubSubIds);
	}

	public function exportSubIdStatsPerVisit($dates)
	{
		ini_set('memory_limit', '512M');

		if (isset($dates['dateFrom']) && isset($dates['dateUntil']))
		{
		    $dates = $this->formatDate($dates);
		    $adsBot = "without";
		    $SubSubIdsPerDate = $this->_getSubSubIdsPerDate($dates);
		     
		    $filename = 'SubId stats per Visit - ' . date("d-m-Y-h:i:sA");
		     
		    $fileheader = array("UID"=>"subId", "Referer"=>"referer", "Platform"=>'platform', "Job Type"=>"jobType", "Job Title"=>"title", "Categoy MicroRecruiting"=>"category", "Category XML"=>'categoryXML', "City MicroRecruiting" => "city", "City XML" => "cityXML", "Unique Clicks"=>"Unique Clicks", "Step 1"=>"Step 1", "Step 2"=>"Step 2",
		        "Removed"=>"removed", "CPC"=>"CPC", "AVERAGE CPC"=>"AVERAGE CPC", "COST"=>"COST", "CPA reg 2"=>"CPA reg 2", "Total Leads"=>"Total Leads", "reg 1 to reg 2%"=>"reg 1 to reg 2%");
		}
		elseif (isset($dates['dateFromBot']) && isset($dates['dateUntilBot']))
		{
		    $dates = $this->formatDate($dates);
		    $adsBot = "with";
		    $SubSubIdsPerDate = $this->_getSubSubIdsPerDate($dates);
		
		    $filename = 'SubId stats per Visit with google ads bot - ' . date("d-m-Y-h:i:sA");
		
		    $fileheader = array("UID"=>"subId", "Referer"=>"referer","Google Ad bot clicks"=>"userAgent", "Platform"=>'platform', "Job Type"=>"jobType", "Job Title"=>"title", "Categoy MicroRecruiting"=>"category", "Category XML"=>'categoryXML', "City MicroRecruiting" => "city", "City XML" => "cityXML", "Unique Clicks"=>"Unique Clicks", "Step 1"=>"Step 1", "Step 2"=>"Step 2",
		        "Removed"=>"removed", "CPC"=>"CPC", "AVERAGE CPC"=>"AVERAGE CPC", "COST"=>"COST", "CPA reg 2"=>"CPA reg 2", "Total Leads"=>"Total Leads", "reg 1 to reg 2%"=>"reg 1 to reg 2%");
		     
		}
		
		foreach ($SubSubIdsPerDate as $subSubId)
		{
			$fileheader[$subSubId] = $subSubId;
		}
		
		$fileheader = array_flip($fileheader);

		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');

		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $fileheader);

		$fileheader = array_flip($fileheader);

		unset($dataSum);
		unset($totalsData);
		unset($result);

		$subIdVisits = $this->getSubIdVisits($dates, $adsBot);
		if(empty($subIdVisits))
		{
			fclose($fileOutput);
			die();
		}

		$subIdVisits = $this->appendMoreDataToExport($subIdVisits);

		$maxCost = $this->getLastCost($dates);

		$costPerSubId = array();
		foreach ($maxCost as $key => $value) {
			$costPerSubId[$value['subId']] = $value['cost'];
		}

		$visitorIdList = array();
		foreach ($subIdVisits as $key => $value) {
				if(isset($costPerSubId[$value['subId']]))
				{
					$subIdVisits[$key]["COST"] = $subIdVisits[$key]["AVERAGE CPC"] = $subIdVisits[$key]["CPC"] = "$ ".$costPerSubId[$value['subId']];
				}
				else
				{
					$subIdVisits[$key]["CPC"] = $subIdVisits[$key]["AVERAGE CPC"] = $subIdVisits[$key]["COST"] = "$ 0";
				}

				$visitorIdList[$value['visitorId']] = $value['visitorId'];
		}

		$step1 = $this->getSubIdStep1($visitorIdList);
		$step1List = array();
		foreach ($step1 as $key => $value) {
			$step1List[$value['visitorId']] = $value['subId'];
		}

		$step2 = $this->getSubIdStep2($visitorIdList);
		$step2List = array();
		foreach ($step2 as $key => $value) {
			$step2List[$value['visitorId']] = $value['subId'];
		}

		$subSubIds = array();
		$subSubIds = $this->getSubSubIdsForVisitor($visitorIdList);


		unset($visitorIdList);
		unset($step2);
		unset($step1);

		$subSubIdsArray = array();
		if (!empty($subSubIds)){
			foreach ($subSubIds as $key => $value) {
				$subSubIdsArray[$value['uniqueId']][$value['visitId']][$value['subSubIdName']] = $value['subSubIdValue'];
			}
		}

		unset($subSubIds);

		$totalArray = array();

		foreach ($subIdVisits as $key => $value) {
			if(!empty($step1List[$value['visitorId']]))
			{
				$subIdVisits[$key]['Step 1'] = '1';
				$subIdVisits[$key]['Step 2'] = '0';
				$subIdVisits[$key]['reg 1 to reg 2%'] = '0%';
				$subIdVisits[$key]['CPA reg 2'] = "$ 0";
			}
			elseif(!empty($step2List[$value['visitorId']]))
			{
				$subIdVisits[$key]['Step 1'] = '0';
				$subIdVisits[$key]['Step 2'] = '1';
				$subIdVisits[$key]['reg 1 to reg 2%'] = '100%';
				$subIdVisits[$key]['CPA reg 2'] = isset($costPerSubId[$value['subId']]) ? "$ ".$costPerSubId[$value['subId']] : "$ 0";
			}
			else{
				$subIdVisits[$key]['Step 2'] = $subIdVisits[$key]['Step 1'] = '0';
				// $subIdVisits[$key]['Step 2'] = '0';
				$subIdVisits[$key]['reg 1 to reg 2%'] = '0%';
				$subIdVisits[$key]['CPA reg 2'] = "$ 0";
			}
				$subIdVisits[$key]['Unique Clicks'] = '1';
				$subIdVisits[$key]['Total Leads'] = $subIdVisits[$key]['Step 2'] + $subIdVisits[$key]['Step 1'];


				$totalArray[$subIdVisits[$key]['platform']]['subId'] = "TOTAL";
				$totalArray[$subIdVisits[$key]['platform']]['platform'] = $subIdVisits[$key]['platform'];
				
				if(isset($subIdVisits[$key]['Unique Clicks']) && isset($totalArray[$subIdVisits[$key]['platform']]['Unique Clicks'])){
					$totalArray[$subIdVisits[$key]['platform']]['Unique Clicks'] = $totalArray[$subIdVisits[$key]['platform']]['Unique Clicks'] + $subIdVisits[$key]['Unique Clicks'];
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['Unique Clicks'] = '';
				}
			
				if(isset($subIdVisits[$key]['Step 1']) && isset($totalArray[$subIdVisits[$key]['platform']]['Step 1'])){
					$totalArray[$subIdVisits[$key]['platform']]['Step 1'] = $totalArray[$subIdVisits[$key]['platform']]['Step 1'] + $subIdVisits[$key]['Step 1'];
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['Step 1'] = '';
				}
			
				if(isset($subIdVisits[$key]['Step 2']) && isset($totalArray[$subIdVisits[$key]['platform']]['Step 2'])){
					$totalArray[$subIdVisits[$key]['platform']]['Step 2'] = $totalArray[$subIdVisits[$key]['platform']]['Step 2'] + $subIdVisits[$key]['Step 2'];
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['Step 2'] = '';
				}
				
				if(isset($subIdVisits[$key]['Total Leads']) && isset($totalArray[$subIdVisits[$key]['platform']]['Total Leads'])){
					$totalArray[$subIdVisits[$key]['platform']]['Total Leads'] = $totalArray[$subIdVisits[$key]['platform']]['Total Leads'] + $subIdVisits[$key]['Total Leads'];
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['Total Leads'] = '';
				}
				
				if($subIdVisits[$key]['COST'] != "$ 0" && isset($totalArray[$subIdVisits[$key]['platform']]['COST'])){
					$totalArray[$subIdVisits[$key]['platform']]['COST'] = "$ ".(str_replace("$ ", "", $totalArray[$subIdVisits[$key]['platform']]['COST']) + str_replace('$ ', "", $subIdVisits[$key]['COST']));
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['COST'] = "$ 0";
				}
				
				if($totalArray[$subIdVisits[$key]['platform']]['Total Leads'] != 0 && isset($totalArray[$subIdVisits[$key]['platform']]['reg 1 to reg 2%'])){
					$totalArray[$subIdVisits[$key]['platform']]['reg 1 to reg 2%'] = number_format((($totalArray[$subIdVisits[$key]['platform']]['Step 2'] * 100)/$totalArray[$subIdVisits[$key]['platform']]['Total Leads']), 2)."%";
				}
				else
				{
					$totalArray[$subIdVisits[$key]['platform']]['reg 1 to reg 2%'] = isset($totalArray[$subIdVisits[$key]['platform']]['reg 1 to reg 2%']) ? $totalArray[$subIdVisits[$key]['platform']]['reg 1 to reg 2%'] : '';
				}


				if(!empty($subSubIdsArray))
				{
					$tempSubIds = !empty($subSubIdsArray[$value['subId']][$value['visitorId']]) ? $subSubIdsArray[$value['subId']][$value['visitorId']] : '';

					if(is_array($tempSubIds) && !empty($tempSubIds)){
						foreach ($tempSubIds as $k => $v) {
							$subIdVisits[$key][$k] = $v;
						}
					}					

				}
		}

		$totalCsvArray = array();
		foreach ($totalArray as $key => $value) {
			foreach ($fileheader as $k => $v) {
				$totalCsvArray[$key][$k] = isset($value[$v]) ? $value[$v] : " ";

			}
			fputcsv($fileOutput, $totalCsvArray[$key]);
		}

		unset($step2List);
		unset($step1List);

		$csvVisits = array();
		foreach ($subIdVisits as $key => $value) {
		    //set Google adsBot label only for clicks from google adsBot
		    if ($value['userAgent'] == "AdsBot-Google (+http://www.google.com/adsbot.html)")
		    {
		        $value['userAgent'] = " adbot-google ";
		    }
		    elseif($value['userAgent'] == "Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; AdsBot-Google-Mobile; +http://www.google.com/mobile/adsbot.html)")
		    {
		        $value['userAgent'] = " adbot-google ";
		    }
		    else
		    {
		        $value['userAgent'] = "";
		    }
			foreach ($fileheader as $k => $v) {
				$csvVisits[$key][$k] = isset($value[$v]) ? $value[$v] : " ";

			}

			unset($subIdVisits[$key]);

			$tempSubIds = !empty($subSubIdsArray[$value['subId']][$value['visitorId']]) ? $subSubIdsArray[$value['subId']][$value['visitorId']] : '';
					if(is_array($tempSubIds) && !empty($tempSubIds)){
						foreach ($tempSubIds as $sKey => $sVal) {
							$csvVisits[$key][$sKey] = $sVal;
						}
					}

			fputcsv($fileOutput, $csvVisits[$key]);
			unset($csvVisits[$key]);
		}


		fclose($fileOutput);
		die();
		/*Below are some example links with subIDs*/
		// localhost/microrecruiting/boston-ma/driving/?id=500001&s1=danut-test&s2=nicu-test&s3=audio-test&s4=test-final
		// http://localhost/microrecruiting/boston-ma/driving/?id=500001&s22=final_danut_test&s9=test-final-nicu
		// http://localhost/microrecruiting/boston-ma/driving/?id=500001&s2=final_danut_test2&s3=test-final-nicu3

		// test-123124@mail.com
	}

	private function getSubIdVisits($dates, $adsBot)
	{
	  if ($adsBot == 'without')
	    {
	        $select = $this->db->select()
	        ->from(array('mrc'=>'microRecruitingVisits'), array('subId', 'visitorId'=>'id','referer','userAgent'))
	        ->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('removed' => new Zend_Db_Expr("IF(mrj.status = '1', 'No', 'Yes')")))
	        ->joinLeft(array('mrjp' => 'microRecruitingJobPlatform'), 'mrj.platformId=mrjp.id', array('platform' => 'name'))
	        ->joinLeft(array('mrjt' => 'microRecruitingJobType'), 'mrjt.id=mrj.jobTypeId', array('jobType'))
	        ->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
	        ->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
	        ->joinLeft(array('mrjtitle' => 'microRecruitingJobTitle'), 'mrj.titleId=mrjtitle.id', array('title'))
	        ->joinLeft(array('mrjk' => 'microRecruitingJobKeyWord'), 'mrj.keyWordId=mrjk.id', array('keyWord'))
	        ->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
	        ->where('mrc.userAgent != ?', "AdsBot-Google (+http://www.google.com/adsbot.html)")
	        ->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
	        ->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
	        ->where('mrc.userAgent != ?', "Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; AdsBot-Google-Mobile; +http://www.google.com/mobile/adsbot.html)")
	        ->group('CAST(mrc.date as DATE)')
	        ->group('mrc.id')
	        ->order('CAST(mrc.date as DATE) ASC');
	        return $this->db->fetchAll($select);
	    }
	    elseif ($adsBot == 'with')
	    {
	        $select = $this->db->select()
	        ->from(array('mrc'=>'microRecruitingVisits'), array('subId', 'visitorId'=>'id','referer','userAgent'))
	        ->join(array('mrj' => 'microRecruitingJob'), 'mrj.id=mrc.subId', array('removed' => new Zend_Db_Expr("IF(mrj.status = '1', 'No', 'Yes')")))
	        ->joinLeft(array('mrjp' => 'microRecruitingJobPlatform'), 'mrj.platformId=mrjp.id', array('platform' => 'name'))
	        ->joinLeft(array('mrjt' => 'microRecruitingJobType'), 'mrjt.id=mrj.jobTypeId', array('jobType'))
	        ->joinLeft(array('mrcat' => 'microRecruitingCategory'), 'mrcat.id=mrj.categoryId', array('category' => 'categoryName'))
	        ->joinLeft(array('mrcity' => 'microRecruitingCities'), 'mrcity.id=mrj.cityId', array('city' => 'name'))
	        ->joinLeft(array('mrjtitle' => 'microRecruitingJobTitle'), 'mrj.titleId=mrjtitle.id', array('title'))
	        ->joinLeft(array('mrjk' => 'microRecruitingJobKeyWord'), 'mrj.keyWordId=mrjk.id', array('keyWord'))
	        ->where(new Zend_db_Expr('CAST(mrc.date as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
	        ->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)")
	        ->where('mrc.userAgent != ?', "Mozilla/5.0 (compatible; heritrix/3.3.0-SNAPSHOT-20140702-2247 +http://archive.org/details/archive.org_bot)")
	        ->group('CAST(mrc.date as DATE)')
	        ->group('mrc.id')
	        ->order('CAST(mrc.date as DATE) ASC');
	        return $this->db->fetchAll($select);
	    }
	}

	private function getLastCost($dates)
	{
		$select = $this->db->select()
					->from('microRecruitingJobCostDate', array('subId', 'cost', 'date'))
					->distinct('subId')
					->where('date = ?', new Zend_db_Expr('CAST(date as DATE)'))
					->group('subId')
					->order('date DESC')
					;

		return  $this->db->fetchAll($select);
	}

	private function getSubIdStep1($visitorId)
	{
		$select  = $this->db->select()
					->from('microRecruitingSubIdTrackingStep1', array('subId', 'visitorId'))
					->where('visitorId IN (?)', $visitorId)
					->group('visitorId');

		return $this->db->fetchAll($select);
	}

	private function getSubIdStep2($visitorId)
	{
		$select  = $this->db->select()
					->from('microRecruitingSubIdTrackingStep2', array('subId', 'visitorId'))
					->where('visitorId IN (?)', $visitorId)
					->group('visitorId');

		return $this->db->fetchAll($select);
	}

	private function getSubSubIdsForVisitor($visitorList)
	{
		$select = $this->db->select()
					->from(array('ut'=>'subSubIdUrlTracking'), array('subSubId', 'uniqueId', "visitId"))
					->join(array('ssid'=>'subSubId'), 'ut.subSubId = ssid.id', array('subSubIdName', 'subSubIdValue'))
					->where('ut.visitId IN (?)',  $visitorList)
					->where('ut.platformId = "2"')
					;


		return $this->db->fetchAll($select);

	}

	public function exportCleaningAssessment($data)
	{
		$dates = array( 'dateFrom' => $data['dateFrom'],
						'dateUntil' => $data['dateUntil']);
		$dates = $this->formatDate($dates);

		$surveyId = '104'; // surveyId for reg 2 for cleaning flow => wistia flow 2
		$result = $this->getCleaningAssessmentUsers($dates, $surveyId);
		$answers = $this->getSurveyQA($dates, [111, 116]);
		$subSubIds =$this->getSurveyQASubIds($dates);

		$resultData = array();
		foreach ($result as $key => $value) {
			foreach ($value as $k => $v) {
				$resultData[$value['userId']][$k] = $v; 
			}
		}

		$formatedAnswers = array();
		foreach ($answers as $key => $value) {
			$formatedAnswers[$value['userId']][$value['question']] = trim($value['answer']);
			// $resultData[$value['userId']]['answers'][] = $value;	
		}
		foreach ($formatedAnswers as $key => $value) {
			$resultData[$key] = array_merge($resultData[$key], $formatedAnswers[$key]);
		}
		foreach ($subSubIds as $key => $value) {
			$resultData[$value['userId']][$value['subSubIdName']] = $value['subSubIdValue'];
		}
		$headerArray = array();
		foreach ($resultData as $value) {
			foreach ($value as $key => $v) {
				$headerArray[] = $key;
			}
		}

		$headerArray = array_unique($headerArray, SORT_STRING);
		$headerArray = array_flip($headerArray);
		$csvArray = array();
		foreach ($resultData as $value) {
			foreach ($headerArray as $k => $val) {
				if(isset($value['userId']))
					$csvArray[$value['userId']][$k] = isset($value[$k]) ? $value[$k] : " ";
			}
		}

		$headerArray = array_flip($headerArray);

		$filename = 'export Cleaning Assessment - date range -' . $dates['dateFrom'] . ' - ' . $dates['dateUntil'] . ' - export date -' . date("d-m-Y-h:i:sA");
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
		
		$fileOutput = fopen('php://output', 'w');
		fputcsv($fileOutput, $headerArray);

		foreach ($csvArray as $value)
		{
			fputcsv($fileOutput, $value);
		}

		fclose($fileOutput);
		die;
	}

	private function getCleaningAssessmentUsers($dates, $surveyId)
	{
		$select = $this->db->select()
					->from(array('u'=>'userData'), array('userId'=>'id', 'email'))
					->distinct('u.userId')
					->joinLeft(array('sa'=>'surveyAnswered'), 'sa.userId = u.id', '')
					->joinLeft(array('mca'=>'microRecruitingCategoryAnswered'), 'mca.userId = u.id', 'category')
					->joinLeft(array('mc'=>'microRecruitingCities'), 'mca.city = mc.cityLink', array('cityName'=>'name'))
					->joinLeft(array('at'=>'microRecruitingActionTracking'), 'u.id = at.userId', 'country' )
					->joinLeft(array('sts2'=>'microRecruitingSubIdTrackingStep2'), 'u.id = sts2.userId', 'subId')
					->where('u.platform = "2"')
					->where('sa.surveyId =?', $surveyId)
// 					->where('sa.surveyId >= '.$limits[0])
// 					->where('sa.surveyId <= '.$limits[1])
					->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
					/*->limit("100")*/;

		return	$this->db->fetchAll($select);
	}

	/**
	 * Export Wistia Appliances
	 */
	
	public function exportWistiaAppliances($dates)
	{
		$dates = $this->formatDate($dates);
		$appliances = $this->getAllWistiaAppliances($dates);
		$userIds = array_column($appliances,'userId');

		$flows = array(	'3'	=>	'Wistia Flow 1',
						'4'	=>	'Wistia Flow 2'
		);
				
		$filename = 'Export Wistia Appliances - date range -' . $dates['dateFrom'] . ' - ' . $dates['dateUntil'] . ' - export date -' . date("d-m-Y-h:i:sA");
		header('Content-Type: application/excel');
		header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
	

		$fileOutput = fopen('php://output', 'w');
					
		$headerArray = array('userId'=>'', 'email'=>'', 'uniqueId'=>'', 'date'=>'', 'flow'=>'', 'redirect'=>'','firstName'=>'','lastName'=>'','zipCode'=>'','platform'=>'','jobTitle'=>'','cityState'=>'');

		// generate header for export
		$array2= array();
		foreach ($appliances as $applianceKey =>  $appliance )
		{
				ksort($appliance);
				$headerArray = array_merge($headerArray, $appliance);
				unset($headerArray['subId']);
		}

		foreach ($headerArray as &$details) 
		{
			$details = '';
		}
		fputcsv($fileOutput, array_keys($headerArray));

		// append data to header
		foreach ($appliances as $applianceDetails) 
		{
			$applianceDetails['uniqueId'] = $applianceDetails['subId'];
			if ($applianceDetails['uniqueId'] == '0')
			{
				$applianceDetails['uniqueId'] = '';
			}

			unset($applianceDetails['subId']);

			$values = array_merge($headerArray, $applianceDetails);
			$values['flow'] = $flows[$applianceDetails['flow']];
			if($values['redirect'] == 0 )
			{
				$values['redirect'] = 'Not interested';
			}
			elseif($values['redirect'] == 1)
			{
				$values['redirect'] = 'handy';
			}
			
			fputcsv($fileOutput, $values);
			
		}

		fclose($fileOutput);
		die;
	}
	
	/**
	 * Get all wistia appliances
	 * @return array
	 */
	
	private function getAllWistiaAppliances($dates)
	{
		$select = $this->db->select()
		->from(array('mtrw' => 'microRecruitingTrackingRedirectWistia'), array('userId', 'subId', 'date', 'flow', 'redirect'))
		->join(array('u' => 'userData'), 'mtrw.userId=u.id', array('email'))
		->where(new Zend_db_Expr('CAST(u.dateCreated as DATE) BETWEEN CAST("' . $dates['dateFrom'] . '" AS DATE) AND CAST("' . $dates['dateUntil'] . '" as DATE)'))
		->order('mtrw.date DESC');

		$result = $this->db->fetchAll($select);
		
		$data = $this->_getSubSubIdDataForUserTracking($result);
		return $data;
	}
	
	/**
	 * Get all wistia appliances data for SubSubIds and add it to the specific user
	 * @return array
	 * @author Nicu
	 */
	
	private function _getSubSubIdDataForUserTracking($result)
	{ 
		foreach ($result as $key => $value) 
		{
			$select = $this->db->select()
								->distinct()
								->from(array('ssIdT'=>'subSubIdUrlTracking'),array('subSubId'))
								->where('ssIdT.userId =?',$value['userId']);
			$userSubSubIdDataId = $this->db->fetchAll($select);

			$subSubIdsFromUrlTracking = array();

			if(!empty($value['subId']))
			{
				$dataToAppendToUser = $this->_dataToAppendToUserCityPlatformJobTitle($value['subId']);
				$result[$key] = array_merge($result[$key],$dataToAppendToUser);
			}

			if(!empty($userSubSubIdDataId))
			{
				$userSubSubIdData = $this->_getSubSubIdDataForWistiaAppliances($userSubSubIdDataId);
				foreach ($userSubSubIdData as $subSubId => $subSubIdDatas) 
				{
					// $appendedSubSubIds[$subSubIdDatas['subSubIdName']] = $subSubIdDatas['subSubIdValue'];
					$result[$key][$subSubIdDatas['subSubIdName']] = $subSubIdDatas['subSubIdValue'];					
				}	
			}

			$userNameAndZipCodeToAppend = $this->_getUserNameAndZipCodeToAppend($value['userId']);
			foreach ($userNameAndZipCodeToAppend as $question => $answer) 
			{
				$result[$key][$question] = $answer;
			}
		}
		return $result;
	}

	private function _getUserNameAndZipCodeToAppend($userId)
	{
		$surveyId = '104';
		$userPersonalData = array();
		
		$select = $this->db->select()
							->from(array('sA'=>'surveyAnswers'))
							->join(array('sF' => 'surveyField'), 'sF.id=sA.surveyFieldId', array('question'))
							->where('sA.userId =?',$userId)
							->where('sA.surveyId =?',$surveyId);
		$result = $this->db->fetchAll($select);

		foreach ($result as $key => $value) 
		{
			if($value['question'] == 'First Name:')
			{
				$userPersonalData['firstName']=$value['answer'];
			}
			elseif($value['question'] == 'Last Name:')
			{
				$userPersonalData['lastName']=$value['answer'];
			}
			elseif($value['question'] == 'Your Zip Code:')
			{
				$userPersonalData['zipCode']=$value['answer'];
			}

		}
		return $userPersonalData;
	}

	private function _getSubSubIdDataForWistiaAppliances($userSubSubIdDataId)
	{

		$select = $this->db->select()
								->from(array('ssId'=>'subSubId'),array('subSubIdName','subSubIdValue'))
								->where('ssId.id IN (?)',$userSubSubIdDataId);
		$userSubSubIdData = $this->db->fetchAll($select);
		return $userSubSubIdData;
	}

	private function _dataToAppendToUserCityPlatformJobTitle($subId)
	{
		$select = $this->db->select()
							->from('microRecruitingJob')
							->join(array('mrCat' => 'microRecruitingCategory'), 'microRecruitingJob.categoryId=mrCat.id', array('categoryName'))
							->join(array('mrCity' => 'microRecruitingCities'), 'microRecruitingJob.cityId=mrCity.id', array('cityLink'))
							->join(array('mrJbPlat' => 'microRecruitingJobPlatform'), 'microRecruitingJob.platformId=mrJbPlat.id', array('name'))
							->join(array('mrJbTitle' => 'microRecruitingJobTitle'), 'microRecruitingJob.titleId=mrJbTitle.id', array('title'))
							->where('microRecruitingJob.id =?',$subId);
		$result = $this->db->fetchAll($select);
	
		$userData = array('platform'=>'','jobTitle'=>'','cityState'=>'');
		foreach ($result as $key => $value) 
		{
			$userData['platform']=$value['name'];
			$userData['jobTitle']=$value['title'];
			$userData['cityState']=$value['cityLink'];
			
		}
		return $userData;
	}
}