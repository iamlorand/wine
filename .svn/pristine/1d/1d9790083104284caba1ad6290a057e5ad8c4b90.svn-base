<?php
/**
* DotBoost Technologies Inc.
* DotKernel Application Framework
*
* @category   DotKernel
* @package    Admin
 * @copyright  Copyright (c) 2009-2015 DotBoost Technologies Inc. (http://www.dotboost.com)
* @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
* @version    $Id: AdminController.php 872 2015-01-05 16:34:50Z gabi $
*/

/**
* Admin Controller
* @author     DotKernel Team <team@dotkernel.com>
*/
class admin_AdminController extends admin_BaseController
{
	private $adminView;
	private $adminModel;

	public function doIt()
	{
		$this->adminView = new Admin_View($this->tpl);
		$this->adminModel = new Admin(Dot_Request::getUserAgent(), Dot_Request::getHttpReffer());
		// switch based on the action, NO default action here
		$this->pageTitle = $this->option->pageTitle->action->{$this->registry->requestAction};
		switch ($this->registry->requestAction)
		{
			case 'login':
			{
				$this->login();
				break;
			}
			case 'logout':
			{
				$this->logout();
				break;
			}
			case 'authorize':
			{
				$this->authorize();
				break;
			}
			case 'account':
			{
				$this->account();
				break;
			}
			case 'list':
			{
				$this->listAdminUsers();
				break;
			}
			case 'add':
			{
				$this->add();
				break;
			}
			case 'update':
			{
				$this->update();
				break;
			}
			case 'activate':
			{
				$this->activate();
				break;
			}
			case 'delete':
			{
				$this->delete();
				break;
			}
			case 'logins':
			{
				$this->logins();
				break;
			}
		}
	}

	private function login()
	{
		$session = Zend_Registry::get("session");
		if ($session->admin !== null)
		{
			header('location: '.$this->registry->configuration->website->params->url.'/admin');
			exit();
		}
		
		// show the Login form
		$this->adminView->loginForm('login');
	}

	private function logout()
	{
		$dotAuth = Dot_Auth::getInstance();
		$dotAuth->clearIdentity('admin');
		header('location: '.$this->registry->configuration->website->params->url.'/' . $this->registry->requestModule);
		exit;
	}

	private function authorize()
	{
		if(array_key_exists('username', $_POST) && array_key_exists('password', $_POST))
		{
			// else validate the authorization request parameters 
			$values = array('username' => 
								array('username' => $_POST['username']), 
							'password' => array('password' => $_POST['password'])
						  );
			$dotValidateUser = new Dot_Validate_User(array('who' => 'admin', 'action' => 'login', 'values' => $values));
			if($dotValidateUser->isValid())
			{
				$this->adminModel->authorizeLogin($dotValidateUser->getData());
			}
			else
			{
				$error = $dotValidateUser->getError();
				// login info are NOT VALID
				$txt = array();
				$field = array('username', 'password');
				foreach ($field as $v)
				{
					if(array_key_exists($v, $error))
					{
						 $txt[] = $error[$v];
					}
				}
				$this->registry->session->message['txt'] = $txt;
				$this->registry->session->message['type'] = 'error';
		
			}
		}
		else
		{
			$this->registry->session->message['txt'] = $this->option->warningMessage->userPermission;
			$this->registry->session->message['type'] = 'warning';
		}
		header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestModule . '/' . $this->registry->requestController. '/login');
		exit;
	}

	private function account()
	{
		//display my account form
		$data = $this->adminModel->getUserBy('id', $this->registry->session->admin->id);
		$this->adminView->details('account',$data);
	}

	private function listAdminUsers()
	{
		// list admin users
		$page = (isset($this->registry->request['page']) && $this->registry->request['page'] > 0) ? $this->registry->request['page'] : 1;
		$users = $this->adminModel->getUserList($page);
		$this->adminView->listUser('list', $users, $page);
	}

	private function add()
	{
		// display form and add new admin
		$data = $_POST;
		$error = array();
		if($_SERVER['REQUEST_METHOD'] === "POST")
		{
			// changes were made to checkUserToken
			// see: Dot_Auth::checkUserToken($userToken, $userType='admin')
			// see: IndexController.php : $userToken
			if( !Dot_Auth::checkUserToken($this->userToken) ) // if the admin is not logged redir to 
			{
				// remove the identity
				$dotAuth = Dot_Auth::getInstance();
				$dotAuth->clearIdentity('admin');
				// warn the user
				$session->message['txt'] = $this->option->warningMessage->tokenExpired; 
				$session->message['type'] = 'warning';
				// log in 
				header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestController. '/login');
				exit;
			}
			// POST values that will be validated
			$values = array('details' => 
								array('firstName'=>$_POST['firstName'],
									  'lastName'=>$_POST['lastName']
									 ),
							'username' => 
								array('username' => $_POST['username']
									 ),
							'email' => array('email' => $_POST['email']),
							'enum' => array('0' => '0,1',
											'isActive' => $_POST['isActive']),
							'password' => array('password' => $_POST['password'],
												'password2' =>  $_POST['password2']
											   )
						);
			$dotValidateUser = new Dot_Validate_User(array('who' => 'admin', 'action' => 'add', 'values' => $values));
			if($dotValidateUser->isValid())
			{
				$data = $dotValidateUser->getData();
				// check if admin already exists by $field ('username','email')
				$checkBy = array('username', 'email');
				foreach ($checkBy as $field)
				{
					$adminExists = $this->adminModel->getUserBy($field, $data[$field]);
					if(!empty($adminExists))
					{
						$error = ucfirst($field) . ' '. $data[$field] . $this->option->errorMessage->userExists;
					}
				}
				if(empty($error))
				{
					// no error - then add admin user
					$this->adminModel->addUser($data);
					$this->registry->session->message['txt'] = $this->option->infoMessage->accountAdd;
					$this->registry->session->message['type'] = 'info';
					header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestModule . '/' . $this->registry->requestController. '/list/');
					exit;
				}
			}
			$error = array_merge($error, $dotValidateUser->getError());
			$data = $dotValidateUser->getData();
			if (!empty($error))
			{
				$this->registry->session->message['txt'] = $error;
				$this->registry->session->message['type'] = 'error';
			}
		}
		$this->adminView->details('add',$data);
	}

	private function update()
	{
		// display form and update admin user
		$error = array();
		if($_SERVER['REQUEST_METHOD'] === "POST")
		{
			// changes were made to checkUserToken
			// see: Dot_Auth::checkUserToken($userToken, $userType='admin')
			// see: IndexController.php : $userToken
			if( !Dot_Auth::checkUserToken($this->userToken) ) // if the admin is not logged redir to 
			{
				// remove the identity
				$dotAuth = Dot_Auth::getInstance();
				$dotAuth->clearIdentity('admin');
				// warn the user
				$session->message['txt'] = $this->option->warningMessage->tokenExpired; 
				$session->message['type'] = 'warning';
				// log in 
				header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestController. '/login');
				exit;
			}
			// POST values that will be validated
			$values = array('details' => 
								array('firstName'=>$_POST['firstName'],
									  'lastName'=>$_POST['lastName']
							),
							'email' => array('email' => $_POST['email']),
							'enum' => array('0' => '0,1'));
			if($_POST['password'] != '' || $_POST['password2'] !='' )
			{
				$values['password'] = array('password' => $_POST['password'],
											'password2' =>  $_POST['password2']
										   );
			}
			if(isset($_POST['isActive']))
			{
				$values['enum']['isActive'] =  $_POST['isActive'];
			}
			$dotValidateUser = new Dot_Validate_User(array('who' => 'admin', 'action' => 'update', 'values' => $values, 'userId' => $this->registry->request['id']));
			if($dotValidateUser->isValid())
			{
				$data = $dotValidateUser->getData();
				// no error - then update admin user
				$data['id'] = $this->registry->request['id'];
				$this->adminModel->updateUser($data);
				$this->registry->session->message['txt'] = $this->option->infoMessage->accountUpdate;
				$this->registry->session->message['type'] = 'info';
				header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestModule . '/' . $this->registry->requestController. '/list/');
				exit;
			}
			else
			{
				$this->registry->session->message['txt'] = $dotValidateUser->getError();
				$this->registry->session->message['type'] = 'error';
			}
		}
		$data = $this->adminModel->getUserBy('id', $this->registry->request['id']);
		$this->adminView->setExtraBreadcrumb($data['username']);
		$this->pageTitle .= ' "' . $data['username'] . '"';
		$this->adminView->details('update',$data);
	}

	private function activate()
	{
		// activate/deactivate admin user
		// this action is called via Ajax
		
		// changes were made to checkUserToken
		// see: Dot_Auth::checkUserToken($userToken, $userType='admin')
		// see: IndexController.php : $userToken
		if( !Dot_Auth::checkUserToken($this->userToken) ) // if the admin is not logged redir to 
		{
			// remove the identity
			$dotAuth = Dot_Auth::getInstance();
			$dotAuth->clearIdentity('admin');
			// warn the user
			$session->message['txt'] = $this->option->warningMessage->tokenExpired; 
			$session->message['type'] = 'warning';
			// log in 
			header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestController. '/login');
			exit;
		}
		
		$id = (isset($_POST['id'])) ? (int)$_POST['id'] : 0;
		$isActive = (isset($_POST['isActive'])) ? $_POST['isActive'] : 0;
		$values = array('enum' => array('0' => '0,1', 'isActive' => $isActive));		
		$dotValidateUser = new Dot_Validate_User(array('who' => 'admin', 'action' => 'activate', 'values' => $values));

		if($dotValidateUser->isValid())		
		{	
			$data = $dotValidateUser->getData();
			// no error - then change active value of admin user
			$this->adminModel->activateUser($id, $data['isActive']);
			$result = array(
				"success" => true,
				"id" => $id,
				"isActive" => intval($data["isActive"])
			);
		}
		else
		{
			$result = array("success" => false, "message" => "An error occured");
		}
		echo Zend_Json::encode($result);
		exit;
	}

	private function delete()
	{
		// display confirmation form and delete admin user
		if($_SERVER['REQUEST_METHOD'] === "POST")
		{
			// changes were made to checkUserToken
			// see: Dot_Auth::checkUserToken($userToken, $userType='admin')
			// see: IndexController.php : $userToken
			if( !Dot_Auth::checkUserToken($this->userToken) ) // if the admin is not logged redir to 
			{
				// remove the identity
				$dotAuth = Dot_Auth::getInstance();
				$dotAuth->clearIdentity('admin');
				// warn the user
				$session->message['txt'] = $this->option->warningMessage->tokenExpired; 
				$session->message['type'] = 'warning';
				// log in 
				header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestController. '/login');
				exit;
			}
			
			if ('on' == $_POST['confirm'])
			{
				// delete admin user
				$this->adminModel->deleteUser($this->registry->request['id']);
				$this->registry->session->message['txt'] = $this->option->infoMessage->accountDelete;
				$this->registry->session->message['type'] = 'info';
			}
			else
			{
				$this->registry->session->message['txt'] = $this->option->infoMessage->noAccountDelete;
				$this->registry->session->message['type'] = 'info';
			}
			header('Location: '.$this->registry->configuration->website->params->url. '/' . $this->registry->requestModule . '/' . $this->registry->requestController. '/list/');
			exit;
		}
		$data = $this->adminModel->getUserBy('id', $this->registry->request['id']);
		$this->adminView->setExtraBreadcrumb($data['username']);
		$this->pageTitle .= ' "' . $data['username'] . '"';
		// delete page confirmation
		$this->adminView->details('delete', $data);
	}

	private function logins()
	{
		// list user logins
		$id = (isset($this->registry->request['id'])) ? (int)$this->registry->request['id'] : 0;		
		$page = (isset($this->registry->request['page']) && $this->registry->request['page'] > 0) ? $this->registry->request['page'] : 1;
		$logins = $this->adminModel->getLogins($id, $page);
		$this->adminView->loginsUser('logins', $logins, $page);
	}
}