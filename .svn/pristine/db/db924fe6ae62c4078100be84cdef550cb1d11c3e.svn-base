<?php
/**
* DotBoost Technologies Inc.
* DotKernel Application Framework
*
* @category   DotKernel
* @package    Admin
 * @copyright  Copyright (c) 2009-2015 DotBoost Technologies Inc. (http://www.dotboost.com)
* @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
* @version    $Id: IndexController.php 872 2015-01-05 16:34:50Z gabi $
*/

/**
* Admin Module - Index Controller
* Is doing all the job for specific admin control stuff
* @author     DotKernel Team <team@dotkernel.com>
*/
class admin_IndexController extends admin_BaseController
{
	public function doIt()
	{
		$this->init();

		$this->controllerAction();

		$this->tplParse();
	}

	private function init()
	{
		// initialize the session
		// if you don't use the session object in this module, feel free to remove this line
		Dot_Session::start();

		// start the template object, empty for the moment
		require(DOTKERNEL_PATH . '/' . $this->registry->requestModule . '/' . 'View.php');
		$this->tpl = View::getInstance(TEMPLATES_PATH . '/' . $this->registry->requestModule);
		$this->tpl->init();

		// assign Index Template file
		$this->tpl->setViewFile();

		// set paths in templates
		$this->tpl->setViewPaths();

		/** 
		 * each Controller  must load its own specific models and views
		 */
		Dot_Settings :: loadControllerFiles($this->registry->requestModule);

		/**
		 * Load option(specific configuration file for current dot) file
		 */
		$this->option = Dot_Settings::getOptionVariables($this->registry->requestModule, $this->registry->requestControllerProcessed);
		$this->registry->option = $this->option;

		/**
		 * Start the variable for Page Title, this will be used as H1 tag too 
		 */
		$this->pageTitle = 'Overwrite Me Please !';
	}

	private function controllerAction()
	{
		/**
		 * From rev 833
		 * DotAuth::checkUserToken() will be given at least one parameter
		 * $userToken - mandatory
		 * $userType - optional - by default 'admin'
		 *
		 * To simplify it, we will put the variable $userToken
		 * If we do not have the token, it will be marked with NULL
		 *
		 * NULL - user does not have a token
		 * ''   - user have an empty token
		 * Any other (string) value - the token
		 *
		 * See Dot_Auth::checkUserToken()
		 */
		$userToken = (isset($_POST['userToken'])) ? $_POST['userToken'] : null;

		/**
		 * From this point , the control is taken by the Action specific controller
		 * call the Action specific file, but check first if exists 
		 */
		$actionControllerPath = CONTROLLERS_PATH . '/' . $this->registry->requestModule . '/' . $this->registry->requestControllerProcessed . 'Controller.php';

		if(file_exists($actionControllerPath))
		{
			$dotAuth = Dot_Auth::getInstance();
			$dotAuth->checkIdentity('admin');

			$newObject = 'admin_' . $this->registry->requestControllerProcessed . 'Controller';
			$reflection = new ReflectionClass($newObject);
			$controller = $reflection->newInstanceArgs();

			$controller->tpl = $this->tpl;
			$controller->registry = $this->registry;
			$controller->option = $this->option;
			$controller->pageTitle = $this->pageTitle;
			$controller->userToken = $userToken;

			$controller->doIt();
			$this->tpl = $controller->tpl;
			$this->option = $controller->option;
			$this->registry = $controller->registry;
			$this->pageTitle = $controller->pageTitle;
		}
		else
		{
			Dot_Route::pageNotFound('admin');
		}
	}

	private function tplParse()
	{
		// set menus
		$this->tpl->setViewMenu();

		// set info bar
		$this->tpl->setInfoBar();

		// set SEO html tags from dots/seo.xml file
		$this->tpl->setSeoValues($this->pageTitle);

		// dispaly message (error, warning, info)	
		$this->tpl->displayMessage();

		// display widgets
		$this->tpl->displayWidgets($this->option->widgets->content);

		// parse the main content block
		$this->tpl->parse('MAIN_CONTENT', 'tpl_main');

		// show debugbar, only for logged in admins
		if (isset($_SESSION['admin']['admin']))
		{
			$debug = new Dot_Debug($this->tpl);
			$debug->show();
		}

		// parse and print the output
		$this->tpl->pparse('OUTPUT', 'tpl_index');
	}
}